
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002200  00002274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000017dc  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b46  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000045ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000046ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000485e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000064a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000852d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ef 10 	jmp	0x21de	; 0x21de <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "DIO_Interface.h"
#include "LCD_Interface.h"
#include "Keypad_Interface.h"

int main (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8PressedValue = 'F';
     b40:	86 e4       	ldi	r24, 0x46	; 70
     b42:	89 83       	std	Y+1, r24	; 0x01

	DIO_vdSetPortDirection(LCD_U8_DATA_PORT,PORT_OUTPUT);
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	6f ef       	ldi	r22, 0xFF	; 255
     b48:	0e 94 bb 05 	call	0xb76	; 0xb76 <DIO_vdSetPortDirection>
	DIO_vdSetPortDirection(LCD_U8_CTRL_PORT,PORT_OUTPUT);
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	6f ef       	ldi	r22, 0xFF	; 255
     b50:	0e 94 bb 05 	call	0xb76	; 0xb76 <DIO_vdSetPortDirection>

	Keypad_vdInitialization();
     b54:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Keypad_vdInitialization>
	LCD_vdInitialization();
     b58:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <LCD_vdInitialization>

	while(1)
	{
		Keypad_vdGetPressedKey(&LOC_u8PressedValue);
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <Keypad_vdGetPressedKey>
		if(LOC_u8PressedValue != 'F')
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	86 34       	cpi	r24, 0x46	; 70
     b68:	c9 f3       	breq	.-14     	; 0xb5c <main+0x26>
		{
			LCD_vdSendChar(LOC_u8PressedValue);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_vdSendChar>
			LOC_u8PressedValue = 'F';
     b70:	86 e4       	ldi	r24, 0x46	; 70
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	f3 cf       	rjmp	.-26     	; 0xb5c <main+0x26>

00000b76 <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <DIO_vdSetPortDirection+0x6>
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <DIO_vdSetPortDirection+0x8>
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	84 30       	cpi	r24, 0x04	; 4
     b8a:	90 f5       	brcc	.+100    	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3c 83       	std	Y+4, r19	; 0x04
     b94:	2b 83       	std	Y+3, r18	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	91 05       	cpc	r25, r1
     b9e:	d1 f0       	breq	.+52     	; 0xbd4 <DIO_vdSetPortDirection+0x5e>
     ba0:	2b 81       	ldd	r18, Y+3	; 0x03
     ba2:	3c 81       	ldd	r19, Y+4	; 0x04
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f4       	brge	.+10     	; 0xbb4 <DIO_vdSetPortDirection+0x3e>
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	00 97       	sbiw	r24, 0x00	; 0
     bb0:	61 f0       	breq	.+24     	; 0xbca <DIO_vdSetPortDirection+0x54>
     bb2:	1e c0       	rjmp	.+60     	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
     bb4:	2b 81       	ldd	r18, Y+3	; 0x03
     bb6:	3c 81       	ldd	r19, Y+4	; 0x04
     bb8:	22 30       	cpi	r18, 0x02	; 2
     bba:	31 05       	cpc	r19, r1
     bbc:	81 f0       	breq	.+32     	; 0xbde <DIO_vdSetPortDirection+0x68>
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	91 05       	cpc	r25, r1
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <DIO_vdSetPortDirection+0x72>
     bc8:	13 c0       	rjmp	.+38     	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
     bca:	ea e3       	ldi	r30, 0x3A	; 58
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	80 83       	st	Z, r24
     bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
     bd4:	e7 e3       	ldi	r30, 0x37	; 55
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	8a 81       	ldd	r24, Y+2	; 0x02
     bda:	80 83       	st	Z, r24
     bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
     bde:	e4 e3       	ldi	r30, 0x34	; 52
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	80 83       	st	Z, r24
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
     be8:	e1 e3       	ldi	r30, 0x31	; 49
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <DIO_vdSetPortValue+0x6>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <DIO_vdSetPortValue+0x8>
     c06:	00 d0       	rcall	.+0      	; 0xc08 <DIO_vdSetPortValue+0xa>
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	08 f0       	brcs	.+2      	; 0xc18 <DIO_vdSetPortValue+0x1a>
     c16:	64 c0       	rjmp	.+200    	; 0xce0 <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 23       	and	r24, r24
     c1c:	79 f5       	brne	.+94     	; 0xc7c <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	3e 83       	std	Y+6, r19	; 0x06
     c26:	2d 83       	std	Y+5, r18	; 0x05
     c28:	8d 81       	ldd	r24, Y+5	; 0x05
     c2a:	9e 81       	ldd	r25, Y+6	; 0x06
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	91 05       	cpc	r25, r1
     c30:	c9 f0       	breq	.+50     	; 0xc64 <DIO_vdSetPortValue+0x66>
     c32:	2d 81       	ldd	r18, Y+5	; 0x05
     c34:	3e 81       	ldd	r19, Y+6	; 0x06
     c36:	22 30       	cpi	r18, 0x02	; 2
     c38:	31 05       	cpc	r19, r1
     c3a:	2c f4       	brge	.+10     	; 0xc46 <DIO_vdSetPortValue+0x48>
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	61 f0       	breq	.+24     	; 0xc5c <DIO_vdSetPortValue+0x5e>
     c44:	4d c0       	rjmp	.+154    	; 0xce0 <DIO_vdSetPortValue+0xe2>
     c46:	2d 81       	ldd	r18, Y+5	; 0x05
     c48:	3e 81       	ldd	r19, Y+6	; 0x06
     c4a:	22 30       	cpi	r18, 0x02	; 2
     c4c:	31 05       	cpc	r19, r1
     c4e:	71 f0       	breq	.+28     	; 0xc6c <DIO_vdSetPortValue+0x6e>
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	91 05       	cpc	r25, r1
     c58:	69 f0       	breq	.+26     	; 0xc74 <DIO_vdSetPortValue+0x76>
     c5a:	42 c0       	rjmp	.+132    	; 0xce0 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
     c5c:	eb e3       	ldi	r30, 0x3B	; 59
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	10 82       	st	Z, r1
     c62:	3e c0       	rjmp	.+124    	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
     c64:	e8 e3       	ldi	r30, 0x38	; 56
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	10 82       	st	Z, r1
     c6a:	3a c0       	rjmp	.+116    	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
     c6c:	e5 e3       	ldi	r30, 0x35	; 53
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	10 82       	st	Z, r1
     c72:	36 c0       	rjmp	.+108    	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
     c74:	e2 e3       	ldi	r30, 0x32	; 50
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	10 82       	st	Z, r1
     c7a:	32 c0       	rjmp	.+100    	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	3c 83       	std	Y+4, r19	; 0x04
     c84:	2b 83       	std	Y+3, r18	; 0x03
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	91 05       	cpc	r25, r1
     c8e:	d1 f0       	breq	.+52     	; 0xcc4 <DIO_vdSetPortValue+0xc6>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	2c f4       	brge	.+10     	; 0xca4 <DIO_vdSetPortValue+0xa6>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	61 f0       	breq	.+24     	; 0xcba <DIO_vdSetPortValue+0xbc>
     ca2:	1e c0       	rjmp	.+60     	; 0xce0 <DIO_vdSetPortValue+0xe2>
     ca4:	2b 81       	ldd	r18, Y+3	; 0x03
     ca6:	3c 81       	ldd	r19, Y+4	; 0x04
     ca8:	22 30       	cpi	r18, 0x02	; 2
     caa:	31 05       	cpc	r19, r1
     cac:	81 f0       	breq	.+32     	; 0xcce <DIO_vdSetPortValue+0xd0>
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	9c 81       	ldd	r25, Y+4	; 0x04
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	91 05       	cpc	r25, r1
     cb6:	81 f0       	breq	.+32     	; 0xcd8 <DIO_vdSetPortValue+0xda>
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
     cba:	eb e3       	ldi	r30, 0x3B	; 59
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	80 83       	st	Z, r24
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
     cc4:	e8 e3       	ldi	r30, 0x38	; 56
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	80 83       	st	Z, r24
     ccc:	09 c0       	rjmp	.+18     	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	80 83       	st	Z, r24
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
     ce0:	26 96       	adiw	r28, 0x06	; 6
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	27 97       	sbiw	r28, 0x07	; 7
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	6a 83       	std	Y+2, r22	; 0x02
     d0a:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_vdSetPintDirection+0x22>
     d12:	ee c0       	rjmp	.+476    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	88 30       	cpi	r24, 0x08	; 8
     d18:	08 f0       	brcs	.+2      	; 0xd1c <DIO_vdSetPintDirection+0x2a>
     d1a:	ea c0       	rjmp	.+468    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	09 f0       	breq	.+2      	; 0xd24 <DIO_vdSetPintDirection+0x32>
     d22:	6f c0       	rjmp	.+222    	; 0xe02 <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3f 83       	std	Y+7, r19	; 0x07
     d2c:	2e 83       	std	Y+6, r18	; 0x06
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	49 f1       	breq	.+82     	; 0xd8a <DIO_vdSetPintDirection+0x98>
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	3f 81       	ldd	r19, Y+7	; 0x07
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_vdSetPintDirection+0x5a>
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	61 f0       	breq	.+24     	; 0xd62 <DIO_vdSetPintDirection+0x70>
     d4a:	d2 c0       	rjmp	.+420    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
     d4c:	2e 81       	ldd	r18, Y+6	; 0x06
     d4e:	3f 81       	ldd	r19, Y+7	; 0x07
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	71 f1       	breq	.+92     	; 0xdb2 <DIO_vdSetPintDirection+0xc0>
     d56:	8e 81       	ldd	r24, Y+6	; 0x06
     d58:	9f 81       	ldd	r25, Y+7	; 0x07
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	e9 f1       	breq	.+122    	; 0xdda <DIO_vdSetPintDirection+0xe8>
     d60:	c7 c0       	rjmp	.+398    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
     d62:	aa e3       	ldi	r26, 0x3A	; 58
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ea e3       	ldi	r30, 0x3A	; 58
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_vdSetPintDirection+0x8e>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_vdSetPintDirection+0x8a>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	b3 c0       	rjmp	.+358    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_vdSetPintDirection+0xb6>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_vdSetPintDirection+0xb2>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	9f c0       	rjmp	.+318    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
     db2:	a4 e3       	ldi	r26, 0x34	; 52
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e4 e3       	ldi	r30, 0x34	; 52
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_vdSetPintDirection+0xde>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_vdSetPintDirection+0xda>
     dd4:	84 2b       	or	r24, r20
     dd6:	8c 93       	st	X, r24
     dd8:	8b c0       	rjmp	.+278    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
     dda:	a1 e3       	ldi	r26, 0x31	; 49
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e1 e3       	ldi	r30, 0x31	; 49
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_vdSetPintDirection+0x106>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_vdSetPintDirection+0x102>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	77 c0       	rjmp	.+238    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <DIO_vdSetPintDirection+0x118>
     e08:	73 c0       	rjmp	.+230    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3d 83       	std	Y+5, r19	; 0x05
     e12:	2c 83       	std	Y+4, r18	; 0x04
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	9d 81       	ldd	r25, Y+5	; 0x05
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	59 f1       	breq	.+86     	; 0xe74 <DIO_vdSetPintDirection+0x182>
     e1e:	2c 81       	ldd	r18, Y+4	; 0x04
     e20:	3d 81       	ldd	r19, Y+5	; 0x05
     e22:	22 30       	cpi	r18, 0x02	; 2
     e24:	31 05       	cpc	r19, r1
     e26:	2c f4       	brge	.+10     	; 0xe32 <DIO_vdSetPintDirection+0x140>
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	9d 81       	ldd	r25, Y+5	; 0x05
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f0       	breq	.+26     	; 0xe4a <DIO_vdSetPintDirection+0x158>
     e30:	5f c0       	rjmp	.+190    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
     e32:	2c 81       	ldd	r18, Y+4	; 0x04
     e34:	3d 81       	ldd	r19, Y+5	; 0x05
     e36:	22 30       	cpi	r18, 0x02	; 2
     e38:	31 05       	cpc	r19, r1
     e3a:	89 f1       	breq	.+98     	; 0xe9e <DIO_vdSetPintDirection+0x1ac>
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_vdSetPintDirection+0x156>
     e46:	40 c0       	rjmp	.+128    	; 0xec8 <DIO_vdSetPintDirection+0x1d6>
     e48:	53 c0       	rjmp	.+166    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
     e4a:	aa e3       	ldi	r26, 0x3A	; 58
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	ea e3       	ldi	r30, 0x3A	; 58
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_vdSetPintDirection+0x176>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_vdSetPintDirection+0x172>
     e6c:	80 95       	com	r24
     e6e:	84 23       	and	r24, r20
     e70:	8c 93       	st	X, r24
     e72:	3e c0       	rjmp	.+124    	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
     e74:	a7 e3       	ldi	r26, 0x37	; 55
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	e7 e3       	ldi	r30, 0x37	; 55
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	48 2f       	mov	r20, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <DIO_vdSetPintDirection+0x1a0>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <DIO_vdSetPintDirection+0x19c>
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	29 c0       	rjmp	.+82     	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_vdSetPintDirection+0x1ca>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_vdSetPintDirection+0x1c6>
     ec0:	80 95       	com	r24
     ec2:	84 23       	and	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
     ec8:	a1 e3       	ldi	r26, 0x31	; 49
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e3       	ldi	r30, 0x31	; 49
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_vdSetPintDirection+0x1f4>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_vdSetPintDirection+0x1f0>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
     ef0:	27 96       	adiw	r28, 0x07	; 7
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	27 97       	sbiw	r28, 0x07	; 7
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6a 83       	std	Y+2, r22	; 0x02
     f1a:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	84 30       	cpi	r24, 0x04	; 4
     f20:	08 f0       	brcs	.+2      	; 0xf24 <DIO_vdSetPinValue+0x22>
     f22:	ee c0       	rjmp	.+476    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	08 f0       	brcs	.+2      	; 0xf2c <DIO_vdSetPinValue+0x2a>
     f2a:	ea c0       	rjmp	.+468    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <DIO_vdSetPinValue+0x32>
     f32:	6f c0       	rjmp	.+222    	; 0x1012 <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	3f 83       	std	Y+7, r19	; 0x07
     f3c:	2e 83       	std	Y+6, r18	; 0x06
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	91 05       	cpc	r25, r1
     f46:	49 f1       	breq	.+82     	; 0xf9a <DIO_vdSetPinValue+0x98>
     f48:	2e 81       	ldd	r18, Y+6	; 0x06
     f4a:	3f 81       	ldd	r19, Y+7	; 0x07
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	2c f4       	brge	.+10     	; 0xf5c <DIO_vdSetPinValue+0x5a>
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	9f 81       	ldd	r25, Y+7	; 0x07
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	61 f0       	breq	.+24     	; 0xf72 <DIO_vdSetPinValue+0x70>
     f5a:	d2 c0       	rjmp	.+420    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
     f5c:	2e 81       	ldd	r18, Y+6	; 0x06
     f5e:	3f 81       	ldd	r19, Y+7	; 0x07
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	71 f1       	breq	.+92     	; 0xfc2 <DIO_vdSetPinValue+0xc0>
     f66:	8e 81       	ldd	r24, Y+6	; 0x06
     f68:	9f 81       	ldd	r25, Y+7	; 0x07
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	e9 f1       	breq	.+122    	; 0xfea <DIO_vdSetPinValue+0xe8>
     f70:	c7 c0       	rjmp	.+398    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
     f72:	ab e3       	ldi	r26, 0x3B	; 59
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	eb e3       	ldi	r30, 0x3B	; 59
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_vdSetPinValue+0x8e>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_vdSetPinValue+0x8a>
     f94:	84 2b       	or	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	b3 c0       	rjmp	.+358    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
     f9a:	a8 e3       	ldi	r26, 0x38	; 56
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e8 e3       	ldi	r30, 0x38	; 56
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	48 2f       	mov	r20, r24
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 2e       	mov	r0, r18
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_vdSetPinValue+0xb6>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	0a 94       	dec	r0
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_vdSetPinValue+0xb2>
     fbc:	84 2b       	or	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	9f c0       	rjmp	.+318    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
     fc2:	a5 e3       	ldi	r26, 0x35	; 53
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e5 e3       	ldi	r30, 0x35	; 53
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_vdSetPinValue+0xde>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_vdSetPinValue+0xda>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	8b c0       	rjmp	.+278    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_vdSetPinValue+0x106>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_vdSetPinValue+0x102>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	77 c0       	rjmp	.+238    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	88 23       	and	r24, r24
    1016:	09 f0       	breq	.+2      	; 0x101a <DIO_vdSetPinValue+0x118>
    1018:	73 c0       	rjmp	.+230    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3d 83       	std	Y+5, r19	; 0x05
    1022:	2c 83       	std	Y+4, r18	; 0x04
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	9d 81       	ldd	r25, Y+5	; 0x05
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	59 f1       	breq	.+86     	; 0x1084 <DIO_vdSetPinValue+0x182>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <DIO_vdSetPinValue+0x140>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	69 f0       	breq	.+26     	; 0x105a <DIO_vdSetPinValue+0x158>
    1040:	5f c0       	rjmp	.+190    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	89 f1       	breq	.+98     	; 0x10ae <DIO_vdSetPinValue+0x1ac>
    104c:	8c 81       	ldd	r24, Y+4	; 0x04
    104e:	9d 81       	ldd	r25, Y+5	; 0x05
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	91 05       	cpc	r25, r1
    1054:	09 f4       	brne	.+2      	; 0x1058 <DIO_vdSetPinValue+0x156>
    1056:	40 c0       	rjmp	.+128    	; 0x10d8 <DIO_vdSetPinValue+0x1d6>
    1058:	53 c0       	rjmp	.+166    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    105a:	ab e3       	ldi	r26, 0x3B	; 59
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	eb e3       	ldi	r30, 0x3B	; 59
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_vdSetPinValue+0x176>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_vdSetPinValue+0x172>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	3e c0       	rjmp	.+124    	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    1084:	a8 e3       	ldi	r26, 0x38	; 56
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e3       	ldi	r30, 0x38	; 56
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_vdSetPinValue+0x1a0>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_vdSetPinValue+0x19c>
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	29 c0       	rjmp	.+82     	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    10ae:	a5 e3       	ldi	r26, 0x35	; 53
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e3       	ldi	r30, 0x35	; 53
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_vdSetPinValue+0x1ca>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_vdSetPinValue+0x1c6>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    10d8:	a2 e3       	ldi	r26, 0x32	; 50
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e2 e3       	ldi	r30, 0x32	; 50
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_vdSetPinValue+0x1f4>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_vdSetPinValue+0x1f0>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    1100:	27 96       	adiw	r28, 0x07	; 7
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <DIO_u8GetPinValue+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_u8GetPinValue+0x8>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_u8GetPinValue+0xa>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	84 30       	cpi	r24, 0x04	; 4
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_u8GetPinValue+0x1a>
    112a:	70 c0       	rjmp	.+224    	; 0x120c <DIO_u8GetPinValue+0xfa>
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <DIO_u8GetPinValue+0x22>
    1132:	6c c0       	rjmp	.+216    	; 0x120c <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	4c 81       	ldd	r20, Y+4	; 0x04
    1140:	5d 81       	ldd	r21, Y+5	; 0x05
    1142:	41 30       	cpi	r20, 0x01	; 1
    1144:	51 05       	cpc	r21, r1
    1146:	49 f1       	breq	.+82     	; 0x119a <DIO_u8GetPinValue+0x88>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	91 05       	cpc	r25, r1
    1150:	34 f4       	brge	.+12     	; 0x115e <DIO_u8GetPinValue+0x4c>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	21 15       	cp	r18, r1
    1158:	31 05       	cpc	r19, r1
    115a:	61 f0       	breq	.+24     	; 0x1174 <DIO_u8GetPinValue+0x62>
    115c:	57 c0       	rjmp	.+174    	; 0x120c <DIO_u8GetPinValue+0xfa>
    115e:	4c 81       	ldd	r20, Y+4	; 0x04
    1160:	5d 81       	ldd	r21, Y+5	; 0x05
    1162:	42 30       	cpi	r20, 0x02	; 2
    1164:	51 05       	cpc	r21, r1
    1166:	61 f1       	breq	.+88     	; 0x11c0 <DIO_u8GetPinValue+0xae>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f1       	breq	.+116    	; 0x11e6 <DIO_u8GetPinValue+0xd4>
    1172:	4c c0       	rjmp	.+152    	; 0x120c <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    1174:	e9 e3       	ldi	r30, 0x39	; 57
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a9 01       	movw	r20, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_u8GetPinValue+0x7a>
    1188:	55 95       	asr	r21
    118a:	47 95       	ror	r20
    118c:	8a 95       	dec	r24
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_u8GetPinValue+0x76>
    1190:	ca 01       	movw	r24, r20
    1192:	58 2f       	mov	r21, r24
    1194:	51 70       	andi	r21, 0x01	; 1
    1196:	5b 83       	std	Y+3, r21	; 0x03
    1198:	3a c0       	rjmp	.+116    	; 0x120e <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    119a:	e6 e3       	ldi	r30, 0x36	; 54
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_u8GetPinValue+0xa0>
    11ae:	55 95       	asr	r21
    11b0:	47 95       	ror	r20
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_u8GetPinValue+0x9c>
    11b6:	ca 01       	movw	r24, r20
    11b8:	58 2f       	mov	r21, r24
    11ba:	51 70       	andi	r21, 0x01	; 1
    11bc:	5b 83       	std	Y+3, r21	; 0x03
    11be:	27 c0       	rjmp	.+78     	; 0x120e <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    11c0:	e3 e3       	ldi	r30, 0x33	; 51
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8GetPinValue+0xc6>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8GetPinValue+0xc2>
    11dc:	ca 01       	movw	r24, r20
    11de:	58 2f       	mov	r21, r24
    11e0:	51 70       	andi	r21, 0x01	; 1
    11e2:	5b 83       	std	Y+3, r21	; 0x03
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    11e6:	e0 e3       	ldi	r30, 0x30	; 48
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a9 01       	movw	r20, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_u8GetPinValue+0xec>
    11fa:	55 95       	asr	r21
    11fc:	47 95       	ror	r20
    11fe:	8a 95       	dec	r24
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_u8GetPinValue+0xe8>
    1202:	ca 01       	movw	r24, r20
    1204:	58 2f       	mov	r21, r24
    1206:	51 70       	andi	r21, 0x01	; 1
    1208:	5b 83       	std	Y+3, r21	; 0x03
    120a:	01 c0       	rjmp	.+2      	; 0x120e <DIO_u8GetPinValue+0xfc>
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	8e 83       	std	Y+6, r24	; 0x06
    1212:	8e 81       	ldd	r24, Y+6	; 0x06
    1214:	26 96       	adiw	r28, 0x06	; 6
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <DIO_vdTogPortValue+0x6>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	08 f0       	brcs	.+2      	; 0x123c <DIO_vdTogPortValue+0x16>
    123a:	3e c0       	rjmp	.+124    	; 0x12b8 <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3b 83       	std	Y+3, r19	; 0x03
    1244:	2a 83       	std	Y+2, r18	; 0x02
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	e9 f0       	breq	.+58     	; 0x128a <DIO_vdTogPortValue+0x64>
    1250:	2a 81       	ldd	r18, Y+2	; 0x02
    1252:	3b 81       	ldd	r19, Y+3	; 0x03
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_vdTogPortValue+0x3e>
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	61 f0       	breq	.+24     	; 0x127a <DIO_vdTogPortValue+0x54>
    1262:	2a c0       	rjmp	.+84     	; 0x12b8 <DIO_vdTogPortValue+0x92>
    1264:	2a 81       	ldd	r18, Y+2	; 0x02
    1266:	3b 81       	ldd	r19, Y+3	; 0x03
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	b1 f0       	breq	.+44     	; 0x129a <DIO_vdTogPortValue+0x74>
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	c9 f0       	breq	.+50     	; 0x12aa <DIO_vdTogPortValue+0x84>
    1278:	1f c0       	rjmp	.+62     	; 0x12b8 <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 95       	com	r24
    1286:	8c 93       	st	X, r24
    1288:	17 c0       	rjmp	.+46     	; 0x12b8 <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    128a:	a8 e3       	ldi	r26, 0x38	; 56
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e8 e3       	ldi	r30, 0x38	; 56
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 95       	com	r24
    1296:	8c 93       	st	X, r24
    1298:	0f c0       	rjmp	.+30     	; 0x12b8 <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    129a:	a5 e3       	ldi	r26, 0x35	; 53
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e5 e3       	ldi	r30, 0x35	; 53
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 95       	com	r24
    12a6:	8c 93       	st	X, r24
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 95       	com	r24
    12b6:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_vdTogPinValue+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_vdTogPinValue+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <DIO_vdTogPinValue+0x18>
    12da:	6e c0       	rjmp	.+220    	; 0x13b8 <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 83       	std	Y+4, r19	; 0x04
    12e4:	2b 83       	std	Y+3, r18	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	49 f1       	breq	.+82     	; 0x1342 <DIO_vdTogPinValue+0x7e>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	2c f4       	brge	.+10     	; 0x1304 <DIO_vdTogPinValue+0x40>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	61 f0       	breq	.+24     	; 0x131a <DIO_vdTogPinValue+0x56>
    1302:	5a c0       	rjmp	.+180    	; 0x13b8 <DIO_vdTogPinValue+0xf4>
    1304:	2b 81       	ldd	r18, Y+3	; 0x03
    1306:	3c 81       	ldd	r19, Y+4	; 0x04
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	71 f1       	breq	.+92     	; 0x136a <DIO_vdTogPinValue+0xa6>
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	91 05       	cpc	r25, r1
    1316:	e9 f1       	breq	.+122    	; 0x1392 <DIO_vdTogPinValue+0xce>
    1318:	4f c0       	rjmp	.+158    	; 0x13b8 <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    131a:	ab e3       	ldi	r26, 0x3B	; 59
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	eb e3       	ldi	r30, 0x3B	; 59
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <DIO_vdTogPinValue+0x74>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <DIO_vdTogPinValue+0x70>
    133c:	84 27       	eor	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	3b c0       	rjmp	.+118    	; 0x13b8 <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <DIO_vdTogPinValue+0x9c>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <DIO_vdTogPinValue+0x98>
    1364:	84 27       	eor	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	27 c0       	rjmp	.+78     	; 0x13b8 <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    136a:	a5 e3       	ldi	r26, 0x35	; 53
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e3       	ldi	r30, 0x35	; 53
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_vdTogPinValue+0xc4>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_vdTogPinValue+0xc0>
    138c:	84 27       	eor	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	13 c0       	rjmp	.+38     	; 0x13b8 <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    1392:	a2 e3       	ldi	r26, 0x32	; 50
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e2 e3       	ldi	r30, 0x32	; 50
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_vdTogPinValue+0xec>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_vdTogPinValue+0xe8>
    13b4:	84 27       	eor	r24, r20
    13b6:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <Keypad_vdInitialization>:
		{'7','8','9','*'},
		{'0','=','/','%'}
};

void Keypad_vdInitialization (void)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPortDirection(KEYPAD_U8_PORT, COLS_ROWS_DIRECTION);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	6f e0       	ldi	r22, 0x0F	; 15
    13d2:	0e 94 bb 05 	call	0xb76	; 0xb76 <DIO_vdSetPortDirection>
	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	6f ef       	ldi	r22, 0xFF	; 255
    13da:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_vdSetPortValue>
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <Keypad_vdGetPressedKey>:

void Keypad_vdGetPressedKey (u8 *LOC_pu8ReturnedData)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	63 97       	sbiw	r28, 0x13	; 19
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	9b 8b       	std	Y+19, r25	; 0x13
    13fa:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_u8RowsCounter , LOC_u8ColoumsCounter , LOC_u8StatusButton;

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	6f ef       	ldi	r22, 0xFF	; 255
    1400:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_vdSetPortValue>

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    1404:	19 8a       	std	Y+17, r1	; 0x11
    1406:	bd c0       	rjmp	.+378    	; 0x1582 <Keypad_vdGetPressedKey+0x19e>
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	69 89       	ldd	r22, Y+17	; 0x11
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    1412:	18 8a       	std	Y+16, r1	; 0x10
    1414:	aa c0       	rjmp	.+340    	; 0x156a <Keypad_vdGetPressedKey+0x186>
		{
			LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1416:	88 89       	ldd	r24, Y+16	; 0x10
    1418:	98 2f       	mov	r25, r24
    141a:	9c 5f       	subi	r25, 0xFC	; 252
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	69 2f       	mov	r22, r25
    1420:	0e 94 89 08 	call	0x1112	; 0x1112 <DIO_u8GetPinValue>
    1424:	8f 87       	std	Y+15, r24	; 0x0f

			if(LOC_u8StatusButton == PIN_LOW)
    1426:	8f 85       	ldd	r24, Y+15	; 0x0f
    1428:	88 23       	and	r24, r24
    142a:	09 f0       	breq	.+2      	; 0x142e <Keypad_vdGetPressedKey+0x4a>
    142c:	9b c0       	rjmp	.+310    	; 0x1564 <Keypad_vdGetPressedKey+0x180>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 ea       	ldi	r26, 0xA0	; 160
    1434:	b1 e4       	ldi	r27, 0x41	; 65
    1436:	8b 87       	std	Y+11, r24	; 0x0b
    1438:	9c 87       	std	Y+12, r25	; 0x0c
    143a:	ad 87       	std	Y+13, r26	; 0x0d
    143c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1440:	7c 85       	ldd	r23, Y+12	; 0x0c
    1442:	8d 85       	ldd	r24, Y+13	; 0x0d
    1444:	9e 85       	ldd	r25, Y+14	; 0x0e
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4a ef       	ldi	r20, 0xFA	; 250
    144c:	54 e4       	ldi	r21, 0x44	; 68
    144e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	8f 83       	std	Y+7, r24	; 0x07
    1458:	98 87       	std	Y+8, r25	; 0x08
    145a:	a9 87       	std	Y+9, r26	; 0x09
    145c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145e:	6f 81       	ldd	r22, Y+7	; 0x07
    1460:	78 85       	ldd	r23, Y+8	; 0x08
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	5f e3       	ldi	r21, 0x3F	; 63
    146e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1472:	88 23       	and	r24, r24
    1474:	2c f4       	brge	.+10     	; 0x1480 <Keypad_vdGetPressedKey+0x9c>
		__ticks = 1;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9e 83       	std	Y+6, r25	; 0x06
    147c:	8d 83       	std	Y+5, r24	; 0x05
    147e:	3f c0       	rjmp	.+126    	; 0x14fe <Keypad_vdGetPressedKey+0x11a>
	else if (__tmp > 65535)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	3f ef       	ldi	r19, 0xFF	; 255
    148c:	4f e7       	ldi	r20, 0x7F	; 127
    148e:	57 e4       	ldi	r21, 0x47	; 71
    1490:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1494:	18 16       	cp	r1, r24
    1496:	4c f5       	brge	.+82     	; 0x14ea <Keypad_vdGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1498:	6b 85       	ldd	r22, Y+11	; 0x0b
    149a:	7c 85       	ldd	r23, Y+12	; 0x0c
    149c:	8d 85       	ldd	r24, Y+13	; 0x0d
    149e:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	0f c0       	rjmp	.+30     	; 0x14e0 <Keypad_vdGetPressedKey+0xfc>
    14c2:	88 ec       	ldi	r24, 0xC8	; 200
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <Keypad_vdGetPressedKey+0xea>
    14d2:	9c 83       	std	Y+4, r25	; 0x04
    14d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	01 97       	sbiw	r24, 0x01	; 1
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e0:	8d 81       	ldd	r24, Y+5	; 0x05
    14e2:	9e 81       	ldd	r25, Y+6	; 0x06
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	69 f7       	brne	.-38     	; 0x14c2 <Keypad_vdGetPressedKey+0xde>
    14e8:	14 c0       	rjmp	.+40     	; 0x1512 <Keypad_vdGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1500:	9e 81       	ldd	r25, Y+6	; 0x06
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	9a 81       	ldd	r25, Y+2	; 0x02
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	f1 f7       	brne	.-4      	; 0x150a <Keypad_vdGetPressedKey+0x126>
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1512:	88 89       	ldd	r24, Y+16	; 0x10
    1514:	98 2f       	mov	r25, r24
    1516:	9c 5f       	subi	r25, 0xFC	; 252
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	69 2f       	mov	r22, r25
    151c:	0e 94 89 08 	call	0x1112	; 0x1112 <DIO_u8GetPinValue>
    1520:	8f 87       	std	Y+15, r24	; 0x0f
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <Keypad_vdGetPressedKey+0x150>

				while (LOC_u8StatusButton == PIN_LOW)
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1524:	88 89       	ldd	r24, Y+16	; 0x10
    1526:	98 2f       	mov	r25, r24
    1528:	9c 5f       	subi	r25, 0xFC	; 252
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	69 2f       	mov	r22, r25
    152e:	0e 94 89 08 	call	0x1112	; 0x1112 <DIO_u8GetPinValue>
    1532:	8f 87       	std	Y+15, r24	; 0x0f
			if(LOC_u8StatusButton == PIN_LOW)
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);

				while (LOC_u8StatusButton == PIN_LOW)
    1534:	8f 85       	ldd	r24, Y+15	; 0x0f
    1536:	88 23       	and	r24, r24
    1538:	a9 f3       	breq	.-22     	; 0x1524 <Keypad_vdGetPressedKey+0x140>
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
				}

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
    153a:	89 89       	ldd	r24, Y+17	; 0x11
    153c:	48 2f       	mov	r20, r24
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	88 89       	ldd	r24, Y+16	; 0x10
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	ca 01       	movw	r24, r20
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	82 0f       	add	r24, r18
    1552:	93 1f       	adc	r25, r19
    1554:	fc 01       	movw	r30, r24
    1556:	e8 59       	subi	r30, 0x98	; 152
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	80 81       	ld	r24, Z
    155c:	ea 89       	ldd	r30, Y+18	; 0x12
    155e:	fb 89       	ldd	r31, Y+19	; 0x13
    1560:	80 83       	st	Z, r24
    1562:	13 c0       	rjmp	.+38     	; 0x158a <Keypad_vdGetPressedKey+0x1a6>

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    1564:	88 89       	ldd	r24, Y+16	; 0x10
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	88 8b       	std	Y+16, r24	; 0x10
    156a:	88 89       	ldd	r24, Y+16	; 0x10
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	08 f4       	brcc	.+2      	; 0x1572 <Keypad_vdGetPressedKey+0x18e>
    1570:	52 cf       	rjmp	.-348    	; 0x1416 <Keypad_vdGetPressedKey+0x32>

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	69 89       	ldd	r22, Y+17	; 0x11
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	89 8b       	std	Y+17, r24	; 0x11
    1582:	89 89       	ldd	r24, Y+17	; 0x11
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	08 f4       	brcc	.+2      	; 0x158a <Keypad_vdGetPressedKey+0x1a6>
    1588:	3f cf       	rjmp	.-386    	; 0x1408 <Keypad_vdGetPressedKey+0x24>
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
	}
}
    158a:	63 96       	adiw	r28, 0x13	; 19
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	6d 97       	sbiw	r28, 0x1d	; 29
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15ca:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	62 e0       	ldi	r22, 0x02	; 2
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a0 e8       	ldi	r26, 0x80	; 128
    15de:	bf e3       	ldi	r27, 0x3F	; 63
    15e0:	89 8f       	std	Y+25, r24	; 0x19
    15e2:	9a 8f       	std	Y+26, r25	; 0x1a
    15e4:	ab 8f       	std	Y+27, r26	; 0x1b
    15e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a ef       	ldi	r20, 0xFA	; 250
    15f6:	54 e4       	ldi	r21, 0x44	; 68
    15f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	8d 8b       	std	Y+21, r24	; 0x15
    1602:	9e 8b       	std	Y+22, r25	; 0x16
    1604:	af 8b       	std	Y+23, r26	; 0x17
    1606:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1608:	6d 89       	ldd	r22, Y+21	; 0x15
    160a:	7e 89       	ldd	r23, Y+22	; 0x16
    160c:	8f 89       	ldd	r24, Y+23	; 0x17
    160e:	98 8d       	ldd	r25, Y+24	; 0x18
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 8b       	std	Y+20, r25	; 0x14
    1626:	8b 8b       	std	Y+19, r24	; 0x13
    1628:	3f c0       	rjmp	.+126    	; 0x16a8 <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    162a:	6d 89       	ldd	r22, Y+21	; 0x15
    162c:	7e 89       	ldd	r23, Y+22	; 0x16
    162e:	8f 89       	ldd	r24, Y+23	; 0x17
    1630:	98 8d       	ldd	r25, Y+24	; 0x18
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    163e:	18 16       	cp	r1, r24
    1640:	4c f5       	brge	.+82     	; 0x1694 <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	69 8d       	ldd	r22, Y+25	; 0x19
    1644:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1646:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1648:	9c 8d       	ldd	r25, Y+28	; 0x1c
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	0f c0       	rjmp	.+30     	; 0x168a <LCD_vdSendCmd+0xee>
    166c:	88 ec       	ldi	r24, 0xC8	; 200
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9a 8b       	std	Y+18, r25	; 0x12
    1672:	89 8b       	std	Y+17, r24	; 0x11
    1674:	89 89       	ldd	r24, Y+17	; 0x11
    1676:	9a 89       	ldd	r25, Y+18	; 0x12
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_vdSendCmd+0xdc>
    167c:	9a 8b       	std	Y+18, r25	; 0x12
    167e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	8b 89       	ldd	r24, Y+19	; 0x13
    1682:	9c 89       	ldd	r25, Y+20	; 0x14
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	9c 8b       	std	Y+20, r25	; 0x14
    1688:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	8b 89       	ldd	r24, Y+19	; 0x13
    168c:	9c 89       	ldd	r25, Y+20	; 0x14
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f7       	brne	.-38     	; 0x166c <LCD_vdSendCmd+0xd0>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1694:	6d 89       	ldd	r22, Y+21	; 0x15
    1696:	7e 89       	ldd	r23, Y+22	; 0x16
    1698:	8f 89       	ldd	r24, Y+23	; 0x17
    169a:	98 8d       	ldd	r25, Y+24	; 0x18
    169c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
    16a8:	8b 89       	ldd	r24, Y+19	; 0x13
    16aa:	9c 89       	ldd	r25, Y+20	; 0x14
    16ac:	98 8b       	std	Y+16, r25	; 0x10
    16ae:	8f 87       	std	Y+15, r24	; 0x0f
    16b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16b2:	98 89       	ldd	r25, Y+16	; 0x10
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <LCD_vdSendCmd+0x118>
    16b8:	98 8b       	std	Y+16, r25	; 0x10
    16ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	62 e0       	ldi	r22, 0x02	; 2
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	a0 e8       	ldi	r26, 0x80	; 128
    16cc:	bf e3       	ldi	r27, 0x3F	; 63
    16ce:	8b 87       	std	Y+11, r24	; 0x0b
    16d0:	9c 87       	std	Y+12, r25	; 0x0c
    16d2:	ad 87       	std	Y+13, r26	; 0x0d
    16d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16da:	8d 85       	ldd	r24, Y+13	; 0x0d
    16dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a ef       	ldi	r20, 0xFA	; 250
    16e4:	54 e4       	ldi	r21, 0x44	; 68
    16e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	8f 83       	std	Y+7, r24	; 0x07
    16f0:	98 87       	std	Y+8, r25	; 0x08
    16f2:	a9 87       	std	Y+9, r26	; 0x09
    16f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	2c f4       	brge	.+10     	; 0x1718 <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	3f c0       	rjmp	.+126    	; 0x1796 <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	4c f5       	brge	.+82     	; 0x1782 <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1730:	6b 85       	ldd	r22, Y+11	; 0x0b
    1732:	7c 85       	ldd	r23, Y+12	; 0x0c
    1734:	8d 85       	ldd	r24, Y+13	; 0x0d
    1736:	9e 85       	ldd	r25, Y+14	; 0x0e
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e2       	ldi	r20, 0x20	; 32
    173e:	51 e4       	ldi	r21, 0x41	; 65
    1740:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <LCD_vdSendCmd+0x1dc>
    175a:	88 ec       	ldi	r24, 0xC8	; 200
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_vdSendCmd+0x1ca>
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	69 f7       	brne	.-38     	; 0x175a <LCD_vdSendCmd+0x1be>
    1780:	14 c0       	rjmp	.+40     	; 0x17aa <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	78 85       	ldd	r23, Y+8	; 0x08
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_vdSendCmd+0x206>
    17a6:	9a 83       	std	Y+2, r25	; 0x02
    17a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    17aa:	6d 96       	adiw	r28, 0x1d	; 29
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	6d 97       	sbiw	r28, 0x1d	; 29
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    17ea:	0e 94 ff 05 	call	0xbfe	; 0xbfe <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e8       	ldi	r26, 0x80	; 128
    17fe:	bf e3       	ldi	r27, 0x3F	; 63
    1800:	89 8f       	std	Y+25, r24	; 0x19
    1802:	9a 8f       	std	Y+26, r25	; 0x1a
    1804:	ab 8f       	std	Y+27, r26	; 0x1b
    1806:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a ef       	ldi	r20, 0xFA	; 250
    1816:	54 e4       	ldi	r21, 0x44	; 68
    1818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8d 8b       	std	Y+21, r24	; 0x15
    1822:	9e 8b       	std	Y+22, r25	; 0x16
    1824:	af 8b       	std	Y+23, r26	; 0x17
    1826:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LCD_vdSendChar+0x8e>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	8b 8b       	std	Y+19, r24	; 0x13
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	69 8d       	ldd	r22, Y+25	; 0x19
    1864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_vdSendChar+0xee>
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9a 8b       	std	Y+18, r25	; 0x12
    1892:	89 8b       	std	Y+17, r24	; 0x11
    1894:	89 89       	ldd	r24, Y+17	; 0x11
    1896:	9a 89       	ldd	r25, Y+18	; 0x12
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_vdSendChar+0xdc>
    189c:	9a 8b       	std	Y+18, r25	; 0x12
    189e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8b 89       	ldd	r24, Y+19	; 0x13
    18a2:	9c 89       	ldd	r25, Y+20	; 0x14
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_vdSendChar+0xd0>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6d 89       	ldd	r22, Y+21	; 0x15
    18b6:	7e 89       	ldd	r23, Y+22	; 0x16
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9c 8b       	std	Y+20, r25	; 0x14
    18c6:	8b 8b       	std	Y+19, r24	; 0x13
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	98 8b       	std	Y+16, r25	; 0x10
    18ce:	8f 87       	std	Y+15, r24	; 0x0f
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	98 89       	ldd	r25, Y+16	; 0x10
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_vdSendChar+0x118>
    18d8:	98 8b       	std	Y+16, r25	; 0x10
    18da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    18dc:	83 e0       	ldi	r24, 0x03	; 3
    18de:	62 e0       	ldi	r22, 0x02	; 2
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 81 07 	call	0xf02	; 0xf02 <DIO_vdSetPinValue>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e8       	ldi	r26, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	8b 87       	std	Y+11, r24	; 0x0b
    18f0:	9c 87       	std	Y+12, r25	; 0x0c
    18f2:	ad 87       	std	Y+13, r26	; 0x0d
    18f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a ef       	ldi	r20, 0xFA	; 250
    1904:	54 e4       	ldi	r21, 0x44	; 68
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8f 83       	std	Y+7, r24	; 0x07
    1910:	98 87       	std	Y+8, r25	; 0x08
    1912:	a9 87       	std	Y+9, r26	; 0x09
    1914:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_vdSendChar+0x17c>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_vdSendChar+0x1dc>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_vdSendChar+0x1ca>
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_vdSendChar+0x1be>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_vdSendChar+0x206>
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    19ca:	6d 96       	adiw	r28, 0x1d	; 29
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <LCD_vdInitialization>:

void LCD_vdInitialization(void)
{
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	c6 54       	subi	r28, 0x46	; 70
    19ea:	d0 40       	sbci	r29, 0x00	; 0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	fe 01       	movw	r30, r28
    19f8:	ed 5b       	subi	r30, 0xBD	; 189
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a8 e4       	ldi	r26, 0x48	; 72
    1a02:	b2 e4       	ldi	r27, 0x42	; 66
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	01 5c       	subi	r16, 0xC1	; 193
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 5b       	subi	r30, 0xBD	; 189
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	f8 01       	movw	r30, r16
    1a32:	80 83       	st	Z, r24
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	a2 83       	std	Z+2, r26	; 0x02
    1a38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ff 96       	adiw	r30, 0x3f	; 63
    1a3e:	60 81       	ld	r22, Z
    1a40:	71 81       	ldd	r23, Z+1	; 0x01
    1a42:	82 81       	ldd	r24, Z+2	; 0x02
    1a44:	93 81       	ldd	r25, Z+3	; 0x03
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_vdInitialization+0x84>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e af       	std	Y+62, r25	; 0x3e
    1a5c:	8d af       	std	Y+61, r24	; 0x3d
    1a5e:	46 c0       	rjmp	.+140    	; 0x1aec <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    1a60:	fe 01       	movw	r30, r28
    1a62:	ff 96       	adiw	r30, 0x3f	; 63
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	64 f5       	brge	.+88     	; 0x1ad4 <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ed 5b       	subi	r30, 0xBD	; 189
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	60 81       	ld	r22, Z
    1a84:	71 81       	ldd	r23, Z+1	; 0x01
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9e af       	std	Y+62, r25	; 0x3e
    1aa8:	8d af       	std	Y+61, r24	; 0x3d
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <LCD_vdInitialization+0xee>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c af       	std	Y+60, r25	; 0x3c
    1ab2:	8b af       	std	Y+59, r24	; 0x3b
    1ab4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ab6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_vdInitialization+0xdc>
    1abc:	9c af       	std	Y+60, r25	; 0x3c
    1abe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ac2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9e af       	std	Y+62, r25	; 0x3e
    1ac8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	8d ad       	ldd	r24, Y+61	; 0x3d
    1acc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <LCD_vdInitialization+0xd0>
    1ad2:	16 c0       	rjmp	.+44     	; 0x1b00 <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ff 96       	adiw	r30, 0x3f	; 63
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e af       	std	Y+62, r25	; 0x3e
    1aea:	8d af       	std	Y+61, r24	; 0x3d
    1aec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1af0:	9a af       	std	Y+58, r25	; 0x3a
    1af2:	89 af       	std	Y+57, r24	; 0x39
    1af4:	89 ad       	ldd	r24, Y+57	; 0x39
    1af6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_vdInitialization+0x11c>
    1afc:	9a af       	std	Y+58, r25	; 0x3a
    1afe:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    1b00:	88 e3       	ldi	r24, 0x38	; 56
    1b02:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a0 e2       	ldi	r26, 0x20	; 32
    1b0c:	b1 e4       	ldi	r27, 0x41	; 65
    1b0e:	8d ab       	std	Y+53, r24	; 0x35
    1b10:	9e ab       	std	Y+54, r25	; 0x36
    1b12:	af ab       	std	Y+55, r26	; 0x37
    1b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6d a9       	ldd	r22, Y+53	; 0x35
    1b18:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	89 ab       	std	Y+49, r24	; 0x31
    1b30:	9a ab       	std	Y+50, r25	; 0x32
    1b32:	ab ab       	std	Y+51, r26	; 0x33
    1b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b36:	69 a9       	ldd	r22, Y+49	; 0x31
    1b38:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_vdInitialization+0x17c>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	98 ab       	std	Y+48, r25	; 0x30
    1b54:	8f a7       	std	Y+47, r24	; 0x2f
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    1b58:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6d a9       	ldd	r22, Y+53	; 0x35
    1b72:	7e a9       	ldd	r23, Y+54	; 0x36
    1b74:	8f a9       	ldd	r24, Y+55	; 0x37
    1b76:	98 ad       	ldd	r25, Y+56	; 0x38
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	98 ab       	std	Y+48, r25	; 0x30
    1b96:	8f a7       	std	Y+47, r24	; 0x2f
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LCD_vdInitialization+0x1dc>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e a7       	std	Y+46, r25	; 0x2e
    1ba0:	8d a7       	std	Y+45, r24	; 0x2d
    1ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_vdInitialization+0x1ca>
    1baa:	9e a7       	std	Y+46, r25	; 0x2e
    1bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LCD_vdInitialization+0x1be>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	98 ab       	std	Y+48, r25	; 0x30
    1bd4:	8f a7       	std	Y+47, r24	; 0x2f
    1bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bda:	9c a7       	std	Y+44, r25	; 0x2c
    1bdc:	8b a7       	std	Y+43, r24	; 0x2b
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_vdInitialization+0x206>
    1be6:	9c a7       	std	Y+44, r25	; 0x2c
    1be8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    1bea:	8f e0       	ldi	r24, 0x0F	; 15
    1bec:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e2       	ldi	r26, 0x20	; 32
    1bf6:	b1 e4       	ldi	r27, 0x41	; 65
    1bf8:	8f a3       	std	Y+39, r24	; 0x27
    1bfa:	98 a7       	std	Y+40, r25	; 0x28
    1bfc:	a9 a7       	std	Y+41, r26	; 0x29
    1bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	6f a1       	ldd	r22, Y+39	; 0x27
    1c02:	78 a5       	ldd	r23, Y+40	; 0x28
    1c04:	89 a5       	ldd	r24, Y+41	; 0x29
    1c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8b a3       	std	Y+35, r24	; 0x23
    1c1a:	9c a3       	std	Y+36, r25	; 0x24
    1c1c:	ad a3       	std	Y+37, r26	; 0x25
    1c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c20:	6b a1       	ldd	r22, Y+35	; 0x23
    1c22:	7c a1       	ldd	r23, Y+36	; 0x24
    1c24:	8d a1       	ldd	r24, Y+37	; 0x25
    1c26:	9e a1       	ldd	r25, Y+38	; 0x26
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_vdInitialization+0x266>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9a a3       	std	Y+34, r25	; 0x22
    1c3e:	89 a3       	std	Y+33, r24	; 0x21
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    1c42:	6b a1       	ldd	r22, Y+35	; 0x23
    1c44:	7c a1       	ldd	r23, Y+36	; 0x24
    1c46:	8d a1       	ldd	r24, Y+37	; 0x25
    1c48:	9e a1       	ldd	r25, Y+38	; 0x26
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9a a3       	std	Y+34, r25	; 0x22
    1c80:	89 a3       	std	Y+33, r24	; 0x21
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_vdInitialization+0x2c6>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	98 a3       	std	Y+32, r25	; 0x20
    1c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_vdInitialization+0x2b4>
    1c94:	98 a3       	std	Y+32, r25	; 0x20
    1c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9a a3       	std	Y+34, r25	; 0x22
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_vdInitialization+0x2a8>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9a a3       	std	Y+34, r25	; 0x22
    1cbe:	89 a3       	std	Y+33, r24	; 0x21
    1cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_vdInitialization+0x2f0>
    1cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a0 e2       	ldi	r26, 0x20	; 32
    1ce0:	b1 e4       	ldi	r27, 0x41	; 65
    1ce2:	89 8f       	std	Y+25, r24	; 0x19
    1ce4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	69 8d       	ldd	r22, Y+25	; 0x19
    1cec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8d 8b       	std	Y+21, r24	; 0x15
    1d04:	9e 8b       	std	Y+22, r25	; 0x16
    1d06:	af 8b       	std	Y+23, r26	; 0x17
    1d08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d10:	98 8d       	ldd	r25, Y+24	; 0x18
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_vdInitialization+0x350>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 8b       	std	Y+20, r25	; 0x14
    1d28:	8b 8b       	std	Y+19, r24	; 0x13
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    1d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d30:	8f 89       	ldd	r24, Y+23	; 0x17
    1d32:	98 8d       	ldd	r25, Y+24	; 0x18
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	69 8d       	ldd	r22, Y+25	; 0x19
    1d46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9c 8b       	std	Y+20, r25	; 0x14
    1d6a:	8b 8b       	std	Y+19, r24	; 0x13
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_vdInitialization+0x3b0>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9a 8b       	std	Y+18, r25	; 0x12
    1d74:	89 8b       	std	Y+17, r24	; 0x11
    1d76:	89 89       	ldd	r24, Y+17	; 0x11
    1d78:	9a 89       	ldd	r25, Y+18	; 0x12
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_vdInitialization+0x39e>
    1d7e:	9a 8b       	std	Y+18, r25	; 0x12
    1d80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8b 89       	ldd	r24, Y+19	; 0x13
    1d84:	9c 89       	ldd	r25, Y+20	; 0x14
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9c 8b       	std	Y+20, r25	; 0x14
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_vdInitialization+0x392>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	9c 89       	ldd	r25, Y+20	; 0x14
    1dae:	98 8b       	std	Y+16, r25	; 0x10
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
    1db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db4:	98 89       	ldd	r25, Y+16	; 0x10
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_vdInitialization+0x3da>
    1dba:	98 8b       	std	Y+16, r25	; 0x10
    1dbc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    1dbe:	86 e0       	ldi	r24, 0x06	; 6
    1dc0:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e2       	ldi	r26, 0x20	; 32
    1dca:	b1 e4       	ldi	r27, 0x41	; 65
    1dcc:	8b 87       	std	Y+11, r24	; 0x0b
    1dce:	9c 87       	std	Y+12, r25	; 0x0c
    1dd0:	ad 87       	std	Y+13, r26	; 0x0d
    1dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8f 83       	std	Y+7, r24	; 0x07
    1dee:	98 87       	std	Y+8, r25	; 0x08
    1df0:	a9 87       	std	Y+9, r26	; 0x09
    1df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <LCD_vdInitialization+0x43a>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_vdInitialization+0x49a>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_vdInitialization+0x488>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_vdInitialization+0x47c>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_vdInitialization+0x4c4>
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1ea8:	ca 5b       	subi	r28, 0xBA	; 186
    1eaa:	df 4f       	sbci	r29, 0xFF	; 255
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <LCD_vdWriteString>:

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <LCD_vdWriteString+0x6>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    1ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed4:	80 81       	ld	r24, Z
    1ed6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_vdSendChar>
		LOC_u8Ptr++;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	01 96       	adiw	r24, 0x01	; 1
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	89 f7       	brne	.-30     	; 0x1ed0 <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <LCD_vdStringPostion+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <LCD_vdStringPostion+0x8>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
    1f08:	5c 83       	std	Y+4, r21	; 0x04
    1f0a:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 23       	and	r24, r24
    1f10:	49 f4       	brne	.+18     	; 0x1f24 <LCD_vdStringPostion+0x2c>
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	80 31       	cpi	r24, 0x10	; 16
    1f16:	30 f4       	brcc	.+12     	; 0x1f24 <LCD_vdStringPostion+0x2c>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1f22:	0b c0       	rjmp	.+22     	; 0x1f3a <LCD_vdStringPostion+0x42>
	else if (row == 1 && pos<16)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <LCD_vdStringPostion+0x42>
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	80 31       	cpi	r24, 0x10	; 16
    1f2e:	28 f4       	brcc	.+10     	; 0x1f3a <LCD_vdStringPostion+0x42>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	8f 70       	andi	r24, 0x0F	; 15
    1f34:	80 6c       	ori	r24, 0xC0	; 192
    1f36:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <LCD_vdWriteString>
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_vdClear>:

void LCD_vdClear()
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
}
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <LCD_vdSendDataoCGRAM+0x6>
    1f6a:	0f 92       	push	r0
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	9b 83       	std	Y+3, r25	; 0x03
    1f72:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    1f74:	80 e4       	ldi	r24, 0x40	; 64
    1f76:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    1f7a:	19 82       	std	Y+1, r1	; 0x01
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    1f7e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f80:	fb 81       	ldd	r31, Y+3	; 0x03
    1f82:	80 81       	ld	r24, Z
    1f84:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_vdSendChar>
		ptr++;
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	9b 83       	std	Y+3, r25	; 0x03
    1f90:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	86 30       	cpi	r24, 0x06	; 6
    1f9c:	80 f3       	brcs	.-32     	; 0x1f7e <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <LCD_vdGotoDDRAM+0x6>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    1fb6:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	88 23       	and	r24, r24
    1fbc:	49 f4       	brne	.+18     	; 0x1fd0 <LCD_vdGotoDDRAM+0x26>
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 31       	cpi	r24, 0x10	; 16
    1fc2:	30 f4       	brcc	.+12     	; 0x1fd0 <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	8f 70       	andi	r24, 0x0F	; 15
    1fc8:	80 68       	ori	r24, 0x80	; 128
    1fca:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
    1fce:	0b c0       	rjmp	.+22     	; 0x1fe6 <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	41 f4       	brne	.+16     	; 0x1fe6 <LCD_vdGotoDDRAM+0x3c>
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	80 31       	cpi	r24, 0x10	; 16
    1fda:	28 f4       	brcc	.+10     	; 0x1fe6 <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	80 6c       	ori	r24, 0xC0	; 192
    1fe2:	0e 94 ce 0a 	call	0x159c	; 0x159c <LCD_vdSendCmd>
}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <LCD_vdWriteNum>:

void LCD_vdWriteNum(u32 num)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	29 97       	sbiw	r28, 0x09	; 9
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	6e 83       	std	Y+6, r22	; 0x06
    2006:	7f 83       	std	Y+7, r23	; 0x07
    2008:	88 87       	std	Y+8, r24	; 0x08
    200a:	99 87       	std	Y+9, r25	; 0x09
	u32 reverse=0;
    200c:	1a 82       	std	Y+2, r1	; 0x02
    200e:	1b 82       	std	Y+3, r1	; 0x03
    2010:	1c 82       	std	Y+4, r1	; 0x04
    2012:	1d 82       	std	Y+5, r1	; 0x05
    2014:	3c c0       	rjmp	.+120    	; 0x208e <LCD_vdWriteNum+0x9e>
	u8 reminder;
	while(num !=0)
	{
		reminder = num%10;
    2016:	8e 81       	ldd	r24, Y+6	; 0x06
    2018:	9f 81       	ldd	r25, Y+7	; 0x07
    201a:	a8 85       	ldd	r26, Y+8	; 0x08
    201c:	b9 85       	ldd	r27, Y+9	; 0x09
    201e:	2a e0       	ldi	r18, 0x0A	; 10
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodsi4>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	89 83       	std	Y+1, r24	; 0x01
		reverse = reverse*10+reminder;
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	ac 81       	ldd	r26, Y+4	; 0x04
    203a:	bd 81       	ldd	r27, Y+5	; 0x05
    203c:	2a e0       	ldi	r18, 0x0A	; 10
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 86 10 	call	0x210c	; 0x210c <__mulsi3>
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	88 2f       	mov	r24, r24
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e0       	ldi	r26, 0x00	; 0
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	82 0f       	add	r24, r18
    205c:	93 1f       	adc	r25, r19
    205e:	a4 1f       	adc	r26, r20
    2060:	b5 1f       	adc	r27, r21
    2062:	8a 83       	std	Y+2, r24	; 0x02
    2064:	9b 83       	std	Y+3, r25	; 0x03
    2066:	ac 83       	std	Y+4, r26	; 0x04
    2068:	bd 83       	std	Y+5, r27	; 0x05
		num/=10;
    206a:	8e 81       	ldd	r24, Y+6	; 0x06
    206c:	9f 81       	ldd	r25, Y+7	; 0x07
    206e:	a8 85       	ldd	r26, Y+8	; 0x08
    2070:	b9 85       	ldd	r27, Y+9	; 0x09
    2072:	2a e0       	ldi	r18, 0x0A	; 10
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	bc 01       	movw	r22, r24
    207c:	cd 01       	movw	r24, r26
    207e:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodsi4>
    2082:	da 01       	movw	r26, r20
    2084:	c9 01       	movw	r24, r18
    2086:	8e 83       	std	Y+6, r24	; 0x06
    2088:	9f 83       	std	Y+7, r25	; 0x07
    208a:	a8 87       	std	Y+8, r26	; 0x08
    208c:	b9 87       	std	Y+9, r27	; 0x09

void LCD_vdWriteNum(u32 num)
{
	u32 reverse=0;
	u8 reminder;
	while(num !=0)
    208e:	8e 81       	ldd	r24, Y+6	; 0x06
    2090:	9f 81       	ldd	r25, Y+7	; 0x07
    2092:	a8 85       	ldd	r26, Y+8	; 0x08
    2094:	b9 85       	ldd	r27, Y+9	; 0x09
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	a1 05       	cpc	r26, r1
    209a:	b1 05       	cpc	r27, r1
    209c:	09 f0       	breq	.+2      	; 0x20a0 <LCD_vdWriteNum+0xb0>
    209e:	bb cf       	rjmp	.-138    	; 0x2016 <LCD_vdWriteNum+0x26>
    20a0:	24 c0       	rjmp	.+72     	; 0x20ea <LCD_vdWriteNum+0xfa>
		reverse = reverse*10+reminder;
		num/=10;
	}
	while(num !=0)
	{
		reminder = num%10;
    20a2:	8e 81       	ldd	r24, Y+6	; 0x06
    20a4:	9f 81       	ldd	r25, Y+7	; 0x07
    20a6:	a8 85       	ldd	r26, Y+8	; 0x08
    20a8:	b9 85       	ldd	r27, Y+9	; 0x09
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodsi4>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	89 83       	std	Y+1, r24	; 0x01
		LCD_vdSendChar(reminder);
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_vdSendChar>
		num/=10;
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ca:	a8 85       	ldd	r26, Y+8	; 0x08
    20cc:	b9 85       	ldd	r27, Y+9	; 0x09
    20ce:	2a e0       	ldi	r18, 0x0A	; 10
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 a5 10 	call	0x214a	; 0x214a <__udivmodsi4>
    20de:	da 01       	movw	r26, r20
    20e0:	c9 01       	movw	r24, r18
    20e2:	8e 83       	std	Y+6, r24	; 0x06
    20e4:	9f 83       	std	Y+7, r25	; 0x07
    20e6:	a8 87       	std	Y+8, r26	; 0x08
    20e8:	b9 87       	std	Y+9, r27	; 0x09
	{
		reminder = num%10;
		reverse = reverse*10+reminder;
		num/=10;
	}
	while(num !=0)
    20ea:	8e 81       	ldd	r24, Y+6	; 0x06
    20ec:	9f 81       	ldd	r25, Y+7	; 0x07
    20ee:	a8 85       	ldd	r26, Y+8	; 0x08
    20f0:	b9 85       	ldd	r27, Y+9	; 0x09
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	a1 05       	cpc	r26, r1
    20f6:	b1 05       	cpc	r27, r1
    20f8:	a1 f6       	brne	.-88     	; 0x20a2 <LCD_vdWriteNum+0xb2>
		reminder = num%10;
		LCD_vdSendChar(reminder);
		num/=10;
	}

}
    20fa:	29 96       	adiw	r28, 0x09	; 9
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <__mulsi3>:
    210c:	62 9f       	mul	r22, r18
    210e:	d0 01       	movw	r26, r0
    2110:	73 9f       	mul	r23, r19
    2112:	f0 01       	movw	r30, r0
    2114:	82 9f       	mul	r24, r18
    2116:	e0 0d       	add	r30, r0
    2118:	f1 1d       	adc	r31, r1
    211a:	64 9f       	mul	r22, r20
    211c:	e0 0d       	add	r30, r0
    211e:	f1 1d       	adc	r31, r1
    2120:	92 9f       	mul	r25, r18
    2122:	f0 0d       	add	r31, r0
    2124:	83 9f       	mul	r24, r19
    2126:	f0 0d       	add	r31, r0
    2128:	74 9f       	mul	r23, r20
    212a:	f0 0d       	add	r31, r0
    212c:	65 9f       	mul	r22, r21
    212e:	f0 0d       	add	r31, r0
    2130:	99 27       	eor	r25, r25
    2132:	72 9f       	mul	r23, r18
    2134:	b0 0d       	add	r27, r0
    2136:	e1 1d       	adc	r30, r1
    2138:	f9 1f       	adc	r31, r25
    213a:	63 9f       	mul	r22, r19
    213c:	b0 0d       	add	r27, r0
    213e:	e1 1d       	adc	r30, r1
    2140:	f9 1f       	adc	r31, r25
    2142:	bd 01       	movw	r22, r26
    2144:	cf 01       	movw	r24, r30
    2146:	11 24       	eor	r1, r1
    2148:	08 95       	ret

0000214a <__udivmodsi4>:
    214a:	a1 e2       	ldi	r26, 0x21	; 33
    214c:	1a 2e       	mov	r1, r26
    214e:	aa 1b       	sub	r26, r26
    2150:	bb 1b       	sub	r27, r27
    2152:	fd 01       	movw	r30, r26
    2154:	0d c0       	rjmp	.+26     	; 0x2170 <__udivmodsi4_ep>

00002156 <__udivmodsi4_loop>:
    2156:	aa 1f       	adc	r26, r26
    2158:	bb 1f       	adc	r27, r27
    215a:	ee 1f       	adc	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	a2 17       	cp	r26, r18
    2160:	b3 07       	cpc	r27, r19
    2162:	e4 07       	cpc	r30, r20
    2164:	f5 07       	cpc	r31, r21
    2166:	20 f0       	brcs	.+8      	; 0x2170 <__udivmodsi4_ep>
    2168:	a2 1b       	sub	r26, r18
    216a:	b3 0b       	sbc	r27, r19
    216c:	e4 0b       	sbc	r30, r20
    216e:	f5 0b       	sbc	r31, r21

00002170 <__udivmodsi4_ep>:
    2170:	66 1f       	adc	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	88 1f       	adc	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	1a 94       	dec	r1
    217a:	69 f7       	brne	.-38     	; 0x2156 <__udivmodsi4_loop>
    217c:	60 95       	com	r22
    217e:	70 95       	com	r23
    2180:	80 95       	com	r24
    2182:	90 95       	com	r25
    2184:	9b 01       	movw	r18, r22
    2186:	ac 01       	movw	r20, r24
    2188:	bd 01       	movw	r22, r26
    218a:	cf 01       	movw	r24, r30
    218c:	08 95       	ret

0000218e <__prologue_saves__>:
    218e:	2f 92       	push	r2
    2190:	3f 92       	push	r3
    2192:	4f 92       	push	r4
    2194:	5f 92       	push	r5
    2196:	6f 92       	push	r6
    2198:	7f 92       	push	r7
    219a:	8f 92       	push	r8
    219c:	9f 92       	push	r9
    219e:	af 92       	push	r10
    21a0:	bf 92       	push	r11
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	ca 1b       	sub	r28, r26
    21b8:	db 0b       	sbc	r29, r27
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	09 94       	ijmp

000021c6 <__epilogue_restores__>:
    21c6:	2a 88       	ldd	r2, Y+18	; 0x12
    21c8:	39 88       	ldd	r3, Y+17	; 0x11
    21ca:	48 88       	ldd	r4, Y+16	; 0x10
    21cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d8:	b9 84       	ldd	r11, Y+9	; 0x09
    21da:	c8 84       	ldd	r12, Y+8	; 0x08
    21dc:	df 80       	ldd	r13, Y+7	; 0x07
    21de:	ee 80       	ldd	r14, Y+6	; 0x06
    21e0:	fd 80       	ldd	r15, Y+5	; 0x05
    21e2:	0c 81       	ldd	r16, Y+4	; 0x04
    21e4:	1b 81       	ldd	r17, Y+3	; 0x03
    21e6:	aa 81       	ldd	r26, Y+2	; 0x02
    21e8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ea:	ce 0f       	add	r28, r30
    21ec:	d1 1d       	adc	r29, r1
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	ed 01       	movw	r28, r26
    21fa:	08 95       	ret

000021fc <_exit>:
    21fc:	f8 94       	cli

000021fe <__stop_program>:
    21fe:	ff cf       	rjmp	.-2      	; 0x21fe <__stop_program>
