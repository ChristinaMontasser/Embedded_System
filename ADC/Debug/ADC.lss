
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000027bc  00002850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00002958  2**0
                  ALLOC
  3 .stab         00001b54  00000000  00000000  00002958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c08  00000000  00000000  000044ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000250d  00000000  00000000  00005483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001424  00000000  00000000  00007990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011a7  00000000  00000000  00008db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00009f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d1  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000926  00000000  00000000  0000a40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec eb       	ldi	r30, 0xBC	; 188
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 15 08 	call	0x102a	; 0x102a <main>
      8a:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 a9 03 	call	0x752	; 0x752 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 09 04 	call	0x812	; 0x812 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

00000692 <__nesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__nesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__nesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__nesf2+0x58>
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

000006f2 <__gtsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gtsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gtsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gtsf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

00000752 <__gesf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__gesf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__gesf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__gesf2+0x58>
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

000007b2 <__ltsf2>:
     7b2:	a8 e1       	ldi	r26, 0x18	; 24
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__prologue_saves__+0x18>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	2d 83       	std	Y+5, r18	; 0x05
     7c8:	3e 83       	std	Y+6, r19	; 0x06
     7ca:	4f 83       	std	Y+7, r20	; 0x07
     7cc:	58 87       	std	Y+8, r21	; 0x08
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	e8 2e       	mov	r14, r24
     7d2:	f1 2c       	mov	r15, r1
     7d4:	ec 0e       	add	r14, r28
     7d6:	fd 1e       	adc	r15, r29
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	b7 01       	movw	r22, r14
     7de:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7e2:	8e 01       	movw	r16, r28
     7e4:	0f 5e       	subi	r16, 0xEF	; 239
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	ce 01       	movw	r24, r28
     7ea:	05 96       	adiw	r24, 0x05	; 5
     7ec:	b8 01       	movw	r22, r16
     7ee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     7f2:	89 85       	ldd	r24, Y+9	; 0x09
     7f4:	82 30       	cpi	r24, 0x02	; 2
     7f6:	40 f0       	brcs	.+16     	; 0x808 <__ltsf2+0x56>
     7f8:	89 89       	ldd	r24, Y+17	; 0x11
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	28 f0       	brcs	.+10     	; 0x808 <__ltsf2+0x56>
     7fe:	c7 01       	movw	r24, r14
     800:	b8 01       	movw	r22, r16
     802:	0e 94 72 06 	call	0xce4	; 0xce4 <__fpcmp_parts_f>
     806:	01 c0       	rjmp	.+2      	; 0x80a <__ltsf2+0x58>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	68 96       	adiw	r28, 0x18	; 24
     80c:	e6 e0       	ldi	r30, 0x06	; 6
     80e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <__epilogue_restores__+0x18>

00000812 <__fixsfsi>:
     812:	ac e0       	ldi	r26, 0x0C	; 12
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__+0x20>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	be 01       	movw	r22, r28
     82c:	6b 5f       	subi	r22, 0xFB	; 251
     82e:	7f 4f       	sbci	r23, 0xFF	; 255
     830:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__unpack_f>
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	61 f1       	breq	.+88     	; 0x892 <__stack+0x33>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	50 f1       	brcs	.+84     	; 0x892 <__stack+0x33>
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	21 f4       	brne	.+8      	; 0x84a <__fixsfsi+0x38>
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	88 23       	and	r24, r24
     846:	51 f1       	breq	.+84     	; 0x89c <__stack+0x3d>
     848:	2e c0       	rjmp	.+92     	; 0x8a6 <__stack+0x47>
     84a:	2f 81       	ldd	r18, Y+7	; 0x07
     84c:	38 85       	ldd	r19, Y+8	; 0x08
     84e:	37 fd       	sbrc	r19, 7
     850:	20 c0       	rjmp	.+64     	; 0x892 <__stack+0x33>
     852:	6e 81       	ldd	r22, Y+6	; 0x06
     854:	2f 31       	cpi	r18, 0x1F	; 31
     856:	31 05       	cpc	r19, r1
     858:	1c f0       	brlt	.+6      	; 0x860 <__stack+0x1>
     85a:	66 23       	and	r22, r22
     85c:	f9 f0       	breq	.+62     	; 0x89c <__stack+0x3d>
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__stack+0x47>
     860:	8e e1       	ldi	r24, 0x1E	; 30
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	82 1b       	sub	r24, r18
     866:	93 0b       	sbc	r25, r19
     868:	29 85       	ldd	r18, Y+9	; 0x09
     86a:	3a 85       	ldd	r19, Y+10	; 0x0a
     86c:	4b 85       	ldd	r20, Y+11	; 0x0b
     86e:	5c 85       	ldd	r21, Y+12	; 0x0c
     870:	04 c0       	rjmp	.+8      	; 0x87a <__stack+0x1b>
     872:	56 95       	lsr	r21
     874:	47 95       	ror	r20
     876:	37 95       	ror	r19
     878:	27 95       	ror	r18
     87a:	8a 95       	dec	r24
     87c:	d2 f7       	brpl	.-12     	; 0x872 <__stack+0x13>
     87e:	66 23       	and	r22, r22
     880:	b1 f0       	breq	.+44     	; 0x8ae <__stack+0x4f>
     882:	50 95       	com	r21
     884:	40 95       	com	r20
     886:	30 95       	com	r19
     888:	21 95       	neg	r18
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	09 c0       	rjmp	.+18     	; 0x8ae <__stack+0x4f>
     89c:	2f ef       	ldi	r18, 0xFF	; 255
     89e:	3f ef       	ldi	r19, 0xFF	; 255
     8a0:	4f ef       	ldi	r20, 0xFF	; 255
     8a2:	5f e7       	ldi	r21, 0x7F	; 127
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__stack+0x4f>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e8       	ldi	r21, 0x80	; 128
     8ae:	b9 01       	movw	r22, r18
     8b0:	ca 01       	movw	r24, r20
     8b2:	2c 96       	adiw	r28, 0x0c	; 12
     8b4:	e2 e0       	ldi	r30, 0x02	; 2
     8b6:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__+0x20>

000008ba <__floatunsisf>:
     8ba:	a8 e0       	ldi	r26, 0x08	; 8
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x10>
     8c6:	7b 01       	movw	r14, r22
     8c8:	8c 01       	movw	r16, r24
     8ca:	61 15       	cp	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	81 05       	cpc	r24, r1
     8d0:	91 05       	cpc	r25, r1
     8d2:	19 f4       	brne	.+6      	; 0x8da <__floatunsisf+0x20>
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	60 c0       	rjmp	.+192    	; 0x99a <__floatunsisf+0xe0>
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	8e e1       	ldi	r24, 0x1E	; 30
     8e0:	c8 2e       	mov	r12, r24
     8e2:	d1 2c       	mov	r13, r1
     8e4:	dc 82       	std	Y+4, r13	; 0x04
     8e6:	cb 82       	std	Y+3, r12	; 0x03
     8e8:	ed 82       	std	Y+5, r14	; 0x05
     8ea:	fe 82       	std	Y+6, r15	; 0x06
     8ec:	0f 83       	std	Y+7, r16	; 0x07
     8ee:	18 87       	std	Y+8, r17	; 0x08
     8f0:	c8 01       	movw	r24, r16
     8f2:	b7 01       	movw	r22, r14
     8f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__clzsi2>
     8f8:	fc 01       	movw	r30, r24
     8fa:	31 97       	sbiw	r30, 0x01	; 1
     8fc:	f7 ff       	sbrs	r31, 7
     8fe:	3b c0       	rjmp	.+118    	; 0x976 <__floatunsisf+0xbc>
     900:	22 27       	eor	r18, r18
     902:	33 27       	eor	r19, r19
     904:	2e 1b       	sub	r18, r30
     906:	3f 0b       	sbc	r19, r31
     908:	57 01       	movw	r10, r14
     90a:	68 01       	movw	r12, r16
     90c:	02 2e       	mov	r0, r18
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__floatunsisf+0x5e>
     910:	d6 94       	lsr	r13
     912:	c7 94       	ror	r12
     914:	b7 94       	ror	r11
     916:	a7 94       	ror	r10
     918:	0a 94       	dec	r0
     91a:	d2 f7       	brpl	.-12     	; 0x910 <__floatunsisf+0x56>
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__floatunsisf+0x7c>
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d2 f7       	brpl	.-12     	; 0x92e <__floatunsisf+0x74>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	a1 09       	sbc	r26, r1
     93e:	b1 09       	sbc	r27, r1
     940:	8e 21       	and	r24, r14
     942:	9f 21       	and	r25, r15
     944:	a0 23       	and	r26, r16
     946:	b1 23       	and	r27, r17
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	a1 05       	cpc	r26, r1
     94c:	b1 05       	cpc	r27, r1
     94e:	21 f0       	breq	.+8      	; 0x958 <__floatunsisf+0x9e>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	4a 29       	or	r20, r10
     95a:	5b 29       	or	r21, r11
     95c:	6c 29       	or	r22, r12
     95e:	7d 29       	or	r23, r13
     960:	4d 83       	std	Y+5, r20	; 0x05
     962:	5e 83       	std	Y+6, r21	; 0x06
     964:	6f 83       	std	Y+7, r22	; 0x07
     966:	78 87       	std	Y+8, r23	; 0x08
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8e 1b       	sub	r24, r30
     96e:	9f 0b       	sbc	r25, r31
     970:	9c 83       	std	Y+4, r25	; 0x04
     972:	8b 83       	std	Y+3, r24	; 0x03
     974:	12 c0       	rjmp	.+36     	; 0x99a <__floatunsisf+0xe0>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	81 f0       	breq	.+32     	; 0x99a <__floatunsisf+0xe0>
     97a:	0e 2e       	mov	r0, r30
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__floatunsisf+0xcc>
     97e:	ee 0c       	add	r14, r14
     980:	ff 1c       	adc	r15, r15
     982:	00 1f       	adc	r16, r16
     984:	11 1f       	adc	r17, r17
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__floatunsisf+0xc4>
     98a:	ed 82       	std	Y+5, r14	; 0x05
     98c:	fe 82       	std	Y+6, r15	; 0x06
     98e:	0f 83       	std	Y+7, r16	; 0x07
     990:	18 87       	std	Y+8, r17	; 0x08
     992:	ce 1a       	sub	r12, r30
     994:	df 0a       	sbc	r13, r31
     996:	dc 82       	std	Y+4, r13	; 0x04
     998:	cb 82       	std	Y+3, r12	; 0x03
     99a:	1a 82       	std	Y+2, r1	; 0x02
     99c:	ce 01       	movw	r24, r28
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	0e 94 25 05 	call	0xa4a	; 0xa4a <__pack_f>
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	ea e0       	ldi	r30, 0x0A	; 10
     9a8:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x10>

000009ac <__clzsi2>:
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	7b 01       	movw	r14, r22
     9b6:	8c 01       	movw	r16, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	e8 16       	cp	r14, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	f8 06       	cpc	r15, r24
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 07       	cpc	r16, r24
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	18 07       	cpc	r17, r24
     9c8:	88 f4       	brcc	.+34     	; 0x9ec <__clzsi2+0x40>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	e8 16       	cp	r14, r24
     9ce:	f1 04       	cpc	r15, r1
     9d0:	01 05       	cpc	r16, r1
     9d2:	11 05       	cpc	r17, r1
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <__clzsi2+0x36>
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__clzsi2+0x36>
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__clzsi2+0x64>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	a0 e0       	ldi	r26, 0x00	; 0
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <__clzsi2+0x64>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	e8 16       	cp	r14, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	f8 06       	cpc	r15, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 07       	cpc	r16, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	18 07       	cpc	r17, r24
     9fc:	28 f0       	brcs	.+10     	; 0xa08 <__clzsi2+0x5c>
     9fe:	88 e1       	ldi	r24, 0x18	; 24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__clzsi2+0x64>
     a08:	80 e1       	ldi	r24, 0x10	; 16
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	20 e2       	ldi	r18, 0x20	; 32
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	4a 0b       	sbc	r20, r26
     a1e:	5b 0b       	sbc	r21, r27
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__clzsi2+0x7e>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	8a 95       	dec	r24
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__clzsi2+0x76>
     a2e:	f7 01       	movw	r30, r14
     a30:	e8 59       	subi	r30, 0x98	; 152
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	28 1b       	sub	r18, r24
     a38:	31 09       	sbc	r19, r1
     a3a:	41 09       	sbc	r20, r1
     a3c:	51 09       	sbc	r21, r1
     a3e:	c9 01       	movw	r24, r18
     a40:	1f 91       	pop	r17
     a42:	0f 91       	pop	r16
     a44:	ff 90       	pop	r15
     a46:	ef 90       	pop	r14
     a48:	08 95       	ret

00000a4a <__pack_f>:
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	fc 01       	movw	r30, r24
     a56:	e4 80       	ldd	r14, Z+4	; 0x04
     a58:	f5 80       	ldd	r15, Z+5	; 0x05
     a5a:	06 81       	ldd	r16, Z+6	; 0x06
     a5c:	17 81       	ldd	r17, Z+7	; 0x07
     a5e:	d1 80       	ldd	r13, Z+1	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__pack_f+0x2e>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a0 e1       	ldi	r26, 0x10	; 16
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	e8 2a       	or	r14, r24
     a70:	f9 2a       	or	r15, r25
     a72:	0a 2b       	or	r16, r26
     a74:	1b 2b       	or	r17, r27
     a76:	a5 c0       	rjmp	.+330    	; 0xbc2 <__pack_f+0x178>
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	09 f4       	brne	.+2      	; 0xa7e <__pack_f+0x34>
     a7c:	9f c0       	rjmp	.+318    	; 0xbbc <__pack_f+0x172>
     a7e:	82 30       	cpi	r24, 0x02	; 2
     a80:	21 f4       	brne	.+8      	; 0xa8a <__pack_f+0x40>
     a82:	ee 24       	eor	r14, r14
     a84:	ff 24       	eor	r15, r15
     a86:	87 01       	movw	r16, r14
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__pack_f+0x4a>
     a8a:	e1 14       	cp	r14, r1
     a8c:	f1 04       	cpc	r15, r1
     a8e:	01 05       	cpc	r16, r1
     a90:	11 05       	cpc	r17, r1
     a92:	19 f4       	brne	.+6      	; 0xa9a <__pack_f+0x50>
     a94:	e0 e0       	ldi	r30, 0x00	; 0
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	96 c0       	rjmp	.+300    	; 0xbc6 <__pack_f+0x17c>
     a9a:	62 81       	ldd	r22, Z+2	; 0x02
     a9c:	73 81       	ldd	r23, Z+3	; 0x03
     a9e:	9f ef       	ldi	r25, 0xFF	; 255
     aa0:	62 38       	cpi	r22, 0x82	; 130
     aa2:	79 07       	cpc	r23, r25
     aa4:	0c f0       	brlt	.+2      	; 0xaa8 <__pack_f+0x5e>
     aa6:	5b c0       	rjmp	.+182    	; 0xb5e <__pack_f+0x114>
     aa8:	22 e8       	ldi	r18, 0x82	; 130
     aaa:	3f ef       	ldi	r19, 0xFF	; 255
     aac:	26 1b       	sub	r18, r22
     aae:	37 0b       	sbc	r19, r23
     ab0:	2a 31       	cpi	r18, 0x1A	; 26
     ab2:	31 05       	cpc	r19, r1
     ab4:	2c f0       	brlt	.+10     	; 0xac0 <__pack_f+0x76>
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	2a c0       	rjmp	.+84     	; 0xb14 <__pack_f+0xca>
     ac0:	b8 01       	movw	r22, r16
     ac2:	a7 01       	movw	r20, r14
     ac4:	02 2e       	mov	r0, r18
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0x86>
     ac8:	76 95       	lsr	r23
     aca:	67 95       	ror	r22
     acc:	57 95       	ror	r21
     ace:	47 95       	ror	r20
     ad0:	0a 94       	dec	r0
     ad2:	d2 f7       	brpl	.-12     	; 0xac8 <__pack_f+0x7e>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__pack_f+0x9c>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	2a 95       	dec	r18
     ae8:	d2 f7       	brpl	.-12     	; 0xade <__pack_f+0x94>
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	a1 09       	sbc	r26, r1
     aee:	b1 09       	sbc	r27, r1
     af0:	8e 21       	and	r24, r14
     af2:	9f 21       	and	r25, r15
     af4:	a0 23       	and	r26, r16
     af6:	b1 23       	and	r27, r17
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	a1 05       	cpc	r26, r1
     afc:	b1 05       	cpc	r27, r1
     afe:	21 f0       	breq	.+8      	; 0xb08 <__pack_f+0xbe>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	9a 01       	movw	r18, r20
     b0a:	ab 01       	movw	r20, r22
     b0c:	28 2b       	or	r18, r24
     b0e:	39 2b       	or	r19, r25
     b10:	4a 2b       	or	r20, r26
     b12:	5b 2b       	or	r21, r27
     b14:	da 01       	movw	r26, r20
     b16:	c9 01       	movw	r24, r18
     b18:	8f 77       	andi	r24, 0x7F	; 127
     b1a:	90 70       	andi	r25, 0x00	; 0
     b1c:	a0 70       	andi	r26, 0x00	; 0
     b1e:	b0 70       	andi	r27, 0x00	; 0
     b20:	80 34       	cpi	r24, 0x40	; 64
     b22:	91 05       	cpc	r25, r1
     b24:	a1 05       	cpc	r26, r1
     b26:	b1 05       	cpc	r27, r1
     b28:	39 f4       	brne	.+14     	; 0xb38 <__pack_f+0xee>
     b2a:	27 ff       	sbrs	r18, 7
     b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__pack_f+0xf6>
     b2e:	20 5c       	subi	r18, 0xC0	; 192
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	4f 4f       	sbci	r20, 0xFF	; 255
     b34:	5f 4f       	sbci	r21, 0xFF	; 255
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__pack_f+0xf6>
     b38:	21 5c       	subi	r18, 0xC1	; 193
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	4f 4f       	sbci	r20, 0xFF	; 255
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	20 30       	cpi	r18, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	3a 07       	cpc	r19, r26
     b4a:	a0 e0       	ldi	r26, 0x00	; 0
     b4c:	4a 07       	cpc	r20, r26
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	5a 07       	cpc	r21, r26
     b52:	10 f0       	brcs	.+4      	; 0xb58 <__pack_f+0x10e>
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	79 01       	movw	r14, r18
     b5a:	8a 01       	movw	r16, r20
     b5c:	27 c0       	rjmp	.+78     	; 0xbac <__pack_f+0x162>
     b5e:	60 38       	cpi	r22, 0x80	; 128
     b60:	71 05       	cpc	r23, r1
     b62:	64 f5       	brge	.+88     	; 0xbbc <__pack_f+0x172>
     b64:	fb 01       	movw	r30, r22
     b66:	e1 58       	subi	r30, 0x81	; 129
     b68:	ff 4f       	sbci	r31, 0xFF	; 255
     b6a:	d8 01       	movw	r26, r16
     b6c:	c7 01       	movw	r24, r14
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	90 70       	andi	r25, 0x00	; 0
     b72:	a0 70       	andi	r26, 0x00	; 0
     b74:	b0 70       	andi	r27, 0x00	; 0
     b76:	80 34       	cpi	r24, 0x40	; 64
     b78:	91 05       	cpc	r25, r1
     b7a:	a1 05       	cpc	r26, r1
     b7c:	b1 05       	cpc	r27, r1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__pack_f+0x144>
     b80:	e7 fe       	sbrs	r14, 7
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <__pack_f+0x154>
     b84:	80 e4       	ldi	r24, 0x40	; 64
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <__pack_f+0x14c>
     b8e:	8f e3       	ldi	r24, 0x3F	; 63
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e8 0e       	add	r14, r24
     b98:	f9 1e       	adc	r15, r25
     b9a:	0a 1f       	adc	r16, r26
     b9c:	1b 1f       	adc	r17, r27
     b9e:	17 ff       	sbrs	r17, 7
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__pack_f+0x162>
     ba2:	16 95       	lsr	r17
     ba4:	07 95       	ror	r16
     ba6:	f7 94       	ror	r15
     ba8:	e7 94       	ror	r14
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	87 e0       	ldi	r24, 0x07	; 7
     bae:	16 95       	lsr	r17
     bb0:	07 95       	ror	r16
     bb2:	f7 94       	ror	r15
     bb4:	e7 94       	ror	r14
     bb6:	8a 95       	dec	r24
     bb8:	d1 f7       	brne	.-12     	; 0xbae <__pack_f+0x164>
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <__pack_f+0x17c>
     bbc:	ee 24       	eor	r14, r14
     bbe:	ff 24       	eor	r15, r15
     bc0:	87 01       	movw	r16, r14
     bc2:	ef ef       	ldi	r30, 0xFF	; 255
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	6e 2f       	mov	r22, r30
     bc8:	67 95       	ror	r22
     bca:	66 27       	eor	r22, r22
     bcc:	67 95       	ror	r22
     bce:	90 2f       	mov	r25, r16
     bd0:	9f 77       	andi	r25, 0x7F	; 127
     bd2:	d7 94       	ror	r13
     bd4:	dd 24       	eor	r13, r13
     bd6:	d7 94       	ror	r13
     bd8:	8e 2f       	mov	r24, r30
     bda:	86 95       	lsr	r24
     bdc:	49 2f       	mov	r20, r25
     bde:	46 2b       	or	r20, r22
     be0:	58 2f       	mov	r21, r24
     be2:	5d 29       	or	r21, r13
     be4:	b7 01       	movw	r22, r14
     be6:	ca 01       	movw	r24, r20
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	ff 90       	pop	r15
     bee:	ef 90       	pop	r14
     bf0:	df 90       	pop	r13
     bf2:	08 95       	ret

00000bf4 <__unpack_f>:
     bf4:	fc 01       	movw	r30, r24
     bf6:	db 01       	movw	r26, r22
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	22 81       	ldd	r18, Z+2	; 0x02
     bfe:	62 2f       	mov	r22, r18
     c00:	6f 77       	andi	r22, 0x7F	; 127
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	22 1f       	adc	r18, r18
     c06:	22 27       	eor	r18, r18
     c08:	22 1f       	adc	r18, r18
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	89 2f       	mov	r24, r25
     c0e:	88 0f       	add	r24, r24
     c10:	82 2b       	or	r24, r18
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	99 1f       	adc	r25, r25
     c18:	99 27       	eor	r25, r25
     c1a:	99 1f       	adc	r25, r25
     c1c:	11 96       	adiw	r26, 0x01	; 1
     c1e:	9c 93       	st	X, r25
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	21 15       	cp	r18, r1
     c24:	31 05       	cpc	r19, r1
     c26:	a9 f5       	brne	.+106    	; 0xc92 <__unpack_f+0x9e>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	11 f4       	brne	.+4      	; 0xc36 <__unpack_f+0x42>
     c32:	82 e0       	ldi	r24, 0x02	; 2
     c34:	37 c0       	rjmp	.+110    	; 0xca4 <__unpack_f+0xb0>
     c36:	82 e8       	ldi	r24, 0x82	; 130
     c38:	9f ef       	ldi	r25, 0xFF	; 255
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	9c 93       	st	X, r25
     c3e:	8e 93       	st	-X, r24
     c40:	12 97       	sbiw	r26, 0x02	; 2
     c42:	9a 01       	movw	r18, r20
     c44:	ab 01       	movw	r20, r22
     c46:	67 e0       	ldi	r22, 0x07	; 7
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	6a 95       	dec	r22
     c52:	d1 f7       	brne	.-12     	; 0xc48 <__unpack_f+0x54>
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	8c 93       	st	X, r24
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <__unpack_f+0x80>
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	13 96       	adiw	r26, 0x03	; 3
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	12 97       	sbiw	r26, 0x02	; 2
     c74:	20 30       	cpi	r18, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	38 07       	cpc	r19, r24
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	48 07       	cpc	r20, r24
     c7e:	80 e4       	ldi	r24, 0x40	; 64
     c80:	58 07       	cpc	r21, r24
     c82:	58 f3       	brcs	.-42     	; 0xc5a <__unpack_f+0x66>
     c84:	14 96       	adiw	r26, 0x04	; 4
     c86:	2d 93       	st	X+, r18
     c88:	3d 93       	st	X+, r19
     c8a:	4d 93       	st	X+, r20
     c8c:	5c 93       	st	X, r21
     c8e:	17 97       	sbiw	r26, 0x07	; 7
     c90:	08 95       	ret
     c92:	2f 3f       	cpi	r18, 0xFF	; 255
     c94:	31 05       	cpc	r19, r1
     c96:	79 f4       	brne	.+30     	; 0xcb6 <__unpack_f+0xc2>
     c98:	41 15       	cp	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	19 f4       	brne	.+6      	; 0xca8 <__unpack_f+0xb4>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	8c 93       	st	X, r24
     ca6:	08 95       	ret
     ca8:	64 ff       	sbrs	r22, 4
     caa:	03 c0       	rjmp	.+6      	; 0xcb2 <__unpack_f+0xbe>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 93       	st	X, r24
     cb0:	12 c0       	rjmp	.+36     	; 0xcd6 <__unpack_f+0xe2>
     cb2:	1c 92       	st	X, r1
     cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <__unpack_f+0xe2>
     cb6:	2f 57       	subi	r18, 0x7F	; 127
     cb8:	30 40       	sbci	r19, 0x00	; 0
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	3c 93       	st	X, r19
     cbe:	2e 93       	st	-X, r18
     cc0:	12 97       	sbiw	r26, 0x02	; 2
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8c 93       	st	X, r24
     cc6:	87 e0       	ldi	r24, 0x07	; 7
     cc8:	44 0f       	add	r20, r20
     cca:	55 1f       	adc	r21, r21
     ccc:	66 1f       	adc	r22, r22
     cce:	77 1f       	adc	r23, r23
     cd0:	8a 95       	dec	r24
     cd2:	d1 f7       	brne	.-12     	; 0xcc8 <__unpack_f+0xd4>
     cd4:	70 64       	ori	r23, 0x40	; 64
     cd6:	14 96       	adiw	r26, 0x04	; 4
     cd8:	4d 93       	st	X+, r20
     cda:	5d 93       	st	X+, r21
     cdc:	6d 93       	st	X+, r22
     cde:	7c 93       	st	X, r23
     ce0:	17 97       	sbiw	r26, 0x07	; 7
     ce2:	08 95       	ret

00000ce4 <__fpcmp_parts_f>:
     ce4:	1f 93       	push	r17
     ce6:	dc 01       	movw	r26, r24
     ce8:	fb 01       	movw	r30, r22
     cea:	9c 91       	ld	r25, X
     cec:	92 30       	cpi	r25, 0x02	; 2
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <__fpcmp_parts_f+0xe>
     cf0:	47 c0       	rjmp	.+142    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cf2:	80 81       	ld	r24, Z
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	08 f4       	brcc	.+2      	; 0xcfa <__fpcmp_parts_f+0x16>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <__fpcmp_parts_f+0x9c>
     cfa:	94 30       	cpi	r25, 0x04	; 4
     cfc:	51 f4       	brne	.+20     	; 0xd12 <__fpcmp_parts_f+0x2e>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	99 f5       	brne	.+102    	; 0xd6c <__fpcmp_parts_f+0x88>
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	68 2f       	mov	r22, r24
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	61 1b       	sub	r22, r17
     d0e:	71 09       	sbc	r23, r1
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <__fpcmp_parts_f+0xac>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	21 f0       	breq	.+8      	; 0xd1e <__fpcmp_parts_f+0x3a>
     d16:	92 30       	cpi	r25, 0x02	; 2
     d18:	31 f4       	brne	.+12     	; 0xd26 <__fpcmp_parts_f+0x42>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	b9 f1       	breq	.+110    	; 0xd8c <__fpcmp_parts_f+0xa8>
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	88 23       	and	r24, r24
     d22:	89 f1       	breq	.+98     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d26:	11 96       	adiw	r26, 0x01	; 1
     d28:	1c 91       	ld	r17, X
     d2a:	11 97       	sbiw	r26, 0x01	; 1
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	f1 f0       	breq	.+60     	; 0xd6c <__fpcmp_parts_f+0x88>
     d30:	81 81       	ldd	r24, Z+1	; 0x01
     d32:	18 17       	cp	r17, r24
     d34:	d9 f4       	brne	.+54     	; 0xd6c <__fpcmp_parts_f+0x88>
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	2d 91       	ld	r18, X+
     d3a:	3c 91       	ld	r19, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	82 81       	ldd	r24, Z+2	; 0x02
     d40:	93 81       	ldd	r25, Z+3	; 0x03
     d42:	82 17       	cp	r24, r18
     d44:	93 07       	cpc	r25, r19
     d46:	94 f0       	brlt	.+36     	; 0xd6c <__fpcmp_parts_f+0x88>
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	bc f0       	brlt	.+46     	; 0xd7c <__fpcmp_parts_f+0x98>
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8d 91       	ld	r24, X+
     d52:	9d 91       	ld	r25, X+
     d54:	0d 90       	ld	r0, X+
     d56:	bc 91       	ld	r27, X
     d58:	a0 2d       	mov	r26, r0
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	4a 07       	cpc	r20, r26
     d68:	5b 07       	cpc	r21, r27
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <__fpcmp_parts_f+0x8e>
     d6c:	11 23       	and	r17, r17
     d6e:	41 f0       	breq	.+16     	; 0xd80 <__fpcmp_parts_f+0x9c>
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <__fpcmp_parts_f+0xa2>
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	a4 07       	cpc	r26, r20
     d78:	b5 07       	cpc	r27, r21
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <__fpcmp_parts_f+0xa8>
     d7c:	11 23       	and	r17, r17
     d7e:	19 f0       	breq	.+6      	; 0xd86 <__fpcmp_parts_f+0xa2>
     d80:	61 e0       	ldi	r22, 0x01	; 1
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__fpcmp_parts_f+0xac>
     d86:	6f ef       	ldi	r22, 0xFF	; 255
     d88:	7f ef       	ldi	r23, 0xFF	; 255
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <__fpcmp_parts_f+0xac>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	cb 01       	movw	r24, r22
     d92:	1f 91       	pop	r17
     d94:	08 95       	ret

00000d96 <ADC_Init>:
#include "GI_Interface.h"

void (*Ptr)(void);

void ADC_Init (u8 voltageSelection, u8 LRAdjust)
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <ADC_Init+0x6>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <ADC_Init+0x8>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <ADC_Init+0xa>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	6a 83       	std	Y+2, r22	; 0x02
	//ADC Enable
	SET_BIT(ADCSRA_Reg,7);
     da8:	a6 e2       	ldi	r26, 0x26	; 38
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e6 e2       	ldi	r30, 0x26	; 38
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	8c 93       	st	X, r24

	//Prescaler Configuration as 128
	SET_BIT(ADCSRA_Reg,2);
     db6:	a6 e2       	ldi	r26, 0x26	; 38
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e6 e2       	ldi	r30, 0x26	; 38
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	84 60       	ori	r24, 0x04	; 4
     dc2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,1);
     dc4:	a6 e2       	ldi	r26, 0x26	; 38
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e6 e2       	ldi	r30, 0x26	; 38
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	82 60       	ori	r24, 0x02	; 2
     dd0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_Reg,0);
     dd2:	a6 e2       	ldi	r26, 0x26	; 38
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	8c 93       	st	X, r24

	switch(voltageSelection)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3e 83       	std	Y+6, r19	; 0x06
     de8:	2d 83       	std	Y+5, r18	; 0x05
     dea:	8d 81       	ldd	r24, Y+5	; 0x05
     dec:	9e 81       	ldd	r25, Y+6	; 0x06
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	c1 f0       	breq	.+48     	; 0xe24 <ADC_Init+0x8e>
     df4:	2d 81       	ldd	r18, Y+5	; 0x05
     df6:	3e 81       	ldd	r19, Y+6	; 0x06
     df8:	22 30       	cpi	r18, 0x02	; 2
     dfa:	31 05       	cpc	r19, r1
     dfc:	11 f1       	breq	.+68     	; 0xe42 <ADC_Init+0xac>
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	61 f5       	brne	.+88     	; 0xe5e <ADC_Init+0xc8>
	{
		case internalVref:
			CLR_BIT(ADMUX_Reg,7);
     e06:	a7 e2       	ldi	r26, 0x27	; 39
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e2       	ldi	r30, 0x27	; 39
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 77       	andi	r24, 0x7F	; 127
     e12:	8c 93       	st	X, r24
			CLR_BIT(ADMUX_Reg,6);
     e14:	a7 e2       	ldi	r26, 0x27	; 39
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e2       	ldi	r30, 0x27	; 39
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8f 7b       	andi	r24, 0xBF	; 191
     e20:	8c 93       	st	X, r24
     e22:	1d c0       	rjmp	.+58     	; 0xe5e <ADC_Init+0xc8>
			break;
		case externalCapacitor:
			CLR_BIT(ADMUX_Reg,7);
     e24:	a7 e2       	ldi	r26, 0x27	; 39
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e2       	ldi	r30, 0x27	; 39
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 77       	andi	r24, 0x7F	; 127
     e30:	8c 93       	st	X, r24
			SET_BIT(ADMUX_Reg,6);
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 64       	ori	r24, 0x40	; 64
     e3e:	8c 93       	st	X, r24
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <ADC_Init+0xc8>
			break;
		case Ex_internal:
			SET_BIT(ADMUX_Reg,7);
     e42:	a7 e2       	ldi	r26, 0x27	; 39
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24
			SET_BIT(ADMUX_Reg,6);
     e50:	a7 e2       	ldi	r26, 0x27	; 39
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e2       	ldi	r30, 0x27	; 39
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	8c 93       	st	X, r24
			break;
	}
	switch(LRAdjust)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	3c 83       	std	Y+4, r19	; 0x04
     e66:	2b 83       	std	Y+3, r18	; 0x03
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	31 f0       	breq	.+12     	; 0xe7c <ADC_Init+0xe6>
     e70:	2b 81       	ldd	r18, Y+3	; 0x03
     e72:	3c 81       	ldd	r19, Y+4	; 0x04
     e74:	21 30       	cpi	r18, 0x01	; 1
     e76:	31 05       	cpc	r19, r1
     e78:	49 f0       	breq	.+18     	; 0xe8c <ADC_Init+0xf6>
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <ADC_Init+0x104>
	{
	case rightAdjust:
		CLR_BIT(ADMUX_Reg,5);
     e7c:	a7 e2       	ldi	r26, 0x27	; 39
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e7 e2       	ldi	r30, 0x27	; 39
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7d       	andi	r24, 0xDF	; 223
     e88:	8c 93       	st	X, r24
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <ADC_Init+0x104>
		break;
	case leftAdjust:
		SET_BIT(ADMUX_Reg,5);
     e8c:	a7 e2       	ldi	r26, 0x27	; 39
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e7 e2       	ldi	r30, 0x27	; 39
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
		break;
	}
}
     e9a:	26 96       	adiw	r28, 0x06	; 6
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <ADC_conversion>:

void ADC_conversion (u8 channel, u8 conversionSelect)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <ADC_conversion+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <ADC_conversion+0x8>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	6a 83       	std	Y+2, r22	; 0x02
	//We have to select channel before start conversion
	//there are ADC0-7 channel, it can be handled by macros
	//set and clear 3 bits
	// ADC Channel Selection
	//Switch 7 cases
	channel &= 0x07;
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	87 70       	andi	r24, 0x07	; 7
     ec0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_Reg &= 0xE0;
     ec2:	a7 e2       	ldi	r26, 0x27	; 39
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e7 e2       	ldi	r30, 0x27	; 39
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 7e       	andi	r24, 0xE0	; 224
     ece:	8c 93       	st	X, r24
	ADMUX_Reg |= channel;
     ed0:	a7 e2       	ldi	r26, 0x27	; 39
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e7 e2       	ldi	r30, 0x27	; 39
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	89 2b       	or	r24, r25
     ede:	8c 93       	st	X, r24

	switch(conversionSelect)
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3c 83       	std	Y+4, r19	; 0x04
     ee8:	2b 83       	std	Y+3, r18	; 0x03
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	11 f1       	breq	.+68     	; 0xf38 <ADC_conversion+0x8c>
     ef4:	2b 81       	ldd	r18, Y+3	; 0x03
     ef6:	3c 81       	ldd	r19, Y+4	; 0x04
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	71 f1       	breq	.+92     	; 0xf5a <ADC_conversion+0xae>
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	09 f0       	breq	.+2      	; 0xf08 <ADC_conversion+0x5c>
     f06:	40 c0       	rjmp	.+128    	; 0xf88 <ADC_conversion+0xdc>
	{
	case singleConversion:
		SET_BIT(ADCSRA_Reg,6);
     f08:	a6 e2       	ldi	r26, 0x26	; 38
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e6 e2       	ldi	r30, 0x26	; 38
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	80 64       	ori	r24, 0x40	; 64
     f14:	8c 93       	st	X, r24
		//wait for the conversion ?????
		while(!(ADCSRA_Reg & (1<<4)));
     f16:	e6 e2       	ldi	r30, 0x26	; 38
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	80 71       	andi	r24, 0x10	; 16
     f22:	90 70       	andi	r25, 0x00	; 0
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	b9 f3       	breq	.-18     	; 0xf16 <ADC_conversion+0x6a>
		//ADC Flag Clear
		SET_BIT(ADCSRA_Reg,4);
     f28:	a6 e2       	ldi	r26, 0x26	; 38
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	8c 93       	st	X, r24
     f36:	28 c0       	rjmp	.+80     	; 0xf88 <ADC_conversion+0xdc>
		break;
	case autoTrigring:
		SET_BIT(ADCSRA_Reg,5);
     f38:	a6 e2       	ldi	r26, 0x26	; 38
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	80 62       	ori	r24, 0x20	; 32
     f44:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,3);
     f46:	a6 e2       	ldi	r26, 0x26	; 38
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e6 e2       	ldi	r30, 0x26	; 38
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	8c 93       	st	X, r24
		GI_vdEnableGI();
     f54:	0e 94 87 0c 	call	0x190e	; 0x190e <GI_vdEnableGI>
     f58:	17 c0       	rjmp	.+46     	; 0xf88 <ADC_conversion+0xdc>
		break;
	case autoTrigringFreeRunning:
		SET_BIT(ADCSRA_Reg,6);
     f5a:	a6 e2       	ldi	r26, 0x26	; 38
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e6 e2       	ldi	r30, 0x26	; 38
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 64       	ori	r24, 0x40	; 64
     f66:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,5);
     f68:	a6 e2       	ldi	r26, 0x26	; 38
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e6 e2       	ldi	r30, 0x26	; 38
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 62       	ori	r24, 0x20	; 32
     f74:	8c 93       	st	X, r24
		SET_BIT(ADCSRA_Reg,3);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 60       	ori	r24, 0x08	; 8
     f82:	8c 93       	st	X, r24
		GI_vdEnableGI();
     f84:	0e 94 87 0c 	call	0x190e	; 0x190e <GI_vdEnableGI>
		break;
	}

}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <ADC_Read>:

u8 ADC_Read()
{
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	return ADC;
     f9e:	e4 e2       	ldi	r30, 0x24	; 36
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	91 81       	ldd	r25, Z+1	; 0x01
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <assignPtrCallBack>:

void assignPtrCallBack(void (*PtrPassed)(void))
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <assignPtrCallBack+0x6>
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
	Ptr=PtrPassed;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	90 93 69 01 	sts	0x0169, r25
     fc2:	80 93 68 01 	sts	0x0168, r24
}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <__vector_16>:
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     fd0:	1f 92       	push	r1
     fd2:	0f 92       	push	r0
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	0f 92       	push	r0
     fd8:	11 24       	eor	r1, r1
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	ef 93       	push	r30
     ff0:	ff 93       	push	r31
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	(Ptr)();
     ffa:	e0 91 68 01 	lds	r30, 0x0168
     ffe:	f0 91 69 01 	lds	r31, 0x0169
    1002:	09 95       	icall
}
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	ff 91       	pop	r31
    100a:	ef 91       	pop	r30
    100c:	bf 91       	pop	r27
    100e:	af 91       	pop	r26
    1010:	9f 91       	pop	r25
    1012:	8f 91       	pop	r24
    1014:	7f 91       	pop	r23
    1016:	6f 91       	pop	r22
    1018:	5f 91       	pop	r21
    101a:	4f 91       	pop	r20
    101c:	3f 91       	pop	r19
    101e:	2f 91       	pop	r18
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	0f 90       	pop	r0
    1026:	1f 90       	pop	r1
    1028:	18 95       	reti

0000102a <main>:
#include "DIO_Interface.h"

void callBackTimerApp(void);

void main (void)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
	assignPtrCallBack(callBackTimerApp);
    1032:	81 e3       	ldi	r24, 0x31	; 49
    1034:	98 e0       	ldi	r25, 0x08	; 8
    1036:	0e 94 d6 07 	call	0xfac	; 0xfac <assignPtrCallBack>

	//u16 DigitalValue = 0;
	/*float AnalogValue = 0;
	f32 Temp=0;
	f32 LDR=0;*/
	DIO_vdSetPintDirection(PortA,PIN0,PIN_INPUT);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_vdSetPintDirection>

	LCD_vdInitialization();
    1044:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <LCD_vdInitialization>
	ADC_Init (externalCapacitor, rightAdjust);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	0e 94 cb 06 	call	0xd96	; 0xd96 <ADC_Init>
	ADC_conversion (PIN0, singleConversion);
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	0e 94 56 07 	call	0xeac	; 0xeac <ADC_conversion>
		else if(LDR>500)
		{
			DIO_vdSetPinValue(PortB,PIN0,PIN_High);

		}*/
		ADC_conversion (PIN0, autoTrigringFreeRunning);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	0e 94 56 07 	call	0xeac	; 0xeac <ADC_conversion>
    1060:	fb cf       	rjmp	.-10     	; 0x1058 <main+0x2e>

00001062 <callBackTimerApp>:
	}
}

void callBackTimerApp(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <callBackTimerApp+0x6>
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	u16 DigitalValue;
	DigitalValue = ADC_Read(PIN0);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 cb 07 	call	0xf96	; 0xf96 <ADC_Read>
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9b 83       	std	Y+3, r25	; 0x03
    107c:	8a 83       	std	Y+2, r24	; 0x02
	u8 AnalogValue = (DigitalValue*2500)/1024;
    107e:	2a 81       	ldd	r18, Y+2	; 0x02
    1080:	3b 81       	ldd	r19, Y+3	; 0x03
    1082:	84 ec       	ldi	r24, 0xC4	; 196
    1084:	99 e0       	ldi	r25, 0x09	; 9
    1086:	ac 01       	movw	r20, r24
    1088:	24 9f       	mul	r18, r20
    108a:	c0 01       	movw	r24, r0
    108c:	25 9f       	mul	r18, r21
    108e:	90 0d       	add	r25, r0
    1090:	34 9f       	mul	r19, r20
    1092:	90 0d       	add	r25, r0
    1094:	11 24       	eor	r1, r1
    1096:	89 2f       	mov	r24, r25
    1098:	99 27       	eor	r25, r25
    109a:	86 95       	lsr	r24
    109c:	86 95       	lsr	r24
    109e:	89 83       	std	Y+1, r24	; 0x01
	LCD_vdWriteNum(AnalogValue);
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_vdWriteNum>
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <DIO_vdSetPortDirection+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <DIO_vdSetPortDirection+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	6a 83       	std	Y+2, r22	; 0x02
	//00000000
	if(PortID >= 0 && PortID <= 3)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	90 f5       	brcc	.+100    	; 0x1138 <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3c 83       	std	Y+4, r19	; 0x04
    10dc:	2b 83       	std	Y+3, r18	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	91 05       	cpc	r25, r1
    10e6:	d1 f0       	breq	.+52     	; 0x111c <DIO_vdSetPortDirection+0x5e>
    10e8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ea:	3c 81       	ldd	r19, Y+4	; 0x04
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	2c f4       	brge	.+10     	; 0x10fc <DIO_vdSetPortDirection+0x3e>
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	61 f0       	breq	.+24     	; 0x1112 <DIO_vdSetPortDirection+0x54>
    10fa:	1e c0       	rjmp	.+60     	; 0x1138 <DIO_vdSetPortDirection+0x7a>
    10fc:	2b 81       	ldd	r18, Y+3	; 0x03
    10fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	31 05       	cpc	r19, r1
    1104:	81 f0       	breq	.+32     	; 0x1126 <DIO_vdSetPortDirection+0x68>
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	91 05       	cpc	r25, r1
    110e:	81 f0       	breq	.+32     	; 0x1130 <DIO_vdSetPortDirection+0x72>
    1110:	13 c0       	rjmp	.+38     	; 0x1138 <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
    1112:	ea e3       	ldi	r30, 0x3A	; 58
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
    1126:	e4 e3       	ldi	r30, 0x34	; 52
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <DIO_vdSetPortValue>:

//Set PORT as a register value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_vdSetPortValue+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <DIO_vdSetPortValue+0x8>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_vdSetPortValue+0xa>
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	08 f0       	brcs	.+2      	; 0x1160 <DIO_vdSetPortValue+0x1a>
    115e:	64 c0       	rjmp	.+200    	; 0x1228 <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	88 23       	and	r24, r24
    1164:	79 f5       	brne	.+94     	; 0x11c4 <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	3e 83       	std	Y+6, r19	; 0x06
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	91 05       	cpc	r25, r1
    1178:	c9 f0       	breq	.+50     	; 0x11ac <DIO_vdSetPortValue+0x66>
    117a:	2d 81       	ldd	r18, Y+5	; 0x05
    117c:	3e 81       	ldd	r19, Y+6	; 0x06
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	2c f4       	brge	.+10     	; 0x118e <DIO_vdSetPortValue+0x48>
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	61 f0       	breq	.+24     	; 0x11a4 <DIO_vdSetPortValue+0x5e>
    118c:	4d c0       	rjmp	.+154    	; 0x1228 <DIO_vdSetPortValue+0xe2>
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	71 f0       	breq	.+28     	; 0x11b4 <DIO_vdSetPortValue+0x6e>
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	69 f0       	breq	.+26     	; 0x11bc <DIO_vdSetPortValue+0x76>
    11a2:	42 c0       	rjmp	.+132    	; 0x1228 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	10 82       	st	Z, r1
    11aa:	3e c0       	rjmp	.+124    	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
    11ac:	e8 e3       	ldi	r30, 0x38	; 56
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	10 82       	st	Z, r1
    11b2:	3a c0       	rjmp	.+116    	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	10 82       	st	Z, r1
    11ba:	36 c0       	rjmp	.+108    	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
    11bc:	e2 e3       	ldi	r30, 0x32	; 50
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1
    11c2:	32 c0       	rjmp	.+100    	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3c 83       	std	Y+4, r19	; 0x04
    11cc:	2b 83       	std	Y+3, r18	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	d1 f0       	breq	.+52     	; 0x120c <DIO_vdSetPortValue+0xc6>
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <DIO_vdSetPortValue+0xa6>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <DIO_vdSetPortValue+0xbc>
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <DIO_vdSetPortValue+0xe2>
    11ec:	2b 81       	ldd	r18, Y+3	; 0x03
    11ee:	3c 81       	ldd	r19, Y+4	; 0x04
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <DIO_vdSetPortValue+0xd0>
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <DIO_vdSetPortValue+0xda>
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	80 83       	st	Z, r24
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	80 83       	st	Z, r24
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	80 83       	st	Z, r24
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
    1228:	26 96       	adiw	r28, 0x06	; 6
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	27 97       	sbiw	r28, 0x07	; 7
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6a 83       	std	Y+2, r22	; 0x02
    1252:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	08 f0       	brcs	.+2      	; 0x125c <DIO_vdSetPintDirection+0x22>
    125a:	ee c0       	rjmp	.+476    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	08 f0       	brcs	.+2      	; 0x1264 <DIO_vdSetPintDirection+0x2a>
    1262:	ea c0       	rjmp	.+468    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_vdSetPintDirection+0x32>
    126a:	6f c0       	rjmp	.+222    	; 0x134a <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	3f 83       	std	Y+7, r19	; 0x07
    1274:	2e 83       	std	Y+6, r18	; 0x06
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	91 05       	cpc	r25, r1
    127e:	49 f1       	breq	.+82     	; 0x12d2 <DIO_vdSetPintDirection+0x98>
    1280:	2e 81       	ldd	r18, Y+6	; 0x06
    1282:	3f 81       	ldd	r19, Y+7	; 0x07
    1284:	22 30       	cpi	r18, 0x02	; 2
    1286:	31 05       	cpc	r19, r1
    1288:	2c f4       	brge	.+10     	; 0x1294 <DIO_vdSetPintDirection+0x5a>
    128a:	8e 81       	ldd	r24, Y+6	; 0x06
    128c:	9f 81       	ldd	r25, Y+7	; 0x07
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f0       	breq	.+24     	; 0x12aa <DIO_vdSetPintDirection+0x70>
    1292:	d2 c0       	rjmp	.+420    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
    1294:	2e 81       	ldd	r18, Y+6	; 0x06
    1296:	3f 81       	ldd	r19, Y+7	; 0x07
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	71 f1       	breq	.+92     	; 0x12fa <DIO_vdSetPintDirection+0xc0>
    129e:	8e 81       	ldd	r24, Y+6	; 0x06
    12a0:	9f 81       	ldd	r25, Y+7	; 0x07
    12a2:	83 30       	cpi	r24, 0x03	; 3
    12a4:	91 05       	cpc	r25, r1
    12a6:	e9 f1       	breq	.+122    	; 0x1322 <DIO_vdSetPintDirection+0xe8>
    12a8:	c7 c0       	rjmp	.+398    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
    12aa:	aa e3       	ldi	r26, 0x3A	; 58
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ea e3       	ldi	r30, 0x3A	; 58
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_vdSetPintDirection+0x8e>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_vdSetPintDirection+0x8a>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	b3 c0       	rjmp	.+358    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
    12d2:	a7 e3       	ldi	r26, 0x37	; 55
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_vdSetPintDirection+0xb6>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_vdSetPintDirection+0xb2>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	9f c0       	rjmp	.+318    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
    12fa:	a4 e3       	ldi	r26, 0x34	; 52
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_vdSetPintDirection+0xde>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_vdSetPintDirection+0xda>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	8b c0       	rjmp	.+278    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
    1322:	a1 e3       	ldi	r26, 0x31	; 49
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e1 e3       	ldi	r30, 0x31	; 49
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_vdSetPintDirection+0x106>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_vdSetPintDirection+0x102>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	77 c0       	rjmp	.+238    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 23       	and	r24, r24
    134e:	09 f0       	breq	.+2      	; 0x1352 <DIO_vdSetPintDirection+0x118>
    1350:	73 c0       	rjmp	.+230    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	59 f1       	breq	.+86     	; 0x13bc <DIO_vdSetPintDirection+0x182>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_vdSetPintDirection+0x140>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f0       	breq	.+26     	; 0x1392 <DIO_vdSetPintDirection+0x158>
    1378:	5f c0       	rjmp	.+190    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	89 f1       	breq	.+98     	; 0x13e6 <DIO_vdSetPintDirection+0x1ac>
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	9d 81       	ldd	r25, Y+5	; 0x05
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <DIO_vdSetPintDirection+0x156>
    138e:	40 c0       	rjmp	.+128    	; 0x1410 <DIO_vdSetPintDirection+0x1d6>
    1390:	53 c0       	rjmp	.+166    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
    1392:	aa e3       	ldi	r26, 0x3A	; 58
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_vdSetPintDirection+0x176>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_vdSetPintDirection+0x172>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	3e c0       	rjmp	.+124    	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
    13bc:	a7 e3       	ldi	r26, 0x37	; 55
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_vdSetPintDirection+0x1a0>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_vdSetPintDirection+0x19c>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	29 c0       	rjmp	.+82     	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
    13e6:	a4 e3       	ldi	r26, 0x34	; 52
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_vdSetPintDirection+0x1ca>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_vdSetPintDirection+0x1c6>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
    1410:	a1 e3       	ldi	r26, 0x31	; 49
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e1 e3       	ldi	r30, 0x31	; 49
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_vdSetPintDirection+0x1f4>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_vdSetPintDirection+0x1f0>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
    1438:	27 96       	adiw	r28, 0x07	; 7
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	27 97       	sbiw	r28, 0x07	; 7
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
    1462:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	08 f0       	brcs	.+2      	; 0x146c <DIO_vdSetPinValue+0x22>
    146a:	ee c0       	rjmp	.+476    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <DIO_vdSetPinValue+0x2a>
    1472:	ea c0       	rjmp	.+468    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	09 f0       	breq	.+2      	; 0x147c <DIO_vdSetPinValue+0x32>
    147a:	6f c0       	rjmp	.+222    	; 0x155a <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3f 83       	std	Y+7, r19	; 0x07
    1484:	2e 83       	std	Y+6, r18	; 0x06
    1486:	8e 81       	ldd	r24, Y+6	; 0x06
    1488:	9f 81       	ldd	r25, Y+7	; 0x07
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	49 f1       	breq	.+82     	; 0x14e2 <DIO_vdSetPinValue+0x98>
    1490:	2e 81       	ldd	r18, Y+6	; 0x06
    1492:	3f 81       	ldd	r19, Y+7	; 0x07
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	2c f4       	brge	.+10     	; 0x14a4 <DIO_vdSetPinValue+0x5a>
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	61 f0       	breq	.+24     	; 0x14ba <DIO_vdSetPinValue+0x70>
    14a2:	d2 c0       	rjmp	.+420    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
    14a4:	2e 81       	ldd	r18, Y+6	; 0x06
    14a6:	3f 81       	ldd	r19, Y+7	; 0x07
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	71 f1       	breq	.+92     	; 0x150a <DIO_vdSetPinValue+0xc0>
    14ae:	8e 81       	ldd	r24, Y+6	; 0x06
    14b0:	9f 81       	ldd	r25, Y+7	; 0x07
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	91 05       	cpc	r25, r1
    14b6:	e9 f1       	breq	.+122    	; 0x1532 <DIO_vdSetPinValue+0xe8>
    14b8:	c7 c0       	rjmp	.+398    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
    14ba:	ab e3       	ldi	r26, 0x3B	; 59
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_vdSetPinValue+0x8e>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_vdSetPinValue+0x8a>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	b3 c0       	rjmp	.+358    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
    14e2:	a8 e3       	ldi	r26, 0x38	; 56
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e8 e3       	ldi	r30, 0x38	; 56
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_vdSetPinValue+0xb6>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_vdSetPinValue+0xb2>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	9f c0       	rjmp	.+318    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
    150a:	a5 e3       	ldi	r26, 0x35	; 53
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e5 e3       	ldi	r30, 0x35	; 53
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_vdSetPinValue+0xde>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_vdSetPinValue+0xda>
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	8b c0       	rjmp	.+278    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_vdSetPinValue+0x106>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_vdSetPinValue+0x102>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	77 c0       	rjmp	.+238    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_vdSetPinValue+0x118>
    1560:	73 c0       	rjmp	.+230    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	3d 83       	std	Y+5, r19	; 0x05
    156a:	2c 83       	std	Y+4, r18	; 0x04
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	9d 81       	ldd	r25, Y+5	; 0x05
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f1       	breq	.+86     	; 0x15cc <DIO_vdSetPinValue+0x182>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_vdSetPinValue+0x140>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_vdSetPinValue+0x158>
    1588:	5f c0       	rjmp	.+190    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_vdSetPinValue+0x1ac>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_vdSetPinValue+0x156>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_vdSetPinValue+0x1d6>
    15a0:	53 c0       	rjmp	.+166    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_vdSetPinValue+0x176>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_vdSetPinValue+0x172>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	3e c0       	rjmp	.+124    	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_vdSetPinValue+0x1a0>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_vdSetPinValue+0x19c>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	29 c0       	rjmp	.+82     	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_vdSetPinValue+0x1ca>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_vdSetPinValue+0x1c6>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_vdSetPinValue+0x1f4>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_vdSetPinValue+0x1f0>
    1642:	80 95       	com	r24
    1644:	84 23       	and	r24, r20
    1646:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    1648:	27 96       	adiw	r28, 0x07	; 7
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_u8GetPinValue+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <DIO_u8GetPinValue+0x8>
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_u8GetPinValue+0xa>
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	08 f0       	brcs	.+2      	; 0x1674 <DIO_u8GetPinValue+0x1a>
    1672:	70 c0       	rjmp	.+224    	; 0x1754 <DIO_u8GetPinValue+0xfa>
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	08 f0       	brcs	.+2      	; 0x167c <DIO_u8GetPinValue+0x22>
    167a:	6c c0       	rjmp	.+216    	; 0x1754 <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	3d 83       	std	Y+5, r19	; 0x05
    1684:	2c 83       	std	Y+4, r18	; 0x04
    1686:	4c 81       	ldd	r20, Y+4	; 0x04
    1688:	5d 81       	ldd	r21, Y+5	; 0x05
    168a:	41 30       	cpi	r20, 0x01	; 1
    168c:	51 05       	cpc	r21, r1
    168e:	49 f1       	breq	.+82     	; 0x16e2 <DIO_u8GetPinValue+0x88>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	82 30       	cpi	r24, 0x02	; 2
    1696:	91 05       	cpc	r25, r1
    1698:	34 f4       	brge	.+12     	; 0x16a6 <DIO_u8GetPinValue+0x4c>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	21 15       	cp	r18, r1
    16a0:	31 05       	cpc	r19, r1
    16a2:	61 f0       	breq	.+24     	; 0x16bc <DIO_u8GetPinValue+0x62>
    16a4:	57 c0       	rjmp	.+174    	; 0x1754 <DIO_u8GetPinValue+0xfa>
    16a6:	4c 81       	ldd	r20, Y+4	; 0x04
    16a8:	5d 81       	ldd	r21, Y+5	; 0x05
    16aa:	42 30       	cpi	r20, 0x02	; 2
    16ac:	51 05       	cpc	r21, r1
    16ae:	61 f1       	breq	.+88     	; 0x1708 <DIO_u8GetPinValue+0xae>
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	9d 81       	ldd	r25, Y+5	; 0x05
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	d1 f1       	breq	.+116    	; 0x172e <DIO_u8GetPinValue+0xd4>
    16ba:	4c c0       	rjmp	.+152    	; 0x1754 <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    16bc:	e9 e3       	ldi	r30, 0x39	; 57
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_u8GetPinValue+0x7a>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <DIO_u8GetPinValue+0x76>
    16d8:	ca 01       	movw	r24, r20
    16da:	58 2f       	mov	r21, r24
    16dc:	51 70       	andi	r21, 0x01	; 1
    16de:	5b 83       	std	Y+3, r21	; 0x03
    16e0:	3a c0       	rjmp	.+116    	; 0x1756 <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    16e2:	e6 e3       	ldi	r30, 0x36	; 54
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a9 01       	movw	r20, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_u8GetPinValue+0xa0>
    16f6:	55 95       	asr	r21
    16f8:	47 95       	ror	r20
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_u8GetPinValue+0x9c>
    16fe:	ca 01       	movw	r24, r20
    1700:	58 2f       	mov	r21, r24
    1702:	51 70       	andi	r21, 0x01	; 1
    1704:	5b 83       	std	Y+3, r21	; 0x03
    1706:	27 c0       	rjmp	.+78     	; 0x1756 <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    1708:	e3 e3       	ldi	r30, 0x33	; 51
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	88 2f       	mov	r24, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a9 01       	movw	r20, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <DIO_u8GetPinValue+0xc6>
    171c:	55 95       	asr	r21
    171e:	47 95       	ror	r20
    1720:	8a 95       	dec	r24
    1722:	e2 f7       	brpl	.-8      	; 0x171c <DIO_u8GetPinValue+0xc2>
    1724:	ca 01       	movw	r24, r20
    1726:	58 2f       	mov	r21, r24
    1728:	51 70       	andi	r21, 0x01	; 1
    172a:	5b 83       	std	Y+3, r21	; 0x03
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    172e:	e0 e3       	ldi	r30, 0x30	; 48
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a9 01       	movw	r20, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_u8GetPinValue+0xec>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_u8GetPinValue+0xe8>
    174a:	ca 01       	movw	r24, r20
    174c:	58 2f       	mov	r21, r24
    174e:	51 70       	andi	r21, 0x01	; 1
    1750:	5b 83       	std	Y+3, r21	; 0x03
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <DIO_u8GetPinValue+0xfc>
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	8e 83       	std	Y+6, r24	; 0x06
    175a:	8e 81       	ldd	r24, Y+6	; 0x06
    175c:	26 96       	adiw	r28, 0x06	; 6
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_vdTogPortValue+0x6>
    1774:	0f 92       	push	r0
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	08 f0       	brcs	.+2      	; 0x1784 <DIO_vdTogPortValue+0x16>
    1782:	3e c0       	rjmp	.+124    	; 0x1800 <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3b 83       	std	Y+3, r19	; 0x03
    178c:	2a 83       	std	Y+2, r18	; 0x02
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	e9 f0       	breq	.+58     	; 0x17d2 <DIO_vdTogPortValue+0x64>
    1798:	2a 81       	ldd	r18, Y+2	; 0x02
    179a:	3b 81       	ldd	r19, Y+3	; 0x03
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <DIO_vdTogPortValue+0x3e>
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	9b 81       	ldd	r25, Y+3	; 0x03
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <DIO_vdTogPortValue+0x54>
    17aa:	2a c0       	rjmp	.+84     	; 0x1800 <DIO_vdTogPortValue+0x92>
    17ac:	2a 81       	ldd	r18, Y+2	; 0x02
    17ae:	3b 81       	ldd	r19, Y+3	; 0x03
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	b1 f0       	breq	.+44     	; 0x17e2 <DIO_vdTogPortValue+0x74>
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	c9 f0       	breq	.+50     	; 0x17f2 <DIO_vdTogPortValue+0x84>
    17c0:	1f c0       	rjmp	.+62     	; 0x1800 <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    17c2:	ab e3       	ldi	r26, 0x3B	; 59
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	eb e3       	ldi	r30, 0x3B	; 59
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 95       	com	r24
    17ce:	8c 93       	st	X, r24
    17d0:	17 c0       	rjmp	.+46     	; 0x1800 <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    17d2:	a8 e3       	ldi	r26, 0x38	; 56
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e8 e3       	ldi	r30, 0x38	; 56
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	80 95       	com	r24
    17de:	8c 93       	st	X, r24
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    17e2:	a5 e3       	ldi	r26, 0x35	; 53
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e3       	ldi	r30, 0x35	; 53
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 95       	com	r24
    17ee:	8c 93       	st	X, r24
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    17f2:	a2 e3       	ldi	r26, 0x32	; 50
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e2 e3       	ldi	r30, 0x32	; 50
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 95       	com	r24
    17fe:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <DIO_vdTogPinValue+0x6>
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_vdTogPinValue+0x8>
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	84 30       	cpi	r24, 0x04	; 4
    1820:	08 f0       	brcs	.+2      	; 0x1824 <DIO_vdTogPinValue+0x18>
    1822:	6e c0       	rjmp	.+220    	; 0x1900 <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3c 83       	std	Y+4, r19	; 0x04
    182c:	2b 83       	std	Y+3, r18	; 0x03
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	49 f1       	breq	.+82     	; 0x188a <DIO_vdTogPinValue+0x7e>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <DIO_vdTogPinValue+0x40>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 f0       	breq	.+24     	; 0x1862 <DIO_vdTogPinValue+0x56>
    184a:	5a c0       	rjmp	.+180    	; 0x1900 <DIO_vdTogPinValue+0xf4>
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	71 f1       	breq	.+92     	; 0x18b2 <DIO_vdTogPinValue+0xa6>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	e9 f1       	breq	.+122    	; 0x18da <DIO_vdTogPinValue+0xce>
    1860:	4f c0       	rjmp	.+158    	; 0x1900 <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    1862:	ab e3       	ldi	r26, 0x3B	; 59
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_vdTogPinValue+0x74>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_vdTogPinValue+0x70>
    1884:	84 27       	eor	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	3b c0       	rjmp	.+118    	; 0x1900 <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    188a:	a8 e3       	ldi	r26, 0x38	; 56
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e8 e3       	ldi	r30, 0x38	; 56
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_vdTogPinValue+0x9c>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <DIO_vdTogPinValue+0x98>
    18ac:	84 27       	eor	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	27 c0       	rjmp	.+78     	; 0x1900 <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    18b2:	a5 e3       	ldi	r26, 0x35	; 53
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 e3       	ldi	r30, 0x35	; 53
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_vdTogPinValue+0xc4>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_vdTogPinValue+0xc0>
    18d4:	84 27       	eor	r24, r20
    18d6:	8c 93       	st	X, r24
    18d8:	13 c0       	rjmp	.+38     	; 0x1900 <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    18da:	a2 e3       	ldi	r26, 0x32	; 50
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e3       	ldi	r30, 0x32	; 50
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_vdTogPinValue+0xec>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_vdTogPinValue+0xe8>
    18fc:	84 27       	eor	r24, r20
    18fe:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <GI_vdEnableGI>:

#include "Macros.h"
#include "GI_Interface.h"
#include "GI_Private.h"
void GI_vdEnableGI()
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REGISTER, BIT_I);
    1916:	af e5       	ldi	r26, 0x5F	; 95
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ef e5       	ldi	r30, 0x5F	; 95
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	80 68       	ori	r24, 0x80	; 128
    1922:	8c 93       	st	X, r24
}
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <GI_vdDisEnableGI>:

void GI_vdDisEnableGI()
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG_REGISTER, BIT_I);
    1932:	af e5       	ldi	r26, 0x5F	; 95
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ef e5       	ldi	r30, 0x5F	; 95
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	8c 93       	st	X, r24
}
    1940:	cf 91       	pop	r28
    1942:	df 91       	pop	r29
    1944:	08 95       	ret

00001946 <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	6d 97       	sbiw	r28, 0x1d	; 29
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW); //write
    1966:	83 e0       	ldi	r24, 0x03	; 3
    1968:	61 e0       	ldi	r22, 0x01	; 1
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command); //Put on data port
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1974:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High); //Enable pin
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	89 8f       	std	Y+25, r24	; 0x19
    198c:	9a 8f       	std	Y+26, r25	; 0x1a
    198e:	ab 8f       	std	Y+27, r26	; 0x1b
    1990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	69 8d       	ldd	r22, Y+25	; 0x19
    1994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a ef       	ldi	r20, 0xFA	; 250
    19a0:	54 e4       	ldi	r21, 0x44	; 68
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8d 8b       	std	Y+21, r24	; 0x15
    19ac:	9e 8b       	std	Y+22, r25	; 0x16
    19ae:	af 8b       	std	Y+23, r26	; 0x17
    19b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <LCD_vdSendCmd+0xee>
    1a16:	88 ec       	ldi	r24, 0xC8	; 200
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1e:	89 89       	ldd	r24, Y+17	; 0x11
    1a20:	9a 89       	ldd	r25, Y+18	; 0x12
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_vdSendCmd+0xdc>
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <LCD_vdSendCmd+0xd0>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	98 8b       	std	Y+16, r25	; 0x10
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_vdSendCmd+0x118>
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); //Delay
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW); //Disable pin
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	62 e0       	ldi	r22, 0x02	; 2
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	a0 e8       	ldi	r26, 0x80	; 128
    1a76:	bf e3       	ldi	r27, 0x3F	; 63
    1a78:	8b 87       	std	Y+11, r24	; 0x0b
    1a7a:	9c 87       	std	Y+12, r25	; 0x0c
    1a7c:	ad 87       	std	Y+13, r26	; 0x0d
    1a7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a ef       	ldi	r20, 0xFA	; 250
    1a8e:	54 e4       	ldi	r21, 0x44	; 68
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8f 83       	std	Y+7, r24	; 0x07
    1a9a:	98 87       	std	Y+8, r25	; 0x08
    1a9c:	a9 87       	std	Y+9, r26	; 0x09
    1a9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    1adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <LCD_vdSendCmd+0x1dc>
    1b04:	88 ec       	ldi	r24, 0xC8	; 200
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9c 83       	std	Y+4, r25	; 0x04
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_vdSendCmd+0x1ca>
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8d 81       	ldd	r24, Y+5	; 0x05
    1b24:	9e 81       	ldd	r25, Y+6	; 0x06
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <LCD_vdSendCmd+0x1be>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_vdSendCmd+0x206>
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b54:	6d 96       	adiw	r28, 0x1d	; 29
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <LCD_vdInitialization>:


void LCD_vdInitialization(void)
{
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    1b72:	c6 54       	subi	r28, 0x46	; 70
    1b74:	d0 40       	sbci	r29, 0x00	; 0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	fe 01       	movw	r30, r28
    1b82:	ed 5b       	subi	r30, 0xBD	; 189
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a8 e4       	ldi	r26, 0x48	; 72
    1b8c:	b2 e4       	ldi	r27, 0x42	; 66
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	8e 01       	movw	r16, r28
    1b98:	01 5c       	subi	r16, 0xC1	; 193
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ed 5b       	subi	r30, 0xBD	; 189
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ff 96       	adiw	r30, 0x3f	; 63
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_vdInitialization+0x84>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e af       	std	Y+62, r25	; 0x3e
    1be6:	8d af       	std	Y+61, r24	; 0x3d
    1be8:	46 c0       	rjmp	.+140    	; 0x1c76 <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    1bea:	fe 01       	movw	r30, r28
    1bec:	ff 96       	adiw	r30, 0x3f	; 63
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	57 e4       	ldi	r21, 0x47	; 71
    1bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	64 f5       	brge	.+88     	; 0x1c5e <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c06:	fe 01       	movw	r30, r28
    1c08:	ed 5b       	subi	r30, 0xBD	; 189
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9e af       	std	Y+62, r25	; 0x3e
    1c32:	8d af       	std	Y+61, r24	; 0x3d
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <LCD_vdInitialization+0xee>
    1c36:	88 ec       	ldi	r24, 0xC8	; 200
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c af       	std	Y+60, r25	; 0x3c
    1c3c:	8b af       	std	Y+59, r24	; 0x3b
    1c3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c40:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_vdInitialization+0xdc>
    1c46:	9c af       	std	Y+60, r25	; 0x3c
    1c48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9e af       	std	Y+62, r25	; 0x3e
    1c52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	69 f7       	brne	.-38     	; 0x1c36 <LCD_vdInitialization+0xd0>
    1c5c:	16 c0       	rjmp	.+44     	; 0x1c8a <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	fe 01       	movw	r30, r28
    1c60:	ff 96       	adiw	r30, 0x3f	; 63
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9e af       	std	Y+62, r25	; 0x3e
    1c74:	8d af       	std	Y+61, r24	; 0x3d
    1c76:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c78:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c7a:	9a af       	std	Y+58, r25	; 0x3a
    1c7c:	89 af       	std	Y+57, r24	; 0x39
    1c7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_vdInitialization+0x11c>
    1c86:	9a af       	std	Y+58, r25	; 0x3a
    1c88:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    1c8a:	88 e3       	ldi	r24, 0x38	; 56
    1c8c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	a0 e2       	ldi	r26, 0x20	; 32
    1c96:	b1 e4       	ldi	r27, 0x41	; 65
    1c98:	8d ab       	std	Y+53, r24	; 0x35
    1c9a:	9e ab       	std	Y+54, r25	; 0x36
    1c9c:	af ab       	std	Y+55, r26	; 0x37
    1c9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a ef       	ldi	r20, 0xFA	; 250
    1cae:	54 e4       	ldi	r21, 0x44	; 68
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	89 ab       	std	Y+49, r24	; 0x31
    1cba:	9a ab       	std	Y+50, r25	; 0x32
    1cbc:	ab ab       	std	Y+51, r26	; 0x33
    1cbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e8       	ldi	r20, 0x80	; 128
    1cce:	5f e3       	ldi	r21, 0x3F	; 63
    1cd0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1cd4:	88 23       	and	r24, r24
    1cd6:	2c f4       	brge	.+10     	; 0x1ce2 <LCD_vdInitialization+0x17c>
		__ticks = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	98 ab       	std	Y+48, r25	; 0x30
    1cde:	8f a7       	std	Y+47, r24	; 0x2f
    1ce0:	3f c0       	rjmp	.+126    	; 0x1d60 <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    1ce2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	3f ef       	ldi	r19, 0xFF	; 255
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	57 e4       	ldi	r21, 0x47	; 71
    1cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	4c f5       	brge	.+82     	; 0x1d4c <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfa:	6d a9       	ldd	r22, Y+53	; 0x35
    1cfc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfe:	8f a9       	ldd	r24, Y+55	; 0x37
    1d00:	98 ad       	ldd	r25, Y+56	; 0x38
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e2       	ldi	r20, 0x20	; 32
    1d08:	51 e4       	ldi	r21, 0x41	; 65
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	bc 01       	movw	r22, r24
    1d14:	cd 01       	movw	r24, r26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	98 ab       	std	Y+48, r25	; 0x30
    1d20:	8f a7       	std	Y+47, r24	; 0x2f
    1d22:	0f c0       	rjmp	.+30     	; 0x1d42 <LCD_vdInitialization+0x1dc>
    1d24:	88 ec       	ldi	r24, 0xC8	; 200
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	9e a7       	std	Y+46, r25	; 0x2e
    1d2a:	8d a7       	std	Y+45, r24	; 0x2d
    1d2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	f1 f7       	brne	.-4      	; 0x1d30 <LCD_vdInitialization+0x1ca>
    1d34:	9e a7       	std	Y+46, r25	; 0x2e
    1d36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	98 ab       	std	Y+48, r25	; 0x30
    1d40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d44:	98 a9       	ldd	r25, Y+48	; 0x30
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	69 f7       	brne	.-38     	; 0x1d24 <LCD_vdInitialization+0x1be>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d50:	8b a9       	ldd	r24, Y+51	; 0x33
    1d52:	9c a9       	ldd	r25, Y+52	; 0x34
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	98 ab       	std	Y+48, r25	; 0x30
    1d5e:	8f a7       	std	Y+47, r24	; 0x2f
    1d60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d62:	98 a9       	ldd	r25, Y+48	; 0x30
    1d64:	9c a7       	std	Y+44, r25	; 0x2c
    1d66:	8b a7       	std	Y+43, r24	; 0x2b
    1d68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_vdInitialization+0x206>
    1d70:	9c a7       	std	Y+44, r25	; 0x2c
    1d72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    1d74:	8f e0       	ldi	r24, 0x0F	; 15
    1d76:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e2       	ldi	r26, 0x20	; 32
    1d80:	b1 e4       	ldi	r27, 0x41	; 65
    1d82:	8f a3       	std	Y+39, r24	; 0x27
    1d84:	98 a7       	std	Y+40, r25	; 0x28
    1d86:	a9 a7       	std	Y+41, r26	; 0x29
    1d88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	8b a3       	std	Y+35, r24	; 0x23
    1da4:	9c a3       	std	Y+36, r25	; 0x24
    1da6:	ad a3       	std	Y+37, r26	; 0x25
    1da8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1daa:	6b a1       	ldd	r22, Y+35	; 0x23
    1dac:	7c a1       	ldd	r23, Y+36	; 0x24
    1dae:	8d a1       	ldd	r24, Y+37	; 0x25
    1db0:	9e a1       	ldd	r25, Y+38	; 0x26
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_vdInitialization+0x266>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    1dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dce:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6f a1       	ldd	r22, Y+39	; 0x27
    1de6:	78 a5       	ldd	r23, Y+40	; 0x28
    1de8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_vdInitialization+0x2c6>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	98 a3       	std	Y+32, r25	; 0x20
    1e14:	8f 8f       	std	Y+31, r24	; 0x1f
    1e16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e18:	98 a1       	ldd	r25, Y+32	; 0x20
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_vdInitialization+0x2b4>
    1e1e:	98 a3       	std	Y+32, r25	; 0x20
    1e20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	9a a3       	std	Y+34, r25	; 0x22
    1e2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_vdInitialization+0x2a8>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	6b a1       	ldd	r22, Y+35	; 0x23
    1e38:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
    1e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e50:	8d 8f       	std	Y+29, r24	; 0x1d
    1e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_vdInitialization+0x2f0>
    1e5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e2       	ldi	r26, 0x20	; 32
    1e6a:	b1 e4       	ldi	r27, 0x41	; 65
    1e6c:	89 8f       	std	Y+25, r24	; 0x19
    1e6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e70:	ab 8f       	std	Y+27, r26	; 0x1b
    1e72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	69 8d       	ldd	r22, Y+25	; 0x19
    1e76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8d 8b       	std	Y+21, r24	; 0x15
    1e8e:	9e 8b       	std	Y+22, r25	; 0x16
    1e90:	af 8b       	std	Y+23, r26	; 0x17
    1e92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <LCD_vdInitialization+0x350>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    1eb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eba:	8f 89       	ldd	r24, Y+23	; 0x17
    1ebc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <LCD_vdInitialization+0x3b0>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a 8b       	std	Y+18, r25	; 0x12
    1efe:	89 8b       	std	Y+17, r24	; 0x11
    1f00:	89 89       	ldd	r24, Y+17	; 0x11
    1f02:	9a 89       	ldd	r25, Y+18	; 0x12
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_vdInitialization+0x39e>
    1f08:	9a 8b       	std	Y+18, r25	; 0x12
    1f0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <LCD_vdInitialization+0x392>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6d 89       	ldd	r22, Y+21	; 0x15
    1f22:	7e 89       	ldd	r23, Y+22	; 0x16
    1f24:	8f 89       	ldd	r24, Y+23	; 0x17
    1f26:	98 8d       	ldd	r25, Y+24	; 0x18
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9c 8b       	std	Y+20, r25	; 0x14
    1f32:	8b 8b       	std	Y+19, r24	; 0x13
    1f34:	8b 89       	ldd	r24, Y+19	; 0x13
    1f36:	9c 89       	ldd	r25, Y+20	; 0x14
    1f38:	98 8b       	std	Y+16, r25	; 0x10
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	98 89       	ldd	r25, Y+16	; 0x10
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_vdInitialization+0x3da>
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    1f48:	86 e0       	ldi	r24, 0x06	; 6
    1f4a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 e2       	ldi	r26, 0x20	; 32
    1f54:	b1 e4       	ldi	r27, 0x41	; 65
    1f56:	8b 87       	std	Y+11, r24	; 0x0b
    1f58:	9c 87       	std	Y+12, r25	; 0x0c
    1f5a:	ad 87       	std	Y+13, r26	; 0x0d
    1f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	98 87       	std	Y+8, r25	; 0x08
    1f7a:	a9 87       	std	Y+9, r26	; 0x09
    1f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	78 85       	ldd	r23, Y+8	; 0x08
    1f82:	89 85       	ldd	r24, Y+9	; 0x09
    1f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_vdInitialization+0x43a>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_vdInitialization+0x49a>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_vdInitialization+0x488>
    1ff2:	9c 83       	std	Y+4, r25	; 0x04
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_vdInitialization+0x47c>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_vdInitialization+0x4c4>
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2032:	ca 5b       	subi	r28, 0xBA	; 186
    2034:	df 4f       	sbci	r29, 0xFF	; 255
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	1f 91       	pop	r17
    2046:	0f 91       	pop	r16
    2048:	08 95       	ret

0000204a <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	6d 97       	sbiw	r28, 0x1d	; 29
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    206a:	83 e0       	ldi	r24, 0x03	; 3
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2078:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    207c:	83 e0       	ldi	r24, 0x03	; 3
    207e:	62 e0       	ldi	r22, 0x02	; 2
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a0 e8       	ldi	r26, 0x80	; 128
    208c:	bf e3       	ldi	r27, 0x3F	; 63
    208e:	89 8f       	std	Y+25, r24	; 0x19
    2090:	9a 8f       	std	Y+26, r25	; 0x1a
    2092:	ab 8f       	std	Y+27, r26	; 0x1b
    2094:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2096:	69 8d       	ldd	r22, Y+25	; 0x19
    2098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    209c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	4a ef       	ldi	r20, 0xFA	; 250
    20a4:	54 e4       	ldi	r21, 0x44	; 68
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8d 8b       	std	Y+21, r24	; 0x15
    20b0:	9e 8b       	std	Y+22, r25	; 0x16
    20b2:	af 8b       	std	Y+23, r26	; 0x17
    20b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b6:	6d 89       	ldd	r22, Y+21	; 0x15
    20b8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ba:	8f 89       	ldd	r24, Y+23	; 0x17
    20bc:	98 8d       	ldd	r25, Y+24	; 0x18
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e8       	ldi	r20, 0x80	; 128
    20c4:	5f e3       	ldi	r21, 0x3F	; 63
    20c6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    20ca:	88 23       	and	r24, r24
    20cc:	2c f4       	brge	.+10     	; 0x20d8 <LCD_vdSendChar+0x8e>
		__ticks = 1;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	3f c0       	rjmp	.+126    	; 0x2156 <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    20d8:	6d 89       	ldd	r22, Y+21	; 0x15
    20da:	7e 89       	ldd	r23, Y+22	; 0x16
    20dc:	8f 89       	ldd	r24, Y+23	; 0x17
    20de:	98 8d       	ldd	r25, Y+24	; 0x18
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	3f ef       	ldi	r19, 0xFF	; 255
    20e4:	4f e7       	ldi	r20, 0x7F	; 127
    20e6:	57 e4       	ldi	r21, 0x47	; 71
    20e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    20ec:	18 16       	cp	r1, r24
    20ee:	4c f5       	brge	.+82     	; 0x2142 <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f0:	69 8d       	ldd	r22, Y+25	; 0x19
    20f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e2       	ldi	r20, 0x20	; 32
    20fe:	51 e4       	ldi	r21, 0x41	; 65
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	9c 8b       	std	Y+20, r25	; 0x14
    2116:	8b 8b       	std	Y+19, r24	; 0x13
    2118:	0f c0       	rjmp	.+30     	; 0x2138 <LCD_vdSendChar+0xee>
    211a:	88 ec       	ldi	r24, 0xC8	; 200
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9a 8b       	std	Y+18, r25	; 0x12
    2120:	89 8b       	std	Y+17, r24	; 0x11
    2122:	89 89       	ldd	r24, Y+17	; 0x11
    2124:	9a 89       	ldd	r25, Y+18	; 0x12
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_vdSendChar+0xdc>
    212a:	9a 8b       	std	Y+18, r25	; 0x12
    212c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212e:	8b 89       	ldd	r24, Y+19	; 0x13
    2130:	9c 89       	ldd	r25, Y+20	; 0x14
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	9c 8b       	std	Y+20, r25	; 0x14
    2136:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	69 f7       	brne	.-38     	; 0x211a <LCD_vdSendChar+0xd0>
    2140:	14 c0       	rjmp	.+40     	; 0x216a <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	98 8b       	std	Y+16, r25	; 0x10
    215c:	8f 87       	std	Y+15, r24	; 0x0f
    215e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2160:	98 89       	ldd	r25, Y+16	; 0x10
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_vdSendChar+0x118>
    2166:	98 8b       	std	Y+16, r25	; 0x10
    2168:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8b 87       	std	Y+11, r24	; 0x0b
    217e:	9c 87       	std	Y+12, r25	; 0x0c
    2180:	ad 87       	std	Y+13, r26	; 0x0d
    2182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	8f 83       	std	Y+7, r24	; 0x07
    219e:	98 87       	std	Y+8, r25	; 0x08
    21a0:	a9 87       	std	Y+9, r26	; 0x09
    21a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_vdSendChar+0x17c>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_vdSendChar+0x1dc>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_vdSendChar+0x1ca>
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_vdSendChar+0x1be>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_vdSendChar+0x206>
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2258:	6d 96       	adiw	r28, 0x1d	; 29
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <LCD_vdWriteString>:


void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <LCD_vdWriteString+0x6>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	0a c0       	rjmp	.+20     	; 0x228e <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    227a:	e9 81       	ldd	r30, Y+1	; 0x01
    227c:	fa 81       	ldd	r31, Y+2	; 0x02
    227e:	80 81       	ld	r24, Z
    2280:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_vdSendChar>
		LOC_u8Ptr++;
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	9a 83       	std	Y+2, r25	; 0x02
    228c:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	80 81       	ld	r24, Z
    2294:	88 23       	and	r24, r24
    2296:	89 f7       	brne	.-30     	; 0x227a <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LCD_vdStringPostion+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_vdStringPostion+0x8>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	6a 83       	std	Y+2, r22	; 0x02
    22b2:	5c 83       	std	Y+4, r21	; 0x04
    22b4:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 23       	and	r24, r24
    22ba:	31 f4       	brne	.+12     	; 0x22c8 <LCD_vdStringPostion+0x26>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	8f 70       	andi	r24, 0x0F	; 15
    22c0:	80 68       	ori	r24, 0x80	; 128
    22c2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    22c6:	0b c0       	rjmp	.+22     	; 0x22de <LCD_vdStringPostion+0x3c>
	else if (row == 1 && pos<16)
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	41 f4       	brne	.+16     	; 0x22de <LCD_vdStringPostion+0x3c>
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 31       	cpi	r24, 0x10	; 16
    22d2:	28 f4       	brcc	.+10     	; 0x22de <LCD_vdStringPostion+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	8f 70       	andi	r24, 0x0F	; 15
    22d8:	80 6c       	ori	r24, 0xC0	; 192
    22da:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	0e 94 35 11 	call	0x226a	; 0x226a <LCD_vdWriteString>
}
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_vdClear>:

void LCD_vdClear()
{
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <LCD_vdSendDataoCGRAM+0x6>
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	9b 83       	std	Y+3, r25	; 0x03
    2316:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    2318:	80 e4       	ldi	r24, 0x40	; 64
    231a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	0d c0       	rjmp	.+26     	; 0x233c <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    2322:	ea 81       	ldd	r30, Y+2	; 0x02
    2324:	fb 81       	ldd	r31, Y+3	; 0x03
    2326:	80 81       	ld	r24, Z
    2328:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_vdSendChar>
		ptr++;
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	9b 81       	ldd	r25, Y+3	; 0x03
    2330:	01 96       	adiw	r24, 0x01	; 1
    2332:	9b 83       	std	Y+3, r25	; 0x03
    2334:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	86 30       	cpi	r24, 0x06	; 6
    2340:	80 f3       	brcs	.-32     	; 0x2322 <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LCD_vdGotoDDRAM+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 23       	and	r24, r24
    2360:	49 f4       	brne	.+18     	; 0x2374 <LCD_vdGotoDDRAM+0x26>
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	80 31       	cpi	r24, 0x10	; 16
    2366:	30 f4       	brcc	.+12     	; 0x2374 <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	8f 70       	andi	r24, 0x0F	; 15
    236c:	80 68       	ori	r24, 0x80	; 128
    236e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
    2372:	0b c0       	rjmp	.+22     	; 0x238a <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	41 f4       	brne	.+16     	; 0x238a <LCD_vdGotoDDRAM+0x3c>
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	80 31       	cpi	r24, 0x10	; 16
    237e:	28 f4       	brcc	.+10     	; 0x238a <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	8f 70       	andi	r24, 0x0F	; 15
    2384:	80 6c       	ori	r24, 0xC0	; 192
    2386:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <LCD_vdWriteNum>:
				LCD_vdSendChar(reminder+'0');
				reverse/=10;
			}
}*/
void LCD_vdWriteNum(u32 num)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	29 97       	sbiw	r28, 0x09	; 9
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	6e 83       	std	Y+6, r22	; 0x06
    23aa:	7f 83       	std	Y+7, r23	; 0x07
    23ac:	88 87       	std	Y+8, r24	; 0x08
    23ae:	99 87       	std	Y+9, r25	; 0x09
	u32 reverse=0;
    23b0:	1a 82       	std	Y+2, r1	; 0x02
    23b2:	1b 82       	std	Y+3, r1	; 0x03
    23b4:	1c 82       	std	Y+4, r1	; 0x04
    23b6:	1d 82       	std	Y+5, r1	; 0x05
	u8 reminder=0;
    23b8:	19 82       	std	Y+1, r1	; 0x01
	if(num>=10)
    23ba:	8e 81       	ldd	r24, Y+6	; 0x06
    23bc:	9f 81       	ldd	r25, Y+7	; 0x07
    23be:	a8 85       	ldd	r26, Y+8	; 0x08
    23c0:	b9 85       	ldd	r27, Y+9	; 0x09
    23c2:	8a 30       	cpi	r24, 0x0A	; 10
    23c4:	91 05       	cpc	r25, r1
    23c6:	a1 05       	cpc	r26, r1
    23c8:	b1 05       	cpc	r27, r1
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <LCD_vdWriteNum+0x3a>
    23cc:	75 c0       	rjmp	.+234    	; 0x24b8 <LCD_vdWriteNum+0x124>
    23ce:	3c c0       	rjmp	.+120    	; 0x2448 <LCD_vdWriteNum+0xb4>
	{
		while(num !=0)
		{
			reminder = num%10;
    23d0:	8e 81       	ldd	r24, Y+6	; 0x06
    23d2:	9f 81       	ldd	r25, Y+7	; 0x07
    23d4:	a8 85       	ldd	r26, Y+8	; 0x08
    23d6:	b9 85       	ldd	r27, Y+9	; 0x09
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse*10+reminder;
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	ac 81       	ldd	r26, Y+4	; 0x04
    23f4:	bd 81       	ldd	r27, Y+5	; 0x05
    23f6:	2a e0       	ldi	r18, 0x0A	; 10
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	bc 01       	movw	r22, r24
    2400:	cd 01       	movw	r24, r26
    2402:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsi3>
    2406:	9b 01       	movw	r18, r22
    2408:	ac 01       	movw	r20, r24
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	a4 1f       	adc	r26, r20
    241a:	b5 1f       	adc	r27, r21
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	9b 83       	std	Y+3, r25	; 0x03
    2420:	ac 83       	std	Y+4, r26	; 0x04
    2422:	bd 83       	std	Y+5, r27	; 0x05
			num/=10;
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	9f 81       	ldd	r25, Y+7	; 0x07
    2428:	a8 85       	ldd	r26, Y+8	; 0x08
    242a:	b9 85       	ldd	r27, Y+9	; 0x09
    242c:	2a e0       	ldi	r18, 0x0A	; 10
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	50 e0       	ldi	r21, 0x00	; 0
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
    243c:	da 01       	movw	r26, r20
    243e:	c9 01       	movw	r24, r18
    2440:	8e 83       	std	Y+6, r24	; 0x06
    2442:	9f 83       	std	Y+7, r25	; 0x07
    2444:	a8 87       	std	Y+8, r26	; 0x08
    2446:	b9 87       	std	Y+9, r27	; 0x09
{
	u32 reverse=0;
	u8 reminder=0;
	if(num>=10)
	{
		while(num !=0)
    2448:	8e 81       	ldd	r24, Y+6	; 0x06
    244a:	9f 81       	ldd	r25, Y+7	; 0x07
    244c:	a8 85       	ldd	r26, Y+8	; 0x08
    244e:	b9 85       	ldd	r27, Y+9	; 0x09
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	a1 05       	cpc	r26, r1
    2454:	b1 05       	cpc	r27, r1
    2456:	09 f0       	breq	.+2      	; 0x245a <LCD_vdWriteNum+0xc6>
    2458:	bb cf       	rjmp	.-138    	; 0x23d0 <LCD_vdWriteNum+0x3c>
    245a:	25 c0       	rjmp	.+74     	; 0x24a6 <LCD_vdWriteNum+0x112>
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
		{
			reminder = reverse%10;
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	ac 81       	ldd	r26, Y+4	; 0x04
    2462:	bd 81       	ldd	r27, Y+5	; 0x05
    2464:	2a e0       	ldi	r18, 0x0A	; 10
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	89 83       	std	Y+1, r24	; 0x01
			LCD_vdSendChar(reminder+'0');
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	80 5d       	subi	r24, 0xD0	; 208
    247e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_vdSendChar>
			reverse/=10;
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	ac 81       	ldd	r26, Y+4	; 0x04
    2488:	bd 81       	ldd	r27, Y+5	; 0x05
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
    249a:	da 01       	movw	r26, r20
    249c:	c9 01       	movw	r24, r18
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	9b 83       	std	Y+3, r25	; 0x03
    24a2:	ac 83       	std	Y+4, r26	; 0x04
    24a4:	bd 83       	std	Y+5, r27	; 0x05
		{
			reminder = num%10;
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	9b 81       	ldd	r25, Y+3	; 0x03
    24aa:	ac 81       	ldd	r26, Y+4	; 0x04
    24ac:	bd 81       	ldd	r27, Y+5	; 0x05
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	a1 05       	cpc	r26, r1
    24b2:	b1 05       	cpc	r27, r1
    24b4:	99 f6       	brne	.-90     	; 0x245c <LCD_vdWriteNum+0xc8>
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <LCD_vdWriteNum+0x12c>
			reverse/=10;
		}
	}
	else
	{
		LCD_vdSendChar(num+'0');
    24b8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ba:	80 5d       	subi	r24, 0xD0	; 208
    24bc:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_vdSendChar>
	}
}
    24c0:	29 96       	adiw	r28, 0x09	; 9
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_vdWriteFloatNum>:

void LCD_vdWriteFloatNum(f32 num)
{
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	2a 97       	sbiw	r28, 0x0a	; 10
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	6f 83       	std	Y+7, r22	; 0x07
    24f0:	78 87       	std	Y+8, r23	; 0x08
    24f2:	89 87       	std	Y+9, r24	; 0x09
    24f4:	9a 87       	std	Y+10, r25	; 0x0a
	u16 floatNum=0, number=0, it=0;
    24f6:	1e 82       	std	Y+6, r1	; 0x06
    24f8:	1d 82       	std	Y+5, r1	; 0x05
    24fa:	1c 82       	std	Y+4, r1	; 0x04
    24fc:	1b 82       	std	Y+3, r1	; 0x03
    24fe:	1a 82       	std	Y+2, r1	; 0x02
    2500:	19 82       	std	Y+1, r1	; 0x01
	if(num == (u32)num)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	2f 81       	ldd	r18, Y+7	; 0x07
    2524:	38 85       	ldd	r19, Y+8	; 0x08
    2526:	49 85       	ldd	r20, Y+9	; 0x09
    2528:	5a 85       	ldd	r21, Y+10	; 0x0a
    252a:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    252e:	88 23       	and	r24, r24
    2530:	31 f5       	brne	.+76     	; 0x257e <LCD_vdWriteFloatNum+0xac>
	{
		LCD_vdWriteNum(num);
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_vdWriteNum>
    254a:	6d c0       	rjmp	.+218    	; 0x2626 <LCD_vdWriteFloatNum+0x154>
	}
	else
	{
		while(num != (u32)num)
		{
			number= num*10;
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e2       	ldi	r20, 0x20	; 32
    255a:	51 e4       	ldi	r21, 0x41	; 65
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
			it++;
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_vdWriteNum(num);
	}
	else
	{
		while(num != (u32)num)
    257e:	6f 81       	ldd	r22, Y+7	; 0x07
    2580:	78 85       	ldd	r23, Y+8	; 0x08
    2582:	89 85       	ldd	r24, Y+9	; 0x09
    2584:	9a 85       	ldd	r25, Y+10	; 0x0a
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__floatunsisf>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	bc 01       	movw	r22, r24
    259c:	cd 01       	movw	r24, r26
    259e:	2f 81       	ldd	r18, Y+7	; 0x07
    25a0:	38 85       	ldd	r19, Y+8	; 0x08
    25a2:	49 85       	ldd	r20, Y+9	; 0x09
    25a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    25a6:	0e 94 49 03 	call	0x692	; 0x692 <__nesf2>
    25aa:	88 23       	and	r24, r24
    25ac:	79 f6       	brne	.-98     	; 0x254c <LCD_vdWriteFloatNum+0x7a>
		{
			number= num*10;
			it++;
		}
		LCD_vdWriteNum(num);
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	bc 01       	movw	r22, r24
    25c0:	cd 01       	movw	r24, r26
    25c2:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_vdWriteNum>
		LCD_vdSendChar(',');
    25c6:	8c e2       	ldi	r24, 0x2C	; 44
    25c8:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_vdSendChar>
		floatNum=number-(((u32)num)*it*10);
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	7b 01       	movw	r14, r22
    25da:	8c 01       	movw	r16, r24
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	9c 01       	movw	r18, r24
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	c8 01       	movw	r24, r16
    25e8:	b7 01       	movw	r22, r14
    25ea:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsi3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	2a e0       	ldi	r18, 0x0A	; 10
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__mulsi3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9c 01       	movw	r18, r24
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	82 1b       	sub	r24, r18
    260e:	93 0b       	sbc	r25, r19
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vdWriteNum(floatNum);
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	cc 01       	movw	r24, r24
    261a:	a0 e0       	ldi	r26, 0x00	; 0
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 ca 11 	call	0x2394	; 0x2394 <LCD_vdWriteNum>

	}
}
    2626:	2a 96       	adiw	r28, 0x0a	; 10
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	08 95       	ret

00002640 <LCD_vdReturnHome>:

void LCD_vdReturnHome()
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (LCD_U8_RETURN_HOME);
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <LCD_vdSendCmd>

}
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_u8BusyFlag>:

void LCD_u8BusyFlag()
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPintDirection(LCD_U8_DATA_PORT,PIN7, PIN_INPUT);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	67 e0       	ldi	r22, 0x07	; 7
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_vdSetPintDirection>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN, PIN_High); //Read
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	62 e0       	ldi	r22, 0x02	; 2
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPortDirection(PortB, PORT_OUTPUT);
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	6f ef       	ldi	r22, 0xFF	; 255
    2688:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_vdSetPortDirection>
    268c:	0f c0       	rjmp	.+30     	; 0x26ac <LCD_u8BusyFlag+0x58>
	while(DIO_u8GetPinValue(LCD_U8_DATA_PORT,PIN7)==1)
	{
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    268e:	83 e0       	ldi	r24, 0x03	; 3
    2690:	62 e0       	ldi	r22, 0x02	; 2
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	62 e0       	ldi	r22, 0x02	; 2
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
		DIO_vdSetPinValue(PortB, PIN0 ,PIN_High);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	60 e0       	ldi	r22, 0x00	; 0
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	DIO_vdSetPintDirection(LCD_U8_DATA_PORT,PIN7, PIN_INPUT);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN, PIN_High); //Read
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
	DIO_vdSetPortDirection(PortB, PORT_OUTPUT);
	while(DIO_u8GetPinValue(LCD_U8_DATA_PORT,PIN7)==1)
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	67 e0       	ldi	r22, 0x07	; 7
    26b0:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_u8GetPinValue>
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	59 f3       	breq	.-42     	; 0x268e <LCD_u8BusyFlag+0x3a>
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
		DIO_vdSetPinValue(PortB, PIN0 ,PIN_High);
		//_delay_ms(1000);
	}
	DIO_vdSetPinValue(PortB, PIN0 ,PIN_LOW);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 25 0a 	call	0x144a	; 0x144a <DIO_vdSetPinValue>
	//return returned;
}
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <__mulsi3>:
    26c8:	62 9f       	mul	r22, r18
    26ca:	d0 01       	movw	r26, r0
    26cc:	73 9f       	mul	r23, r19
    26ce:	f0 01       	movw	r30, r0
    26d0:	82 9f       	mul	r24, r18
    26d2:	e0 0d       	add	r30, r0
    26d4:	f1 1d       	adc	r31, r1
    26d6:	64 9f       	mul	r22, r20
    26d8:	e0 0d       	add	r30, r0
    26da:	f1 1d       	adc	r31, r1
    26dc:	92 9f       	mul	r25, r18
    26de:	f0 0d       	add	r31, r0
    26e0:	83 9f       	mul	r24, r19
    26e2:	f0 0d       	add	r31, r0
    26e4:	74 9f       	mul	r23, r20
    26e6:	f0 0d       	add	r31, r0
    26e8:	65 9f       	mul	r22, r21
    26ea:	f0 0d       	add	r31, r0
    26ec:	99 27       	eor	r25, r25
    26ee:	72 9f       	mul	r23, r18
    26f0:	b0 0d       	add	r27, r0
    26f2:	e1 1d       	adc	r30, r1
    26f4:	f9 1f       	adc	r31, r25
    26f6:	63 9f       	mul	r22, r19
    26f8:	b0 0d       	add	r27, r0
    26fa:	e1 1d       	adc	r30, r1
    26fc:	f9 1f       	adc	r31, r25
    26fe:	bd 01       	movw	r22, r26
    2700:	cf 01       	movw	r24, r30
    2702:	11 24       	eor	r1, r1
    2704:	08 95       	ret

00002706 <__udivmodsi4>:
    2706:	a1 e2       	ldi	r26, 0x21	; 33
    2708:	1a 2e       	mov	r1, r26
    270a:	aa 1b       	sub	r26, r26
    270c:	bb 1b       	sub	r27, r27
    270e:	fd 01       	movw	r30, r26
    2710:	0d c0       	rjmp	.+26     	; 0x272c <__udivmodsi4_ep>

00002712 <__udivmodsi4_loop>:
    2712:	aa 1f       	adc	r26, r26
    2714:	bb 1f       	adc	r27, r27
    2716:	ee 1f       	adc	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	a2 17       	cp	r26, r18
    271c:	b3 07       	cpc	r27, r19
    271e:	e4 07       	cpc	r30, r20
    2720:	f5 07       	cpc	r31, r21
    2722:	20 f0       	brcs	.+8      	; 0x272c <__udivmodsi4_ep>
    2724:	a2 1b       	sub	r26, r18
    2726:	b3 0b       	sbc	r27, r19
    2728:	e4 0b       	sbc	r30, r20
    272a:	f5 0b       	sbc	r31, r21

0000272c <__udivmodsi4_ep>:
    272c:	66 1f       	adc	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	88 1f       	adc	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	1a 94       	dec	r1
    2736:	69 f7       	brne	.-38     	; 0x2712 <__udivmodsi4_loop>
    2738:	60 95       	com	r22
    273a:	70 95       	com	r23
    273c:	80 95       	com	r24
    273e:	90 95       	com	r25
    2740:	9b 01       	movw	r18, r22
    2742:	ac 01       	movw	r20, r24
    2744:	bd 01       	movw	r22, r26
    2746:	cf 01       	movw	r24, r30
    2748:	08 95       	ret

0000274a <__prologue_saves__>:
    274a:	2f 92       	push	r2
    274c:	3f 92       	push	r3
    274e:	4f 92       	push	r4
    2750:	5f 92       	push	r5
    2752:	6f 92       	push	r6
    2754:	7f 92       	push	r7
    2756:	8f 92       	push	r8
    2758:	9f 92       	push	r9
    275a:	af 92       	push	r10
    275c:	bf 92       	push	r11
    275e:	cf 92       	push	r12
    2760:	df 92       	push	r13
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	ca 1b       	sub	r28, r26
    2774:	db 0b       	sbc	r29, r27
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	09 94       	ijmp

00002782 <__epilogue_restores__>:
    2782:	2a 88       	ldd	r2, Y+18	; 0x12
    2784:	39 88       	ldd	r3, Y+17	; 0x11
    2786:	48 88       	ldd	r4, Y+16	; 0x10
    2788:	5f 84       	ldd	r5, Y+15	; 0x0f
    278a:	6e 84       	ldd	r6, Y+14	; 0x0e
    278c:	7d 84       	ldd	r7, Y+13	; 0x0d
    278e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2790:	9b 84       	ldd	r9, Y+11	; 0x0b
    2792:	aa 84       	ldd	r10, Y+10	; 0x0a
    2794:	b9 84       	ldd	r11, Y+9	; 0x09
    2796:	c8 84       	ldd	r12, Y+8	; 0x08
    2798:	df 80       	ldd	r13, Y+7	; 0x07
    279a:	ee 80       	ldd	r14, Y+6	; 0x06
    279c:	fd 80       	ldd	r15, Y+5	; 0x05
    279e:	0c 81       	ldd	r16, Y+4	; 0x04
    27a0:	1b 81       	ldd	r17, Y+3	; 0x03
    27a2:	aa 81       	ldd	r26, Y+2	; 0x02
    27a4:	b9 81       	ldd	r27, Y+1	; 0x01
    27a6:	ce 0f       	add	r28, r30
    27a8:	d1 1d       	adc	r29, r1
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	ed 01       	movw	r28, r26
    27b6:	08 95       	ret

000027b8 <_exit>:
    27b8:	f8 94       	cli

000027ba <__stop_program>:
    27ba:	ff cf       	rjmp	.-2      	; 0x27ba <__stop_program>
