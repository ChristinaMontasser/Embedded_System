
LCDProj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000254e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000254e  000025c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000171c  00000000  00000000  000026e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ad1  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000048d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020f  00000000  00000000  00004a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000250d  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001424  00000000  00000000  000071b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a7  00000000  00000000  000085d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000977c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d1  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000926  00000000  00000000  00009c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a553  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c3 06 	call	0xd86	; 0xd86 <main>
      7a:	0c 94 a5 12 	jmp	0x254a	; 0x254a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 a1 03 	call	0x742	; 0x742 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 01 04 	call	0x802	; 0x802 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 01 04 	call	0x802	; 0x802 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

00000682 <__nesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__nesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__nesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__nesf2+0x58>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

000006e2 <__gtsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gtsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gtsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gtsf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

00000742 <__gesf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__gesf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__gesf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__gesf2+0x58>
     798:	8f ef       	ldi	r24, 0xFF	; 255
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

000007a2 <__ltsf2>:
     7a2:	a8 e1       	ldi	r26, 0x18	; 24
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__prologue_saves__+0x18>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	2d 83       	std	Y+5, r18	; 0x05
     7b8:	3e 83       	std	Y+6, r19	; 0x06
     7ba:	4f 83       	std	Y+7, r20	; 0x07
     7bc:	58 87       	std	Y+8, r21	; 0x08
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	e8 2e       	mov	r14, r24
     7c2:	f1 2c       	mov	r15, r1
     7c4:	ec 0e       	add	r14, r28
     7c6:	fd 1e       	adc	r15, r29
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	b7 01       	movw	r22, r14
     7ce:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     7d2:	8e 01       	movw	r16, r28
     7d4:	0f 5e       	subi	r16, 0xEF	; 239
     7d6:	1f 4f       	sbci	r17, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	05 96       	adiw	r24, 0x05	; 5
     7dc:	b8 01       	movw	r22, r16
     7de:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     7e2:	89 85       	ldd	r24, Y+9	; 0x09
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	40 f0       	brcs	.+16     	; 0x7f8 <__ltsf2+0x56>
     7e8:	89 89       	ldd	r24, Y+17	; 0x11
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	28 f0       	brcs	.+10     	; 0x7f8 <__ltsf2+0x56>
     7ee:	c7 01       	movw	r24, r14
     7f0:	b8 01       	movw	r22, r16
     7f2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fpcmp_parts_f>
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <__ltsf2+0x58>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	68 96       	adiw	r28, 0x18	; 24
     7fc:	e6 e0       	ldi	r30, 0x06	; 6
     7fe:	0c 94 96 12 	jmp	0x252c	; 0x252c <__epilogue_restores__+0x18>

00000802 <__fixsfsi>:
     802:	ac e0       	ldi	r26, 0x0C	; 12
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	e7 e0       	ldi	r30, 0x07	; 7
     808:	f4 e0       	ldi	r31, 0x04	; 4
     80a:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__prologue_saves__+0x20>
     80e:	69 83       	std	Y+1, r22	; 0x01
     810:	7a 83       	std	Y+2, r23	; 0x02
     812:	8b 83       	std	Y+3, r24	; 0x03
     814:	9c 83       	std	Y+4, r25	; 0x04
     816:	ce 01       	movw	r24, r28
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	be 01       	movw	r22, r28
     81c:	6b 5f       	subi	r22, 0xFB	; 251
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__unpack_f>
     824:	8d 81       	ldd	r24, Y+5	; 0x05
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	61 f1       	breq	.+88     	; 0x882 <__stack+0x23>
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	50 f1       	brcs	.+84     	; 0x882 <__stack+0x23>
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	21 f4       	brne	.+8      	; 0x83a <__fixsfsi+0x38>
     832:	8e 81       	ldd	r24, Y+6	; 0x06
     834:	88 23       	and	r24, r24
     836:	51 f1       	breq	.+84     	; 0x88c <__stack+0x2d>
     838:	2e c0       	rjmp	.+92     	; 0x896 <__stack+0x37>
     83a:	2f 81       	ldd	r18, Y+7	; 0x07
     83c:	38 85       	ldd	r19, Y+8	; 0x08
     83e:	37 fd       	sbrc	r19, 7
     840:	20 c0       	rjmp	.+64     	; 0x882 <__stack+0x23>
     842:	6e 81       	ldd	r22, Y+6	; 0x06
     844:	2f 31       	cpi	r18, 0x1F	; 31
     846:	31 05       	cpc	r19, r1
     848:	1c f0       	brlt	.+6      	; 0x850 <__fixsfsi+0x4e>
     84a:	66 23       	and	r22, r22
     84c:	f9 f0       	breq	.+62     	; 0x88c <__stack+0x2d>
     84e:	23 c0       	rjmp	.+70     	; 0x896 <__stack+0x37>
     850:	8e e1       	ldi	r24, 0x1E	; 30
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	82 1b       	sub	r24, r18
     856:	93 0b       	sbc	r25, r19
     858:	29 85       	ldd	r18, Y+9	; 0x09
     85a:	3a 85       	ldd	r19, Y+10	; 0x0a
     85c:	4b 85       	ldd	r20, Y+11	; 0x0b
     85e:	5c 85       	ldd	r21, Y+12	; 0x0c
     860:	04 c0       	rjmp	.+8      	; 0x86a <__stack+0xb>
     862:	56 95       	lsr	r21
     864:	47 95       	ror	r20
     866:	37 95       	ror	r19
     868:	27 95       	ror	r18
     86a:	8a 95       	dec	r24
     86c:	d2 f7       	brpl	.-12     	; 0x862 <__stack+0x3>
     86e:	66 23       	and	r22, r22
     870:	b1 f0       	breq	.+44     	; 0x89e <__stack+0x3f>
     872:	50 95       	com	r21
     874:	40 95       	com	r20
     876:	30 95       	com	r19
     878:	21 95       	neg	r18
     87a:	3f 4f       	sbci	r19, 0xFF	; 255
     87c:	4f 4f       	sbci	r20, 0xFF	; 255
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	0e c0       	rjmp	.+28     	; 0x89e <__stack+0x3f>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	09 c0       	rjmp	.+18     	; 0x89e <__stack+0x3f>
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	3f ef       	ldi	r19, 0xFF	; 255
     890:	4f ef       	ldi	r20, 0xFF	; 255
     892:	5f e7       	ldi	r21, 0x7F	; 127
     894:	04 c0       	rjmp	.+8      	; 0x89e <__stack+0x3f>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e8       	ldi	r21, 0x80	; 128
     89e:	b9 01       	movw	r22, r18
     8a0:	ca 01       	movw	r24, r20
     8a2:	2c 96       	adiw	r28, 0x0c	; 12
     8a4:	e2 e0       	ldi	r30, 0x02	; 2
     8a6:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__epilogue_restores__+0x20>

000008aa <__floatunsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__prologue_saves__+0x10>
     8b6:	7b 01       	movw	r14, r22
     8b8:	8c 01       	movw	r16, r24
     8ba:	61 15       	cp	r22, r1
     8bc:	71 05       	cpc	r23, r1
     8be:	81 05       	cpc	r24, r1
     8c0:	91 05       	cpc	r25, r1
     8c2:	19 f4       	brne	.+6      	; 0x8ca <__floatunsisf+0x20>
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	60 c0       	rjmp	.+192    	; 0x98a <__floatunsisf+0xe0>
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	8e e1       	ldi	r24, 0x1E	; 30
     8d0:	c8 2e       	mov	r12, r24
     8d2:	d1 2c       	mov	r13, r1
     8d4:	dc 82       	std	Y+4, r13	; 0x04
     8d6:	cb 82       	std	Y+3, r12	; 0x03
     8d8:	ed 82       	std	Y+5, r14	; 0x05
     8da:	fe 82       	std	Y+6, r15	; 0x06
     8dc:	0f 83       	std	Y+7, r16	; 0x07
     8de:	18 87       	std	Y+8, r17	; 0x08
     8e0:	c8 01       	movw	r24, r16
     8e2:	b7 01       	movw	r22, r14
     8e4:	0e 94 ce 04 	call	0x99c	; 0x99c <__clzsi2>
     8e8:	fc 01       	movw	r30, r24
     8ea:	31 97       	sbiw	r30, 0x01	; 1
     8ec:	f7 ff       	sbrs	r31, 7
     8ee:	3b c0       	rjmp	.+118    	; 0x966 <__floatunsisf+0xbc>
     8f0:	22 27       	eor	r18, r18
     8f2:	33 27       	eor	r19, r19
     8f4:	2e 1b       	sub	r18, r30
     8f6:	3f 0b       	sbc	r19, r31
     8f8:	57 01       	movw	r10, r14
     8fa:	68 01       	movw	r12, r16
     8fc:	02 2e       	mov	r0, r18
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__floatunsisf+0x5e>
     900:	d6 94       	lsr	r13
     902:	c7 94       	ror	r12
     904:	b7 94       	ror	r11
     906:	a7 94       	ror	r10
     908:	0a 94       	dec	r0
     90a:	d2 f7       	brpl	.-12     	; 0x900 <__floatunsisf+0x56>
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__floatunsisf+0x7c>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	aa 1f       	adc	r26, r26
     924:	bb 1f       	adc	r27, r27
     926:	2a 95       	dec	r18
     928:	d2 f7       	brpl	.-12     	; 0x91e <__floatunsisf+0x74>
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	a1 09       	sbc	r26, r1
     92e:	b1 09       	sbc	r27, r1
     930:	8e 21       	and	r24, r14
     932:	9f 21       	and	r25, r15
     934:	a0 23       	and	r26, r16
     936:	b1 23       	and	r27, r17
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	21 f0       	breq	.+8      	; 0x948 <__floatunsisf+0x9e>
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	4a 29       	or	r20, r10
     94a:	5b 29       	or	r21, r11
     94c:	6c 29       	or	r22, r12
     94e:	7d 29       	or	r23, r13
     950:	4d 83       	std	Y+5, r20	; 0x05
     952:	5e 83       	std	Y+6, r21	; 0x06
     954:	6f 83       	std	Y+7, r22	; 0x07
     956:	78 87       	std	Y+8, r23	; 0x08
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	8e 1b       	sub	r24, r30
     95e:	9f 0b       	sbc	r25, r31
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	8b 83       	std	Y+3, r24	; 0x03
     964:	12 c0       	rjmp	.+36     	; 0x98a <__floatunsisf+0xe0>
     966:	30 97       	sbiw	r30, 0x00	; 0
     968:	81 f0       	breq	.+32     	; 0x98a <__floatunsisf+0xe0>
     96a:	0e 2e       	mov	r0, r30
     96c:	04 c0       	rjmp	.+8      	; 0x976 <__floatunsisf+0xcc>
     96e:	ee 0c       	add	r14, r14
     970:	ff 1c       	adc	r15, r15
     972:	00 1f       	adc	r16, r16
     974:	11 1f       	adc	r17, r17
     976:	0a 94       	dec	r0
     978:	d2 f7       	brpl	.-12     	; 0x96e <__floatunsisf+0xc4>
     97a:	ed 82       	std	Y+5, r14	; 0x05
     97c:	fe 82       	std	Y+6, r15	; 0x06
     97e:	0f 83       	std	Y+7, r16	; 0x07
     980:	18 87       	std	Y+8, r17	; 0x08
     982:	ce 1a       	sub	r12, r30
     984:	df 0a       	sbc	r13, r31
     986:	dc 82       	std	Y+4, r13	; 0x04
     988:	cb 82       	std	Y+3, r12	; 0x03
     98a:	1a 82       	std	Y+2, r1	; 0x02
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__pack_f>
     994:	28 96       	adiw	r28, 0x08	; 8
     996:	ea e0       	ldi	r30, 0x0A	; 10
     998:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__epilogue_restores__+0x10>

0000099c <__clzsi2>:
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	7b 01       	movw	r14, r22
     9a6:	8c 01       	movw	r16, r24
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	e8 16       	cp	r14, r24
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	f8 06       	cpc	r15, r24
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	08 07       	cpc	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	18 07       	cpc	r17, r24
     9b8:	88 f4       	brcc	.+34     	; 0x9dc <__clzsi2+0x40>
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	e8 16       	cp	r14, r24
     9be:	f1 04       	cpc	r15, r1
     9c0:	01 05       	cpc	r16, r1
     9c2:	11 05       	cpc	r17, r1
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <__clzsi2+0x36>
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__clzsi2+0x36>
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	17 c0       	rjmp	.+46     	; 0xa00 <__clzsi2+0x64>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	a0 e0       	ldi	r26, 0x00	; 0
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	12 c0       	rjmp	.+36     	; 0xa00 <__clzsi2+0x64>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	e8 16       	cp	r14, r24
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	f8 06       	cpc	r15, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 07       	cpc	r16, r24
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	18 07       	cpc	r17, r24
     9ec:	28 f0       	brcs	.+10     	; 0x9f8 <__clzsi2+0x5c>
     9ee:	88 e1       	ldi	r24, 0x18	; 24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a0 e0       	ldi	r26, 0x00	; 0
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__clzsi2+0x64>
     9f8:	80 e1       	ldi	r24, 0x10	; 16
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	20 e2       	ldi	r18, 0x20	; 32
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	28 1b       	sub	r18, r24
     a0a:	39 0b       	sbc	r19, r25
     a0c:	4a 0b       	sbc	r20, r26
     a0e:	5b 0b       	sbc	r21, r27
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__clzsi2+0x7e>
     a12:	16 95       	lsr	r17
     a14:	07 95       	ror	r16
     a16:	f7 94       	ror	r15
     a18:	e7 94       	ror	r14
     a1a:	8a 95       	dec	r24
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__clzsi2+0x76>
     a1e:	f7 01       	movw	r30, r14
     a20:	ec 57       	subi	r30, 0x7C	; 124
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	80 81       	ld	r24, Z
     a26:	28 1b       	sub	r18, r24
     a28:	31 09       	sbc	r19, r1
     a2a:	41 09       	sbc	r20, r1
     a2c:	51 09       	sbc	r21, r1
     a2e:	c9 01       	movw	r24, r18
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <__pack_f>:
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	fc 01       	movw	r30, r24
     a46:	e4 80       	ldd	r14, Z+4	; 0x04
     a48:	f5 80       	ldd	r15, Z+5	; 0x05
     a4a:	06 81       	ldd	r16, Z+6	; 0x06
     a4c:	17 81       	ldd	r17, Z+7	; 0x07
     a4e:	d1 80       	ldd	r13, Z+1	; 0x01
     a50:	80 81       	ld	r24, Z
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	48 f4       	brcc	.+18     	; 0xa68 <__pack_f+0x2e>
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	a0 e1       	ldi	r26, 0x10	; 16
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	e8 2a       	or	r14, r24
     a60:	f9 2a       	or	r15, r25
     a62:	0a 2b       	or	r16, r26
     a64:	1b 2b       	or	r17, r27
     a66:	a5 c0       	rjmp	.+330    	; 0xbb2 <__pack_f+0x178>
     a68:	84 30       	cpi	r24, 0x04	; 4
     a6a:	09 f4       	brne	.+2      	; 0xa6e <__pack_f+0x34>
     a6c:	9f c0       	rjmp	.+318    	; 0xbac <__pack_f+0x172>
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	21 f4       	brne	.+8      	; 0xa7a <__pack_f+0x40>
     a72:	ee 24       	eor	r14, r14
     a74:	ff 24       	eor	r15, r15
     a76:	87 01       	movw	r16, r14
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <__pack_f+0x4a>
     a7a:	e1 14       	cp	r14, r1
     a7c:	f1 04       	cpc	r15, r1
     a7e:	01 05       	cpc	r16, r1
     a80:	11 05       	cpc	r17, r1
     a82:	19 f4       	brne	.+6      	; 0xa8a <__pack_f+0x50>
     a84:	e0 e0       	ldi	r30, 0x00	; 0
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	96 c0       	rjmp	.+300    	; 0xbb6 <__pack_f+0x17c>
     a8a:	62 81       	ldd	r22, Z+2	; 0x02
     a8c:	73 81       	ldd	r23, Z+3	; 0x03
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
     a90:	62 38       	cpi	r22, 0x82	; 130
     a92:	79 07       	cpc	r23, r25
     a94:	0c f0       	brlt	.+2      	; 0xa98 <__pack_f+0x5e>
     a96:	5b c0       	rjmp	.+182    	; 0xb4e <__pack_f+0x114>
     a98:	22 e8       	ldi	r18, 0x82	; 130
     a9a:	3f ef       	ldi	r19, 0xFF	; 255
     a9c:	26 1b       	sub	r18, r22
     a9e:	37 0b       	sbc	r19, r23
     aa0:	2a 31       	cpi	r18, 0x1A	; 26
     aa2:	31 05       	cpc	r19, r1
     aa4:	2c f0       	brlt	.+10     	; 0xab0 <__pack_f+0x76>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	2a c0       	rjmp	.+84     	; 0xb04 <__pack_f+0xca>
     ab0:	b8 01       	movw	r22, r16
     ab2:	a7 01       	movw	r20, r14
     ab4:	02 2e       	mov	r0, r18
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__pack_f+0x86>
     ab8:	76 95       	lsr	r23
     aba:	67 95       	ror	r22
     abc:	57 95       	ror	r21
     abe:	47 95       	ror	r20
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__pack_f+0x7e>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x9c>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	aa 1f       	adc	r26, r26
     ad4:	bb 1f       	adc	r27, r27
     ad6:	2a 95       	dec	r18
     ad8:	d2 f7       	brpl	.-12     	; 0xace <__pack_f+0x94>
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	a1 09       	sbc	r26, r1
     ade:	b1 09       	sbc	r27, r1
     ae0:	8e 21       	and	r24, r14
     ae2:	9f 21       	and	r25, r15
     ae4:	a0 23       	and	r26, r16
     ae6:	b1 23       	and	r27, r17
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	a1 05       	cpc	r26, r1
     aec:	b1 05       	cpc	r27, r1
     aee:	21 f0       	breq	.+8      	; 0xaf8 <__pack_f+0xbe>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	9a 01       	movw	r18, r20
     afa:	ab 01       	movw	r20, r22
     afc:	28 2b       	or	r18, r24
     afe:	39 2b       	or	r19, r25
     b00:	4a 2b       	or	r20, r26
     b02:	5b 2b       	or	r21, r27
     b04:	da 01       	movw	r26, r20
     b06:	c9 01       	movw	r24, r18
     b08:	8f 77       	andi	r24, 0x7F	; 127
     b0a:	90 70       	andi	r25, 0x00	; 0
     b0c:	a0 70       	andi	r26, 0x00	; 0
     b0e:	b0 70       	andi	r27, 0x00	; 0
     b10:	80 34       	cpi	r24, 0x40	; 64
     b12:	91 05       	cpc	r25, r1
     b14:	a1 05       	cpc	r26, r1
     b16:	b1 05       	cpc	r27, r1
     b18:	39 f4       	brne	.+14     	; 0xb28 <__pack_f+0xee>
     b1a:	27 ff       	sbrs	r18, 7
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <__pack_f+0xf6>
     b1e:	20 5c       	subi	r18, 0xC0	; 192
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	4f 4f       	sbci	r20, 0xFF	; 255
     b24:	5f 4f       	sbci	r21, 0xFF	; 255
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__pack_f+0xf6>
     b28:	21 5c       	subi	r18, 0xC1	; 193
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	4f 4f       	sbci	r20, 0xFF	; 255
     b2e:	5f 4f       	sbci	r21, 0xFF	; 255
     b30:	e0 e0       	ldi	r30, 0x00	; 0
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	20 30       	cpi	r18, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	3a 07       	cpc	r19, r26
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	4a 07       	cpc	r20, r26
     b3e:	a0 e4       	ldi	r26, 0x40	; 64
     b40:	5a 07       	cpc	r21, r26
     b42:	10 f0       	brcs	.+4      	; 0xb48 <__pack_f+0x10e>
     b44:	e1 e0       	ldi	r30, 0x01	; 1
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	79 01       	movw	r14, r18
     b4a:	8a 01       	movw	r16, r20
     b4c:	27 c0       	rjmp	.+78     	; 0xb9c <__pack_f+0x162>
     b4e:	60 38       	cpi	r22, 0x80	; 128
     b50:	71 05       	cpc	r23, r1
     b52:	64 f5       	brge	.+88     	; 0xbac <__pack_f+0x172>
     b54:	fb 01       	movw	r30, r22
     b56:	e1 58       	subi	r30, 0x81	; 129
     b58:	ff 4f       	sbci	r31, 0xFF	; 255
     b5a:	d8 01       	movw	r26, r16
     b5c:	c7 01       	movw	r24, r14
     b5e:	8f 77       	andi	r24, 0x7F	; 127
     b60:	90 70       	andi	r25, 0x00	; 0
     b62:	a0 70       	andi	r26, 0x00	; 0
     b64:	b0 70       	andi	r27, 0x00	; 0
     b66:	80 34       	cpi	r24, 0x40	; 64
     b68:	91 05       	cpc	r25, r1
     b6a:	a1 05       	cpc	r26, r1
     b6c:	b1 05       	cpc	r27, r1
     b6e:	39 f4       	brne	.+14     	; 0xb7e <__pack_f+0x144>
     b70:	e7 fe       	sbrs	r14, 7
     b72:	0d c0       	rjmp	.+26     	; 0xb8e <__pack_f+0x154>
     b74:	80 e4       	ldi	r24, 0x40	; 64
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__pack_f+0x14c>
     b7e:	8f e3       	ldi	r24, 0x3F	; 63
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e8 0e       	add	r14, r24
     b88:	f9 1e       	adc	r15, r25
     b8a:	0a 1f       	adc	r16, r26
     b8c:	1b 1f       	adc	r17, r27
     b8e:	17 ff       	sbrs	r17, 7
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <__pack_f+0x162>
     b92:	16 95       	lsr	r17
     b94:	07 95       	ror	r16
     b96:	f7 94       	ror	r15
     b98:	e7 94       	ror	r14
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	87 e0       	ldi	r24, 0x07	; 7
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	8a 95       	dec	r24
     ba8:	d1 f7       	brne	.-12     	; 0xb9e <__pack_f+0x164>
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <__pack_f+0x17c>
     bac:	ee 24       	eor	r14, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	87 01       	movw	r16, r14
     bb2:	ef ef       	ldi	r30, 0xFF	; 255
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	6e 2f       	mov	r22, r30
     bb8:	67 95       	ror	r22
     bba:	66 27       	eor	r22, r22
     bbc:	67 95       	ror	r22
     bbe:	90 2f       	mov	r25, r16
     bc0:	9f 77       	andi	r25, 0x7F	; 127
     bc2:	d7 94       	ror	r13
     bc4:	dd 24       	eor	r13, r13
     bc6:	d7 94       	ror	r13
     bc8:	8e 2f       	mov	r24, r30
     bca:	86 95       	lsr	r24
     bcc:	49 2f       	mov	r20, r25
     bce:	46 2b       	or	r20, r22
     bd0:	58 2f       	mov	r21, r24
     bd2:	5d 29       	or	r21, r13
     bd4:	b7 01       	movw	r22, r14
     bd6:	ca 01       	movw	r24, r20
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	08 95       	ret

00000be4 <__unpack_f>:
     be4:	fc 01       	movw	r30, r24
     be6:	db 01       	movw	r26, r22
     be8:	40 81       	ld	r20, Z
     bea:	51 81       	ldd	r21, Z+1	; 0x01
     bec:	22 81       	ldd	r18, Z+2	; 0x02
     bee:	62 2f       	mov	r22, r18
     bf0:	6f 77       	andi	r22, 0x7F	; 127
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	22 1f       	adc	r18, r18
     bf6:	22 27       	eor	r18, r18
     bf8:	22 1f       	adc	r18, r18
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	89 2f       	mov	r24, r25
     bfe:	88 0f       	add	r24, r24
     c00:	82 2b       	or	r24, r18
     c02:	28 2f       	mov	r18, r24
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	99 1f       	adc	r25, r25
     c08:	99 27       	eor	r25, r25
     c0a:	99 1f       	adc	r25, r25
     c0c:	11 96       	adiw	r26, 0x01	; 1
     c0e:	9c 93       	st	X, r25
     c10:	11 97       	sbiw	r26, 0x01	; 1
     c12:	21 15       	cp	r18, r1
     c14:	31 05       	cpc	r19, r1
     c16:	a9 f5       	brne	.+106    	; 0xc82 <__unpack_f+0x9e>
     c18:	41 15       	cp	r20, r1
     c1a:	51 05       	cpc	r21, r1
     c1c:	61 05       	cpc	r22, r1
     c1e:	71 05       	cpc	r23, r1
     c20:	11 f4       	brne	.+4      	; 0xc26 <__unpack_f+0x42>
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	37 c0       	rjmp	.+110    	; 0xc94 <__unpack_f+0xb0>
     c26:	82 e8       	ldi	r24, 0x82	; 130
     c28:	9f ef       	ldi	r25, 0xFF	; 255
     c2a:	13 96       	adiw	r26, 0x03	; 3
     c2c:	9c 93       	st	X, r25
     c2e:	8e 93       	st	-X, r24
     c30:	12 97       	sbiw	r26, 0x02	; 2
     c32:	9a 01       	movw	r18, r20
     c34:	ab 01       	movw	r20, r22
     c36:	67 e0       	ldi	r22, 0x07	; 7
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	55 1f       	adc	r21, r21
     c40:	6a 95       	dec	r22
     c42:	d1 f7       	brne	.-12     	; 0xc38 <__unpack_f+0x54>
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	8c 93       	st	X, r24
     c48:	0d c0       	rjmp	.+26     	; 0xc64 <__unpack_f+0x80>
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	44 1f       	adc	r20, r20
     c50:	55 1f       	adc	r21, r21
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	8d 91       	ld	r24, X+
     c56:	9c 91       	ld	r25, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	13 96       	adiw	r26, 0x03	; 3
     c5e:	9c 93       	st	X, r25
     c60:	8e 93       	st	-X, r24
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	20 30       	cpi	r18, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	38 07       	cpc	r19, r24
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	48 07       	cpc	r20, r24
     c6e:	80 e4       	ldi	r24, 0x40	; 64
     c70:	58 07       	cpc	r21, r24
     c72:	58 f3       	brcs	.-42     	; 0xc4a <__unpack_f+0x66>
     c74:	14 96       	adiw	r26, 0x04	; 4
     c76:	2d 93       	st	X+, r18
     c78:	3d 93       	st	X+, r19
     c7a:	4d 93       	st	X+, r20
     c7c:	5c 93       	st	X, r21
     c7e:	17 97       	sbiw	r26, 0x07	; 7
     c80:	08 95       	ret
     c82:	2f 3f       	cpi	r18, 0xFF	; 255
     c84:	31 05       	cpc	r19, r1
     c86:	79 f4       	brne	.+30     	; 0xca6 <__unpack_f+0xc2>
     c88:	41 15       	cp	r20, r1
     c8a:	51 05       	cpc	r21, r1
     c8c:	61 05       	cpc	r22, r1
     c8e:	71 05       	cpc	r23, r1
     c90:	19 f4       	brne	.+6      	; 0xc98 <__unpack_f+0xb4>
     c92:	84 e0       	ldi	r24, 0x04	; 4
     c94:	8c 93       	st	X, r24
     c96:	08 95       	ret
     c98:	64 ff       	sbrs	r22, 4
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <__unpack_f+0xbe>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24
     ca0:	12 c0       	rjmp	.+36     	; 0xcc6 <__unpack_f+0xe2>
     ca2:	1c 92       	st	X, r1
     ca4:	10 c0       	rjmp	.+32     	; 0xcc6 <__unpack_f+0xe2>
     ca6:	2f 57       	subi	r18, 0x7F	; 127
     ca8:	30 40       	sbci	r19, 0x00	; 0
     caa:	13 96       	adiw	r26, 0x03	; 3
     cac:	3c 93       	st	X, r19
     cae:	2e 93       	st	-X, r18
     cb0:	12 97       	sbiw	r26, 0x02	; 2
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	8c 93       	st	X, r24
     cb6:	87 e0       	ldi	r24, 0x07	; 7
     cb8:	44 0f       	add	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	66 1f       	adc	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	8a 95       	dec	r24
     cc2:	d1 f7       	brne	.-12     	; 0xcb8 <__unpack_f+0xd4>
     cc4:	70 64       	ori	r23, 0x40	; 64
     cc6:	14 96       	adiw	r26, 0x04	; 4
     cc8:	4d 93       	st	X+, r20
     cca:	5d 93       	st	X+, r21
     ccc:	6d 93       	st	X+, r22
     cce:	7c 93       	st	X, r23
     cd0:	17 97       	sbiw	r26, 0x07	; 7
     cd2:	08 95       	ret

00000cd4 <__fpcmp_parts_f>:
     cd4:	1f 93       	push	r17
     cd6:	dc 01       	movw	r26, r24
     cd8:	fb 01       	movw	r30, r22
     cda:	9c 91       	ld	r25, X
     cdc:	92 30       	cpi	r25, 0x02	; 2
     cde:	08 f4       	brcc	.+2      	; 0xce2 <__fpcmp_parts_f+0xe>
     ce0:	47 c0       	rjmp	.+142    	; 0xd70 <__fpcmp_parts_f+0x9c>
     ce2:	80 81       	ld	r24, Z
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	08 f4       	brcc	.+2      	; 0xcea <__fpcmp_parts_f+0x16>
     ce8:	43 c0       	rjmp	.+134    	; 0xd70 <__fpcmp_parts_f+0x9c>
     cea:	94 30       	cpi	r25, 0x04	; 4
     cec:	51 f4       	brne	.+20     	; 0xd02 <__fpcmp_parts_f+0x2e>
     cee:	11 96       	adiw	r26, 0x01	; 1
     cf0:	1c 91       	ld	r17, X
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	99 f5       	brne	.+102    	; 0xd5c <__fpcmp_parts_f+0x88>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	68 2f       	mov	r22, r24
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	61 1b       	sub	r22, r17
     cfe:	71 09       	sbc	r23, r1
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <__fpcmp_parts_f+0xac>
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	21 f0       	breq	.+8      	; 0xd0e <__fpcmp_parts_f+0x3a>
     d06:	92 30       	cpi	r25, 0x02	; 2
     d08:	31 f4       	brne	.+12     	; 0xd16 <__fpcmp_parts_f+0x42>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	b9 f1       	breq	.+110    	; 0xd7c <__fpcmp_parts_f+0xa8>
     d0e:	81 81       	ldd	r24, Z+1	; 0x01
     d10:	88 23       	and	r24, r24
     d12:	89 f1       	breq	.+98     	; 0xd76 <__fpcmp_parts_f+0xa2>
     d14:	2d c0       	rjmp	.+90     	; 0xd70 <__fpcmp_parts_f+0x9c>
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	1c 91       	ld	r17, X
     d1a:	11 97       	sbiw	r26, 0x01	; 1
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	f1 f0       	breq	.+60     	; 0xd5c <__fpcmp_parts_f+0x88>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	18 17       	cp	r17, r24
     d24:	d9 f4       	brne	.+54     	; 0xd5c <__fpcmp_parts_f+0x88>
     d26:	12 96       	adiw	r26, 0x02	; 2
     d28:	2d 91       	ld	r18, X+
     d2a:	3c 91       	ld	r19, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	82 17       	cp	r24, r18
     d34:	93 07       	cpc	r25, r19
     d36:	94 f0       	brlt	.+36     	; 0xd5c <__fpcmp_parts_f+0x88>
     d38:	28 17       	cp	r18, r24
     d3a:	39 07       	cpc	r19, r25
     d3c:	bc f0       	brlt	.+46     	; 0xd6c <__fpcmp_parts_f+0x98>
     d3e:	14 96       	adiw	r26, 0x04	; 4
     d40:	8d 91       	ld	r24, X+
     d42:	9d 91       	ld	r25, X+
     d44:	0d 90       	ld	r0, X+
     d46:	bc 91       	ld	r27, X
     d48:	a0 2d       	mov	r26, r0
     d4a:	24 81       	ldd	r18, Z+4	; 0x04
     d4c:	35 81       	ldd	r19, Z+5	; 0x05
     d4e:	46 81       	ldd	r20, Z+6	; 0x06
     d50:	57 81       	ldd	r21, Z+7	; 0x07
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	4a 07       	cpc	r20, r26
     d58:	5b 07       	cpc	r21, r27
     d5a:	18 f4       	brcc	.+6      	; 0xd62 <__fpcmp_parts_f+0x8e>
     d5c:	11 23       	and	r17, r17
     d5e:	41 f0       	breq	.+16     	; 0xd70 <__fpcmp_parts_f+0x9c>
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <__fpcmp_parts_f+0xa2>
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	a4 07       	cpc	r26, r20
     d68:	b5 07       	cpc	r27, r21
     d6a:	40 f4       	brcc	.+16     	; 0xd7c <__fpcmp_parts_f+0xa8>
     d6c:	11 23       	and	r17, r17
     d6e:	19 f0       	breq	.+6      	; 0xd76 <__fpcmp_parts_f+0xa2>
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <__fpcmp_parts_f+0xac>
     d76:	6f ef       	ldi	r22, 0xFF	; 255
     d78:	7f ef       	ldi	r23, 0xFF	; 255
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <__fpcmp_parts_f+0xac>
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	cb 01       	movw	r24, r22
     d82:	1f 91       	pop	r17
     d84:	08 95       	ret

00000d86 <main>:
#include "LCD_Interface.h"
u8 getSize(u8* ptr);

#define F_CPU 8000000UL
int main (void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	a6 97       	sbiw	r28, 0x26	; 38
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61


		u8 string1 []="Lovely Chris";
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	9e 8f       	std	Y+30, r25	; 0x1e
     da0:	8d 8f       	std	Y+29, r24	; 0x1d
     da2:	e0 e6       	ldi	r30, 0x60	; 96
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	f8 a3       	std	Y+32, r31	; 0x20
     da8:	ef 8f       	std	Y+31, r30	; 0x1f
     daa:	fd e0       	ldi	r31, 0x0D	; 13
     dac:	f9 a3       	std	Y+33, r31	; 0x21
     dae:	ef 8d       	ldd	r30, Y+31	; 0x1f
     db0:	f8 a1       	ldd	r31, Y+32	; 0x20
     db2:	00 80       	ld	r0, Z
     db4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db6:	98 a1       	ldd	r25, Y+32	; 0x20
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	98 a3       	std	Y+32, r25	; 0x20
     dbc:	8f 8f       	std	Y+31, r24	; 0x1f
     dbe:	ed 8d       	ldd	r30, Y+29	; 0x1d
     dc0:	fe 8d       	ldd	r31, Y+30	; 0x1e
     dc2:	00 82       	st	Z, r0
     dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	9e 8f       	std	Y+30, r25	; 0x1e
     dcc:	8d 8f       	std	Y+29, r24	; 0x1d
     dce:	99 a1       	ldd	r25, Y+33	; 0x21
     dd0:	91 50       	subi	r25, 0x01	; 1
     dd2:	99 a3       	std	Y+33, r25	; 0x21
     dd4:	e9 a1       	ldd	r30, Y+33	; 0x21
     dd6:	ee 23       	and	r30, r30
     dd8:	51 f7       	brne	.-44     	; 0xdae <main+0x28>
		u8 string2 []="Happy birthday";
     dda:	ce 01       	movw	r24, r28
     ddc:	0e 96       	adiw	r24, 0x0e	; 14
     dde:	9b a3       	std	Y+35, r25	; 0x23
     de0:	8a a3       	std	Y+34, r24	; 0x22
     de2:	ed e6       	ldi	r30, 0x6D	; 109
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	fd a3       	std	Y+37, r31	; 0x25
     de8:	ec a3       	std	Y+36, r30	; 0x24
     dea:	ff e0       	ldi	r31, 0x0F	; 15
     dec:	fe a3       	std	Y+38, r31	; 0x26
     dee:	ec a1       	ldd	r30, Y+36	; 0x24
     df0:	fd a1       	ldd	r31, Y+37	; 0x25
     df2:	00 80       	ld	r0, Z
     df4:	8c a1       	ldd	r24, Y+36	; 0x24
     df6:	9d a1       	ldd	r25, Y+37	; 0x25
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	9d a3       	std	Y+37, r25	; 0x25
     dfc:	8c a3       	std	Y+36, r24	; 0x24
     dfe:	ea a1       	ldd	r30, Y+34	; 0x22
     e00:	fb a1       	ldd	r31, Y+35	; 0x23
     e02:	00 82       	st	Z, r0
     e04:	8a a1       	ldd	r24, Y+34	; 0x22
     e06:	9b a1       	ldd	r25, Y+35	; 0x23
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	9b a3       	std	Y+35, r25	; 0x23
     e0c:	8a a3       	std	Y+34, r24	; 0x22
     e0e:	9e a1       	ldd	r25, Y+38	; 0x26
     e10:	91 50       	subi	r25, 0x01	; 1
     e12:	9e a3       	std	Y+38, r25	; 0x26
     e14:	ee a1       	ldd	r30, Y+38	; 0x26
     e16:	ee 23       	and	r30, r30
     e18:	51 f7       	brne	.-44     	; 0xdee <main+0x68>


		DIO_vdSetPortDirection(LCD_U8_DATA_PORT,PORT_OUTPUT);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	6f ef       	ldi	r22, 0xFF	; 255
     e1e:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_vdSetPortDirection>
		DIO_vdSetPortDirection(LCD_U8_CTRL_PORT,PORT_OUTPUT);
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	6f ef       	ldi	r22, 0xFF	; 255
     e26:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_vdSetPortDirection>

		LCD_vdInitialization();
     e2a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LCD_vdInitialization>
		//LCD_vdWriteFloatNum(255.27);
/*		LCD_vdWriteNum(25);
		LCD_vdSendChar('/');
		LCD_vdWriteNum(8);*/
		//LCD_vdGotoDDRAM(0, 1);
		LCD_vdWriteString(string2);
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 96       	adiw	r24, 0x0e	; 14
     e32:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_vdWriteString>
		_delay_ms(1000);
		LCD_vdClear();
*/


	return 0;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
}
     e3a:	a6 96       	adiw	r28, 0x26	; 38
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	f8 94       	cli
     e40:	de bf       	out	0x3e, r29	; 62
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	cd bf       	out	0x3d, r28	; 61
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <getSize>:

u8 getSize(u8* ptr)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <getSize+0x6>
     e52:	0f 92       	push	r0
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	9b 83       	std	Y+3, r25	; 0x03
     e5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <getSize+0x24>
	sizeof(i);
	while(*ptr != '\0')
	{
		ptr++;
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9b 83       	std	Y+3, r25	; 0x03
     e68:	8a 83       	std	Y+2, r24	; 0x02
		i++;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	89 83       	std	Y+1, r24	; 0x01

u8 getSize(u8* ptr)
{
	u8 i=0;
	sizeof(i);
	while(*ptr != '\0')
     e70:	ea 81       	ldd	r30, Y+2	; 0x02
     e72:	fb 81       	ldd	r31, Y+3	; 0x03
     e74:	80 81       	ld	r24, Z
     e76:	88 23       	and	r24, r24
     e78:	99 f7       	brne	.-26     	; 0xe60 <getSize+0x14>
	{
		ptr++;
		i++;
	}
	return i;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_vdSetPortDirection+0x6>
     e8e:	00 d0       	rcall	.+0      	; 0xe90 <DIO_vdSetPortDirection+0x8>
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	90 f5       	brcc	.+100    	; 0xf02 <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	3c 83       	std	Y+4, r19	; 0x04
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	8b 81       	ldd	r24, Y+3	; 0x03
     eaa:	9c 81       	ldd	r25, Y+4	; 0x04
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	91 05       	cpc	r25, r1
     eb0:	d1 f0       	breq	.+52     	; 0xee6 <DIO_vdSetPortDirection+0x5e>
     eb2:	2b 81       	ldd	r18, Y+3	; 0x03
     eb4:	3c 81       	ldd	r19, Y+4	; 0x04
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <DIO_vdSetPortDirection+0x3e>
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	61 f0       	breq	.+24     	; 0xedc <DIO_vdSetPortDirection+0x54>
     ec4:	1e c0       	rjmp	.+60     	; 0xf02 <DIO_vdSetPortDirection+0x7a>
     ec6:	2b 81       	ldd	r18, Y+3	; 0x03
     ec8:	3c 81       	ldd	r19, Y+4	; 0x04
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	81 f0       	breq	.+32     	; 0xef0 <DIO_vdSetPortDirection+0x68>
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	81 f0       	breq	.+32     	; 0xefa <DIO_vdSetPortDirection+0x72>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
     edc:	ea e3       	ldi	r30, 0x3A	; 58
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	80 83       	st	Z, r24
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
     ee6:	e7 e3       	ldi	r30, 0x37	; 55
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	80 83       	st	Z, r24
     eee:	09 c0       	rjmp	.+18     	; 0xf02 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
     ef0:	e4 e3       	ldi	r30, 0x34	; 52
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 83       	st	Z, r24
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <DIO_vdSetPortValue+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <DIO_vdSetPortValue+0x8>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <DIO_vdSetPortValue+0xa>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	08 f0       	brcs	.+2      	; 0xf2a <DIO_vdSetPortValue+0x1a>
     f28:	64 c0       	rjmp	.+200    	; 0xff2 <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	88 23       	and	r24, r24
     f2e:	79 f5       	brne	.+94     	; 0xf8e <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3e 83       	std	Y+6, r19	; 0x06
     f38:	2d 83       	std	Y+5, r18	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	91 05       	cpc	r25, r1
     f42:	c9 f0       	breq	.+50     	; 0xf76 <DIO_vdSetPortValue+0x66>
     f44:	2d 81       	ldd	r18, Y+5	; 0x05
     f46:	3e 81       	ldd	r19, Y+6	; 0x06
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	2c f4       	brge	.+10     	; 0xf58 <DIO_vdSetPortValue+0x48>
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	61 f0       	breq	.+24     	; 0xf6e <DIO_vdSetPortValue+0x5e>
     f56:	4d c0       	rjmp	.+154    	; 0xff2 <DIO_vdSetPortValue+0xe2>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	71 f0       	breq	.+28     	; 0xf7e <DIO_vdSetPortValue+0x6e>
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	69 f0       	breq	.+26     	; 0xf86 <DIO_vdSetPortValue+0x76>
     f6c:	42 c0       	rjmp	.+132    	; 0xff2 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	10 82       	st	Z, r1
     f74:	3e c0       	rjmp	.+124    	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
     f76:	e8 e3       	ldi	r30, 0x38	; 56
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	10 82       	st	Z, r1
     f7c:	3a c0       	rjmp	.+116    	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1
     f84:	36 c0       	rjmp	.+108    	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
     f86:	e2 e3       	ldi	r30, 0x32	; 50
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	10 82       	st	Z, r1
     f8c:	32 c0       	rjmp	.+100    	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3c 83       	std	Y+4, r19	; 0x04
     f96:	2b 83       	std	Y+3, r18	; 0x03
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	d1 f0       	breq	.+52     	; 0xfd6 <DIO_vdSetPortValue+0xc6>
     fa2:	2b 81       	ldd	r18, Y+3	; 0x03
     fa4:	3c 81       	ldd	r19, Y+4	; 0x04
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	2c f4       	brge	.+10     	; 0xfb6 <DIO_vdSetPortValue+0xa6>
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	61 f0       	breq	.+24     	; 0xfcc <DIO_vdSetPortValue+0xbc>
     fb4:	1e c0       	rjmp	.+60     	; 0xff2 <DIO_vdSetPortValue+0xe2>
     fb6:	2b 81       	ldd	r18, Y+3	; 0x03
     fb8:	3c 81       	ldd	r19, Y+4	; 0x04
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	31 05       	cpc	r19, r1
     fbe:	81 f0       	breq	.+32     	; 0xfe0 <DIO_vdSetPortValue+0xd0>
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	81 f0       	breq	.+32     	; 0xfea <DIO_vdSetPortValue+0xda>
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
     fcc:	eb e3       	ldi	r30, 0x3B	; 59
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	80 83       	st	Z, r24
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
     fd6:	e8 e3       	ldi	r30, 0x38	; 56
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	80 83       	st	Z, r24
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
     fe0:	e5 e3       	ldi	r30, 0x35	; 53
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	80 83       	st	Z, r24
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
     fea:	e2 e3       	ldi	r30, 0x32	; 50
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
     ff2:	26 96       	adiw	r28, 0x06	; 6
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	27 97       	sbiw	r28, 0x07	; 7
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	6a 83       	std	Y+2, r22	; 0x02
    101c:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	08 f0       	brcs	.+2      	; 0x1026 <DIO_vdSetPintDirection+0x22>
    1024:	ee c0       	rjmp	.+476    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_vdSetPintDirection+0x2a>
    102c:	ea c0       	rjmp	.+468    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	09 f0       	breq	.+2      	; 0x1036 <DIO_vdSetPintDirection+0x32>
    1034:	6f c0       	rjmp	.+222    	; 0x1114 <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3f 83       	std	Y+7, r19	; 0x07
    103e:	2e 83       	std	Y+6, r18	; 0x06
    1040:	8e 81       	ldd	r24, Y+6	; 0x06
    1042:	9f 81       	ldd	r25, Y+7	; 0x07
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	49 f1       	breq	.+82     	; 0x109c <DIO_vdSetPintDirection+0x98>
    104a:	2e 81       	ldd	r18, Y+6	; 0x06
    104c:	3f 81       	ldd	r19, Y+7	; 0x07
    104e:	22 30       	cpi	r18, 0x02	; 2
    1050:	31 05       	cpc	r19, r1
    1052:	2c f4       	brge	.+10     	; 0x105e <DIO_vdSetPintDirection+0x5a>
    1054:	8e 81       	ldd	r24, Y+6	; 0x06
    1056:	9f 81       	ldd	r25, Y+7	; 0x07
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	61 f0       	breq	.+24     	; 0x1074 <DIO_vdSetPintDirection+0x70>
    105c:	d2 c0       	rjmp	.+420    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
    105e:	2e 81       	ldd	r18, Y+6	; 0x06
    1060:	3f 81       	ldd	r19, Y+7	; 0x07
    1062:	22 30       	cpi	r18, 0x02	; 2
    1064:	31 05       	cpc	r19, r1
    1066:	71 f1       	breq	.+92     	; 0x10c4 <DIO_vdSetPintDirection+0xc0>
    1068:	8e 81       	ldd	r24, Y+6	; 0x06
    106a:	9f 81       	ldd	r25, Y+7	; 0x07
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	e9 f1       	breq	.+122    	; 0x10ec <DIO_vdSetPintDirection+0xe8>
    1072:	c7 c0       	rjmp	.+398    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
    1074:	aa e3       	ldi	r26, 0x3A	; 58
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	ea e3       	ldi	r30, 0x3A	; 58
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_vdSetPintDirection+0x8e>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_vdSetPintDirection+0x8a>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	b3 c0       	rjmp	.+358    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
    109c:	a7 e3       	ldi	r26, 0x37	; 55
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e7 e3       	ldi	r30, 0x37	; 55
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_vdSetPintDirection+0xb6>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_vdSetPintDirection+0xb2>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	9f c0       	rjmp	.+318    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
    10c4:	a4 e3       	ldi	r26, 0x34	; 52
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_vdSetPintDirection+0xde>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_vdSetPintDirection+0xda>
    10e6:	84 2b       	or	r24, r20
    10e8:	8c 93       	st	X, r24
    10ea:	8b c0       	rjmp	.+278    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
    10ec:	a1 e3       	ldi	r26, 0x31	; 49
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e1 e3       	ldi	r30, 0x31	; 49
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_vdSetPintDirection+0x106>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_vdSetPintDirection+0x102>
    110e:	84 2b       	or	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	77 c0       	rjmp	.+238    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 23       	and	r24, r24
    1118:	09 f0       	breq	.+2      	; 0x111c <DIO_vdSetPintDirection+0x118>
    111a:	73 c0       	rjmp	.+230    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3d 83       	std	Y+5, r19	; 0x05
    1124:	2c 83       	std	Y+4, r18	; 0x04
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	9d 81       	ldd	r25, Y+5	; 0x05
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	59 f1       	breq	.+86     	; 0x1186 <DIO_vdSetPintDirection+0x182>
    1130:	2c 81       	ldd	r18, Y+4	; 0x04
    1132:	3d 81       	ldd	r19, Y+5	; 0x05
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <DIO_vdSetPintDirection+0x140>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f0       	breq	.+26     	; 0x115c <DIO_vdSetPintDirection+0x158>
    1142:	5f c0       	rjmp	.+190    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
    1144:	2c 81       	ldd	r18, Y+4	; 0x04
    1146:	3d 81       	ldd	r19, Y+5	; 0x05
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	89 f1       	breq	.+98     	; 0x11b0 <DIO_vdSetPintDirection+0x1ac>
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <DIO_vdSetPintDirection+0x156>
    1158:	40 c0       	rjmp	.+128    	; 0x11da <DIO_vdSetPintDirection+0x1d6>
    115a:	53 c0       	rjmp	.+166    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
    115c:	aa e3       	ldi	r26, 0x3A	; 58
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ea e3       	ldi	r30, 0x3A	; 58
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_vdSetPintDirection+0x176>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_vdSetPintDirection+0x172>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	3e c0       	rjmp	.+124    	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_vdSetPintDirection+0x1a0>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_vdSetPintDirection+0x19c>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	29 c0       	rjmp	.+82     	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_vdSetPintDirection+0x1ca>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_vdSetPintDirection+0x1c6>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
    11da:	a1 e3       	ldi	r26, 0x31	; 49
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_vdSetPintDirection+0x1f4>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_vdSetPintDirection+0x1f0>
    11fc:	80 95       	com	r24
    11fe:	84 23       	and	r24, r20
    1200:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
    1202:	27 96       	adiw	r28, 0x07	; 7
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	27 97       	sbiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
    122c:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	08 f0       	brcs	.+2      	; 0x1236 <DIO_vdSetPinValue+0x22>
    1234:	ee c0       	rjmp	.+476    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	88 30       	cpi	r24, 0x08	; 8
    123a:	08 f0       	brcs	.+2      	; 0x123e <DIO_vdSetPinValue+0x2a>
    123c:	ea c0       	rjmp	.+468    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	09 f0       	breq	.+2      	; 0x1246 <DIO_vdSetPinValue+0x32>
    1244:	6f c0       	rjmp	.+222    	; 0x1324 <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3f 83       	std	Y+7, r19	; 0x07
    124e:	2e 83       	std	Y+6, r18	; 0x06
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	49 f1       	breq	.+82     	; 0x12ac <DIO_vdSetPinValue+0x98>
    125a:	2e 81       	ldd	r18, Y+6	; 0x06
    125c:	3f 81       	ldd	r19, Y+7	; 0x07
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <DIO_vdSetPinValue+0x5a>
    1264:	8e 81       	ldd	r24, Y+6	; 0x06
    1266:	9f 81       	ldd	r25, Y+7	; 0x07
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	61 f0       	breq	.+24     	; 0x1284 <DIO_vdSetPinValue+0x70>
    126c:	d2 c0       	rjmp	.+420    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	71 f1       	breq	.+92     	; 0x12d4 <DIO_vdSetPinValue+0xc0>
    1278:	8e 81       	ldd	r24, Y+6	; 0x06
    127a:	9f 81       	ldd	r25, Y+7	; 0x07
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	e9 f1       	breq	.+122    	; 0x12fc <DIO_vdSetPinValue+0xe8>
    1282:	c7 c0       	rjmp	.+398    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
    1284:	ab e3       	ldi	r26, 0x3B	; 59
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	eb e3       	ldi	r30, 0x3B	; 59
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_vdSetPinValue+0x8e>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_vdSetPinValue+0x8a>
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	b3 c0       	rjmp	.+358    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
    12ac:	a8 e3       	ldi	r26, 0x38	; 56
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e8 e3       	ldi	r30, 0x38	; 56
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_vdSetPinValue+0xb6>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_vdSetPinValue+0xb2>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	9f c0       	rjmp	.+318    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
    12d4:	a5 e3       	ldi	r26, 0x35	; 53
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e5 e3       	ldi	r30, 0x35	; 53
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_vdSetPinValue+0xde>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_vdSetPinValue+0xda>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	8b c0       	rjmp	.+278    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
    12fc:	a2 e3       	ldi	r26, 0x32	; 50
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e2 e3       	ldi	r30, 0x32	; 50
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_vdSetPinValue+0x106>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_vdSetPinValue+0x102>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	77 c0       	rjmp	.+238    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 23       	and	r24, r24
    1328:	09 f0       	breq	.+2      	; 0x132c <DIO_vdSetPinValue+0x118>
    132a:	73 c0       	rjmp	.+230    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	59 f1       	breq	.+86     	; 0x1396 <DIO_vdSetPinValue+0x182>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <DIO_vdSetPinValue+0x140>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f0       	breq	.+26     	; 0x136c <DIO_vdSetPinValue+0x158>
    1352:	5f c0       	rjmp	.+190    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	89 f1       	breq	.+98     	; 0x13c0 <DIO_vdSetPinValue+0x1ac>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <DIO_vdSetPinValue+0x156>
    1368:	40 c0       	rjmp	.+128    	; 0x13ea <DIO_vdSetPinValue+0x1d6>
    136a:	53 c0       	rjmp	.+166    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    136c:	ab e3       	ldi	r26, 0x3B	; 59
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb e3       	ldi	r30, 0x3B	; 59
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_vdSetPinValue+0x176>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_vdSetPinValue+0x172>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	3e c0       	rjmp	.+124    	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_vdSetPinValue+0x1a0>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_vdSetPinValue+0x19c>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	29 c0       	rjmp	.+82     	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_vdSetPinValue+0x1ca>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_vdSetPinValue+0x1c6>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_vdSetPinValue+0x1f4>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_vdSetPinValue+0x1f0>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    1412:	27 96       	adiw	r28, 0x07	; 7
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <DIO_u8GetPinValue+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <DIO_u8GetPinValue+0x8>
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_u8GetPinValue+0xa>
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	08 f0       	brcs	.+2      	; 0x143e <DIO_u8GetPinValue+0x1a>
    143c:	70 c0       	rjmp	.+224    	; 0x151e <DIO_u8GetPinValue+0xfa>
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 30       	cpi	r24, 0x08	; 8
    1442:	08 f0       	brcs	.+2      	; 0x1446 <DIO_u8GetPinValue+0x22>
    1444:	6c c0       	rjmp	.+216    	; 0x151e <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3d 83       	std	Y+5, r19	; 0x05
    144e:	2c 83       	std	Y+4, r18	; 0x04
    1450:	4c 81       	ldd	r20, Y+4	; 0x04
    1452:	5d 81       	ldd	r21, Y+5	; 0x05
    1454:	41 30       	cpi	r20, 0x01	; 1
    1456:	51 05       	cpc	r21, r1
    1458:	49 f1       	breq	.+82     	; 0x14ac <DIO_u8GetPinValue+0x88>
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	9d 81       	ldd	r25, Y+5	; 0x05
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	91 05       	cpc	r25, r1
    1462:	34 f4       	brge	.+12     	; 0x1470 <DIO_u8GetPinValue+0x4c>
    1464:	2c 81       	ldd	r18, Y+4	; 0x04
    1466:	3d 81       	ldd	r19, Y+5	; 0x05
    1468:	21 15       	cp	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	61 f0       	breq	.+24     	; 0x1486 <DIO_u8GetPinValue+0x62>
    146e:	57 c0       	rjmp	.+174    	; 0x151e <DIO_u8GetPinValue+0xfa>
    1470:	4c 81       	ldd	r20, Y+4	; 0x04
    1472:	5d 81       	ldd	r21, Y+5	; 0x05
    1474:	42 30       	cpi	r20, 0x02	; 2
    1476:	51 05       	cpc	r21, r1
    1478:	61 f1       	breq	.+88     	; 0x14d2 <DIO_u8GetPinValue+0xae>
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	83 30       	cpi	r24, 0x03	; 3
    1480:	91 05       	cpc	r25, r1
    1482:	d1 f1       	breq	.+116    	; 0x14f8 <DIO_u8GetPinValue+0xd4>
    1484:	4c c0       	rjmp	.+152    	; 0x151e <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    1486:	e9 e3       	ldi	r30, 0x39	; 57
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	88 2f       	mov	r24, r24
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_u8GetPinValue+0x7a>
    149a:	55 95       	asr	r21
    149c:	47 95       	ror	r20
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_u8GetPinValue+0x76>
    14a2:	ca 01       	movw	r24, r20
    14a4:	58 2f       	mov	r21, r24
    14a6:	51 70       	andi	r21, 0x01	; 1
    14a8:	5b 83       	std	Y+3, r21	; 0x03
    14aa:	3a c0       	rjmp	.+116    	; 0x1520 <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8GetPinValue+0xa0>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8GetPinValue+0x9c>
    14c8:	ca 01       	movw	r24, r20
    14ca:	58 2f       	mov	r21, r24
    14cc:	51 70       	andi	r21, 0x01	; 1
    14ce:	5b 83       	std	Y+3, r21	; 0x03
    14d0:	27 c0       	rjmp	.+78     	; 0x1520 <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    14d2:	e3 e3       	ldi	r30, 0x33	; 51
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a9 01       	movw	r20, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8GetPinValue+0xc6>
    14e6:	55 95       	asr	r21
    14e8:	47 95       	ror	r20
    14ea:	8a 95       	dec	r24
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_u8GetPinValue+0xc2>
    14ee:	ca 01       	movw	r24, r20
    14f0:	58 2f       	mov	r21, r24
    14f2:	51 70       	andi	r21, 0x01	; 1
    14f4:	5b 83       	std	Y+3, r21	; 0x03
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 2f       	mov	r24, r24
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a9 01       	movw	r20, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_u8GetPinValue+0xec>
    150c:	55 95       	asr	r21
    150e:	47 95       	ror	r20
    1510:	8a 95       	dec	r24
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_u8GetPinValue+0xe8>
    1514:	ca 01       	movw	r24, r20
    1516:	58 2f       	mov	r21, r24
    1518:	51 70       	andi	r21, 0x01	; 1
    151a:	5b 83       	std	Y+3, r21	; 0x03
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <DIO_u8GetPinValue+0xfc>
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	8e 83       	std	Y+6, r24	; 0x06
    1524:	8e 81       	ldd	r24, Y+6	; 0x06
    1526:	26 96       	adiw	r28, 0x06	; 6
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <DIO_vdTogPortValue+0x6>
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_vdTogPortValue+0x16>
    154c:	3e c0       	rjmp	.+124    	; 0x15ca <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3b 83       	std	Y+3, r19	; 0x03
    1556:	2a 83       	std	Y+2, r18	; 0x02
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	e9 f0       	breq	.+58     	; 0x159c <DIO_vdTogPortValue+0x64>
    1562:	2a 81       	ldd	r18, Y+2	; 0x02
    1564:	3b 81       	ldd	r19, Y+3	; 0x03
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	2c f4       	brge	.+10     	; 0x1576 <DIO_vdTogPortValue+0x3e>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	61 f0       	breq	.+24     	; 0x158c <DIO_vdTogPortValue+0x54>
    1574:	2a c0       	rjmp	.+84     	; 0x15ca <DIO_vdTogPortValue+0x92>
    1576:	2a 81       	ldd	r18, Y+2	; 0x02
    1578:	3b 81       	ldd	r19, Y+3	; 0x03
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	b1 f0       	breq	.+44     	; 0x15ac <DIO_vdTogPortValue+0x74>
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	91 05       	cpc	r25, r1
    1588:	c9 f0       	breq	.+50     	; 0x15bc <DIO_vdTogPortValue+0x84>
    158a:	1f c0       	rjmp	.+62     	; 0x15ca <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    158c:	ab e3       	ldi	r26, 0x3B	; 59
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	eb e3       	ldi	r30, 0x3B	; 59
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 95       	com	r24
    1598:	8c 93       	st	X, r24
    159a:	17 c0       	rjmp	.+46     	; 0x15ca <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    159c:	a8 e3       	ldi	r26, 0x38	; 56
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e8 e3       	ldi	r30, 0x38	; 56
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 95       	com	r24
    15a8:	8c 93       	st	X, r24
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    15ac:	a5 e3       	ldi	r26, 0x35	; 53
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e3       	ldi	r30, 0x35	; 53
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 95       	com	r24
    15b8:	8c 93       	st	X, r24
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    15bc:	a2 e3       	ldi	r26, 0x32	; 50
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e2 e3       	ldi	r30, 0x32	; 50
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 95       	com	r24
    15c8:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <DIO_vdTogPinValue+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <DIO_vdTogPinValue+0x8>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
    15e4:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	84 30       	cpi	r24, 0x04	; 4
    15ea:	08 f0       	brcs	.+2      	; 0x15ee <DIO_vdTogPinValue+0x18>
    15ec:	6e c0       	rjmp	.+220    	; 0x16ca <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3c 83       	std	Y+4, r19	; 0x04
    15f6:	2b 83       	std	Y+3, r18	; 0x03
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	49 f1       	breq	.+82     	; 0x1654 <DIO_vdTogPinValue+0x7e>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	2c f4       	brge	.+10     	; 0x1616 <DIO_vdTogPinValue+0x40>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f0       	breq	.+24     	; 0x162c <DIO_vdTogPinValue+0x56>
    1614:	5a c0       	rjmp	.+180    	; 0x16ca <DIO_vdTogPinValue+0xf4>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	71 f1       	breq	.+92     	; 0x167c <DIO_vdTogPinValue+0xa6>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	e9 f1       	breq	.+122    	; 0x16a4 <DIO_vdTogPinValue+0xce>
    162a:	4f c0       	rjmp	.+158    	; 0x16ca <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    162c:	ab e3       	ldi	r26, 0x3B	; 59
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	eb e3       	ldi	r30, 0x3B	; 59
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_vdTogPinValue+0x74>
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <DIO_vdTogPinValue+0x70>
    164e:	84 27       	eor	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	3b c0       	rjmp	.+118    	; 0x16ca <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_vdTogPinValue+0x9c>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_vdTogPinValue+0x98>
    1676:	84 27       	eor	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	27 c0       	rjmp	.+78     	; 0x16ca <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    167c:	a5 e3       	ldi	r26, 0x35	; 53
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e3       	ldi	r30, 0x35	; 53
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_vdTogPinValue+0xc4>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_vdTogPinValue+0xc0>
    169e:	84 27       	eor	r24, r20
    16a0:	8c 93       	st	X, r24
    16a2:	13 c0       	rjmp	.+38     	; 0x16ca <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    16a4:	a2 e3       	ldi	r26, 0x32	; 50
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e2 e3       	ldi	r30, 0x32	; 50
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_vdTogPinValue+0xec>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_vdTogPinValue+0xe8>
    16c6:	84 27       	eor	r24, r20
    16c8:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	6d 97       	sbiw	r28, 0x1d	; 29
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	f8 94       	cli
    16e6:	de bf       	out	0x3e, r29	; 62
    16e8:	0f be       	out	0x3f, r0	; 63
    16ea:	cd bf       	out	0x3d, r28	; 61
    16ec:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
    16ee:	83 e0       	ldi	r24, 0x03	; 3
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW); //write
    16f8:	83 e0       	ldi	r24, 0x03	; 3
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command); //Put on data port
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1706:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High); //Enable pin
    170a:	83 e0       	ldi	r24, 0x03	; 3
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e8       	ldi	r26, 0x80	; 128
    171a:	bf e3       	ldi	r27, 0x3F	; 63
    171c:	89 8f       	std	Y+25, r24	; 0x19
    171e:	9a 8f       	std	Y+26, r25	; 0x1a
    1720:	ab 8f       	std	Y+27, r26	; 0x1b
    1722:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1724:	69 8d       	ldd	r22, Y+25	; 0x19
    1726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    172a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	4a ef       	ldi	r20, 0xFA	; 250
    1732:	54 e4       	ldi	r21, 0x44	; 68
    1734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	8d 8b       	std	Y+21, r24	; 0x15
    173e:	9e 8b       	std	Y+22, r25	; 0x16
    1740:	af 8b       	std	Y+23, r26	; 0x17
    1742:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1744:	6d 89       	ldd	r22, Y+21	; 0x15
    1746:	7e 89       	ldd	r23, Y+22	; 0x16
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e8       	ldi	r20, 0x80	; 128
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1758:	88 23       	and	r24, r24
    175a:	2c f4       	brge	.+10     	; 0x1766 <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	3f c0       	rjmp	.+126    	; 0x17e4 <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    1766:	6d 89       	ldd	r22, Y+21	; 0x15
    1768:	7e 89       	ldd	r23, Y+22	; 0x16
    176a:	8f 89       	ldd	r24, Y+23	; 0x17
    176c:	98 8d       	ldd	r25, Y+24	; 0x18
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	4f e7       	ldi	r20, 0x7F	; 127
    1774:	57 e4       	ldi	r21, 0x47	; 71
    1776:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    177a:	18 16       	cp	r1, r24
    177c:	4c f5       	brge	.+82     	; 0x17d0 <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177e:	69 8d       	ldd	r22, Y+25	; 0x19
    1780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9c 8b       	std	Y+20, r25	; 0x14
    17a4:	8b 8b       	std	Y+19, r24	; 0x13
    17a6:	0f c0       	rjmp	.+30     	; 0x17c6 <LCD_vdSendCmd+0xee>
    17a8:	88 ec       	ldi	r24, 0xC8	; 200
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	9a 8b       	std	Y+18, r25	; 0x12
    17ae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17b0:	89 89       	ldd	r24, Y+17	; 0x11
    17b2:	9a 89       	ldd	r25, Y+18	; 0x12
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <LCD_vdSendCmd+0xdc>
    17b8:	9a 8b       	std	Y+18, r25	; 0x12
    17ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	9c 8b       	std	Y+20, r25	; 0x14
    17c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	69 f7       	brne	.-38     	; 0x17a8 <LCD_vdSendCmd+0xd0>
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d0:	6d 89       	ldd	r22, Y+21	; 0x15
    17d2:	7e 89       	ldd	r23, Y+22	; 0x16
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
    17e4:	8b 89       	ldd	r24, Y+19	; 0x13
    17e6:	9c 89       	ldd	r25, Y+20	; 0x14
    17e8:	98 8b       	std	Y+16, r25	; 0x10
    17ea:	8f 87       	std	Y+15, r24	; 0x0f
    17ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ee:	98 89       	ldd	r25, Y+16	; 0x10
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <LCD_vdSendCmd+0x118>
    17f4:	98 8b       	std	Y+16, r25	; 0x10
    17f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); //Delay
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW); //Disable pin
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e8       	ldi	r26, 0x80	; 128
    1808:	bf e3       	ldi	r27, 0x3F	; 63
    180a:	8b 87       	std	Y+11, r24	; 0x0b
    180c:	9c 87       	std	Y+12, r25	; 0x0c
    180e:	ad 87       	std	Y+13, r26	; 0x0d
    1810:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6b 85       	ldd	r22, Y+11	; 0x0b
    1814:	7c 85       	ldd	r23, Y+12	; 0x0c
    1816:	8d 85       	ldd	r24, Y+13	; 0x0d
    1818:	9e 85       	ldd	r25, Y+14	; 0x0e
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8f 83       	std	Y+7, r24	; 0x07
    182c:	98 87       	std	Y+8, r25	; 0x08
    182e:	a9 87       	std	Y+9, r26	; 0x09
    1830:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    1854:	6f 81       	ldd	r22, Y+7	; 0x07
    1856:	78 85       	ldd	r23, Y+8	; 0x08
    1858:	89 85       	ldd	r24, Y+9	; 0x09
    185a:	9a 85       	ldd	r25, Y+10	; 0x0a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <LCD_vdSendCmd+0x1dc>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9c 83       	std	Y+4, r25	; 0x04
    189c:	8b 83       	std	Y+3, r24	; 0x03
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	9c 81       	ldd	r25, Y+4	; 0x04
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <LCD_vdSendCmd+0x1ca>
    18a6:	9c 83       	std	Y+4, r25	; 0x04
    18a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9e 83       	std	Y+6, r25	; 0x06
    18b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <LCD_vdSendCmd+0x1be>
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <LCD_vdSendCmd+0x206>
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    18e6:	6d 96       	adiw	r28, 0x1d	; 29
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <LCD_vdInitialization>:


void LCD_vdInitialization(void)
{
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	c6 54       	subi	r28, 0x46	; 70
    1906:	d0 40       	sbci	r29, 0x00	; 0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	fe 01       	movw	r30, r28
    1914:	ed 5b       	subi	r30, 0xBD	; 189
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a8 e4       	ldi	r26, 0x48	; 72
    191e:	b2 e4       	ldi	r27, 0x42	; 66
    1920:	80 83       	st	Z, r24
    1922:	91 83       	std	Z+1, r25	; 0x01
    1924:	a2 83       	std	Z+2, r26	; 0x02
    1926:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	8e 01       	movw	r16, r28
    192a:	01 5c       	subi	r16, 0xC1	; 193
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a ef       	ldi	r20, 0xFA	; 250
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	f8 01       	movw	r30, r16
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1956:	fe 01       	movw	r30, r28
    1958:	ff 96       	adiw	r30, 0x3f	; 63
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <LCD_vdInitialization+0x84>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9e af       	std	Y+62, r25	; 0x3e
    1978:	8d af       	std	Y+61, r24	; 0x3d
    197a:	46 c0       	rjmp	.+140    	; 0x1a08 <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    197c:	fe 01       	movw	r30, r28
    197e:	ff 96       	adiw	r30, 0x3f	; 63
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	64 f5       	brge	.+88     	; 0x19f0 <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	fe 01       	movw	r30, r28
    199a:	ed 5b       	subi	r30, 0xBD	; 189
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9e af       	std	Y+62, r25	; 0x3e
    19c4:	8d af       	std	Y+61, r24	; 0x3d
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <LCD_vdInitialization+0xee>
    19c8:	88 ec       	ldi	r24, 0xC8	; 200
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9c af       	std	Y+60, r25	; 0x3c
    19ce:	8b af       	std	Y+59, r24	; 0x3b
    19d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    19d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_vdInitialization+0xdc>
    19d8:	9c af       	std	Y+60, r25	; 0x3c
    19da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    19de:	9e ad       	ldd	r25, Y+62	; 0x3e
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9e af       	std	Y+62, r25	; 0x3e
    19e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <LCD_vdInitialization+0xd0>
    19ee:	16 c0       	rjmp	.+44     	; 0x1a1c <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	fe 01       	movw	r30, r28
    19f2:	ff 96       	adiw	r30, 0x3f	; 63
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e af       	std	Y+62, r25	; 0x3e
    1a06:	8d af       	std	Y+61, r24	; 0x3d
    1a08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a0c:	9a af       	std	Y+58, r25	; 0x3a
    1a0e:	89 af       	std	Y+57, r24	; 0x39
    1a10:	89 ad       	ldd	r24, Y+57	; 0x39
    1a12:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <LCD_vdInitialization+0x11c>
    1a18:	9a af       	std	Y+58, r25	; 0x3a
    1a1a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    1a1c:	88 e3       	ldi	r24, 0x38	; 56
    1a1e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 e2       	ldi	r26, 0x20	; 32
    1a28:	b1 e4       	ldi	r27, 0x41	; 65
    1a2a:	8d ab       	std	Y+53, r24	; 0x35
    1a2c:	9e ab       	std	Y+54, r25	; 0x36
    1a2e:	af ab       	std	Y+55, r26	; 0x37
    1a30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	6d a9       	ldd	r22, Y+53	; 0x35
    1a34:	7e a9       	ldd	r23, Y+54	; 0x36
    1a36:	8f a9       	ldd	r24, Y+55	; 0x37
    1a38:	98 ad       	ldd	r25, Y+56	; 0x38
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a ef       	ldi	r20, 0xFA	; 250
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	89 ab       	std	Y+49, r24	; 0x31
    1a4c:	9a ab       	std	Y+50, r25	; 0x32
    1a4e:	ab ab       	std	Y+51, r26	; 0x33
    1a50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a52:	69 a9       	ldd	r22, Y+49	; 0x31
    1a54:	7a a9       	ldd	r23, Y+50	; 0x32
    1a56:	8b a9       	ldd	r24, Y+51	; 0x33
    1a58:	9c a9       	ldd	r25, Y+52	; 0x34
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <LCD_vdInitialization+0x17c>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    1a74:	69 a9       	ldd	r22, Y+49	; 0x31
    1a76:	7a a9       	ldd	r23, Y+50	; 0x32
    1a78:	8b a9       	ldd	r24, Y+51	; 0x33
    1a7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a90:	8f a9       	ldd	r24, Y+55	; 0x37
    1a92:	98 ad       	ldd	r25, Y+56	; 0x38
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	98 ab       	std	Y+48, r25	; 0x30
    1ab2:	8f a7       	std	Y+47, r24	; 0x2f
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <LCD_vdInitialization+0x1dc>
    1ab6:	88 ec       	ldi	r24, 0xC8	; 200
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e a7       	std	Y+46, r25	; 0x2e
    1abc:	8d a7       	std	Y+45, r24	; 0x2d
    1abe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ac0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_vdInitialization+0x1ca>
    1ac6:	9e a7       	std	Y+46, r25	; 0x2e
    1ac8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1acc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	98 ab       	std	Y+48, r25	; 0x30
    1ad2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ad6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <LCD_vdInitialization+0x1be>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af4:	98 a9       	ldd	r25, Y+48	; 0x30
    1af6:	9c a7       	std	Y+44, r25	; 0x2c
    1af8:	8b a7       	std	Y+43, r24	; 0x2b
    1afa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1afc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_vdInitialization+0x206>
    1b02:	9c a7       	std	Y+44, r25	; 0x2c
    1b04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    1b06:	8f e0       	ldi	r24, 0x0F	; 15
    1b08:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e2       	ldi	r26, 0x20	; 32
    1b12:	b1 e4       	ldi	r27, 0x41	; 65
    1b14:	8f a3       	std	Y+39, r24	; 0x27
    1b16:	98 a7       	std	Y+40, r25	; 0x28
    1b18:	a9 a7       	std	Y+41, r26	; 0x29
    1b1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b20:	89 a5       	ldd	r24, Y+41	; 0x29
    1b22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a ef       	ldi	r20, 0xFA	; 250
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8b a3       	std	Y+35, r24	; 0x23
    1b36:	9c a3       	std	Y+36, r25	; 0x24
    1b38:	ad a3       	std	Y+37, r26	; 0x25
    1b3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b40:	8d a1       	ldd	r24, Y+37	; 0x25
    1b42:	9e a1       	ldd	r25, Y+38	; 0x26
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_vdInitialization+0x266>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9a a3       	std	Y+34, r25	; 0x22
    1b5a:	89 a3       	std	Y+33, r24	; 0x21
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    1b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b60:	7c a1       	ldd	r23, Y+36	; 0x24
    1b62:	8d a1       	ldd	r24, Y+37	; 0x25
    1b64:	9e a1       	ldd	r25, Y+38	; 0x26
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	6f a1       	ldd	r22, Y+39	; 0x27
    1b78:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_vdInitialization+0x2c6>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	98 a3       	std	Y+32, r25	; 0x20
    1ba6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1baa:	98 a1       	ldd	r25, Y+32	; 0x20
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_vdInitialization+0x2b4>
    1bb0:	98 a3       	std	Y+32, r25	; 0x20
    1bb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9a a3       	std	Y+34, r25	; 0x22
    1bbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_vdInitialization+0x2a8>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bca:	7c a1       	ldd	r23, Y+36	; 0x24
    1bcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bce:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9a a3       	std	Y+34, r25	; 0x22
    1bda:	89 a3       	std	Y+33, r24	; 0x21
    1bdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bde:	9a a1       	ldd	r25, Y+34	; 0x22
    1be0:	9e 8f       	std	Y+30, r25	; 0x1e
    1be2:	8d 8f       	std	Y+29, r24	; 0x1d
    1be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_vdInitialization+0x2f0>
    1bec:	9e 8f       	std	Y+30, r25	; 0x1e
    1bee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e2       	ldi	r26, 0x20	; 32
    1bfc:	b1 e4       	ldi	r27, 0x41	; 65
    1bfe:	89 8f       	std	Y+25, r24	; 0x19
    1c00:	9a 8f       	std	Y+26, r25	; 0x1a
    1c02:	ab 8f       	std	Y+27, r26	; 0x1b
    1c04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	69 8d       	ldd	r22, Y+25	; 0x19
    1c08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a ef       	ldi	r20, 0xFA	; 250
    1c14:	54 e4       	ldi	r21, 0x44	; 68
    1c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8d 8b       	std	Y+21, r24	; 0x15
    1c20:	9e 8b       	std	Y+22, r25	; 0x16
    1c22:	af 8b       	std	Y+23, r26	; 0x17
    1c24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_vdInitialization+0x350>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	69 8d       	ldd	r22, Y+25	; 0x19
    1c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_vdInitialization+0x3b0>
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9a 8b       	std	Y+18, r25	; 0x12
    1c90:	89 8b       	std	Y+17, r24	; 0x11
    1c92:	89 89       	ldd	r24, Y+17	; 0x11
    1c94:	9a 89       	ldd	r25, Y+18	; 0x12
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_vdInitialization+0x39e>
    1c9a:	9a 8b       	std	Y+18, r25	; 0x12
    1c9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9c 8b       	std	Y+20, r25	; 0x14
    1ca6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8b 89       	ldd	r24, Y+19	; 0x13
    1caa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_vdInitialization+0x392>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9c 8b       	std	Y+20, r25	; 0x14
    1cc4:	8b 8b       	std	Y+19, r24	; 0x13
    1cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cca:	98 8b       	std	Y+16, r25	; 0x10
    1ccc:	8f 87       	std	Y+15, r24	; 0x0f
    1cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd0:	98 89       	ldd	r25, Y+16	; 0x10
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_vdInitialization+0x3da>
    1cd6:	98 8b       	std	Y+16, r25	; 0x10
    1cd8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    1cda:	86 e0       	ldi	r24, 0x06	; 6
    1cdc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a0 e2       	ldi	r26, 0x20	; 32
    1ce6:	b1 e4       	ldi	r27, 0x41	; 65
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
    1cea:	9c 87       	std	Y+12, r25	; 0x0c
    1cec:	ad 87       	std	Y+13, r26	; 0x0d
    1cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a ef       	ldi	r20, 0xFA	; 250
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	98 87       	std	Y+8, r25	; 0x08
    1d0c:	a9 87       	std	Y+9, r26	; 0x09
    1d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <LCD_vdInitialization+0x43a>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <LCD_vdInitialization+0x49a>
    1d74:	88 ec       	ldi	r24, 0xC8	; 200
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <LCD_vdInitialization+0x488>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <LCD_vdInitialization+0x47c>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_vdInitialization+0x4c4>
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1dc4:	ca 5b       	subi	r28, 0xBA	; 186
    1dc6:	df 4f       	sbci	r29, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	08 95       	ret

00001ddc <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
    1de4:	6d 97       	sbiw	r28, 0x1d	; 29
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e0a:	0e 94 88 07 	call	0xf10	; 0xf10 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e8       	ldi	r26, 0x80	; 128
    1e1e:	bf e3       	ldi	r27, 0x3F	; 63
    1e20:	89 8f       	std	Y+25, r24	; 0x19
    1e22:	9a 8f       	std	Y+26, r25	; 0x1a
    1e24:	ab 8f       	std	Y+27, r26	; 0x1b
    1e26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8d 8b       	std	Y+21, r24	; 0x15
    1e42:	9e 8b       	std	Y+22, r25	; 0x16
    1e44:	af 8b       	std	Y+23, r26	; 0x17
    1e46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <LCD_vdSendChar+0x8e>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9c 8b       	std	Y+20, r25	; 0x14
    1e66:	8b 8b       	std	Y+19, r24	; 0x13
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    1e6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e70:	98 8d       	ldd	r25, Y+24	; 0x18
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	69 8d       	ldd	r22, Y+25	; 0x19
    1e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9c 8b       	std	Y+20, r25	; 0x14
    1ea8:	8b 8b       	std	Y+19, r24	; 0x13
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <LCD_vdSendChar+0xee>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9a 8b       	std	Y+18, r25	; 0x12
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
    1eb4:	89 89       	ldd	r24, Y+17	; 0x11
    1eb6:	9a 89       	ldd	r25, Y+18	; 0x12
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <LCD_vdSendChar+0xdc>
    1ebc:	9a 8b       	std	Y+18, r25	; 0x12
    1ebe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9c 8b       	std	Y+20, r25	; 0x14
    1ec8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <LCD_vdSendChar+0xd0>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eda:	98 8d       	ldd	r25, Y+24	; 0x18
    1edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9c 8b       	std	Y+20, r25	; 0x14
    1ee6:	8b 8b       	std	Y+19, r24	; 0x13
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	98 8b       	std	Y+16, r25	; 0x10
    1eee:	8f 87       	std	Y+15, r24	; 0x0f
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	98 89       	ldd	r25, Y+16	; 0x10
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_vdSendChar+0x118>
    1ef8:	98 8b       	std	Y+16, r25	; 0x10
    1efa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	62 e0       	ldi	r22, 0x02	; 2
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	a0 e8       	ldi	r26, 0x80	; 128
    1f0c:	bf e3       	ldi	r27, 0x3F	; 63
    1f0e:	8b 87       	std	Y+11, r24	; 0x0b
    1f10:	9c 87       	std	Y+12, r25	; 0x0c
    1f12:	ad 87       	std	Y+13, r26	; 0x0d
    1f14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a ef       	ldi	r20, 0xFA	; 250
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8f 83       	std	Y+7, r24	; 0x07
    1f30:	98 87       	std	Y+8, r25	; 0x08
    1f32:	a9 87       	std	Y+9, r26	; 0x09
    1f34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <LCD_vdSendChar+0x17c>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    1f58:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5a:	78 85       	ldd	r23, Y+8	; 0x08
    1f5c:	89 85       	ldd	r24, Y+9	; 0x09
    1f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_vdSendChar+0x1dc>
    1f9a:	88 ec       	ldi	r24, 0xC8	; 200
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_vdSendChar+0x1ca>
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fba:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <LCD_vdSendChar+0x1be>
    1fc0:	14 c0       	rjmp	.+40     	; 0x1fea <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc4:	78 85       	ldd	r23, Y+8	; 0x08
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_vdSendChar+0x206>
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1fea:	6d 96       	adiw	r28, 0x1d	; 29
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <LCD_vdWriteString>:


void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <LCD_vdWriteString+0x6>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	0a c0       	rjmp	.+20     	; 0x2020 <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	80 81       	ld	r24, Z
    2012:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_vdSendChar>
		LOC_u8Ptr++;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    2020:	e9 81       	ldd	r30, Y+1	; 0x01
    2022:	fa 81       	ldd	r31, Y+2	; 0x02
    2024:	80 81       	ld	r24, Z
    2026:	88 23       	and	r24, r24
    2028:	89 f7       	brne	.-30     	; 0x200c <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_vdStringPostion+0x6>
    203a:	00 d0       	rcall	.+0      	; 0x203c <LCD_vdStringPostion+0x8>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	6a 83       	std	Y+2, r22	; 0x02
    2044:	5c 83       	std	Y+4, r21	; 0x04
    2046:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0)
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	88 23       	and	r24, r24
    204c:	31 f4       	brne	.+12     	; 0x205a <LCD_vdStringPostion+0x26>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	8f 70       	andi	r24, 0x0F	; 15
    2052:	80 68       	ori	r24, 0x80	; 128
    2054:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <LCD_vdStringPostion+0x3c>
	else if (row == 1 && pos<16)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	41 f4       	brne	.+16     	; 0x2070 <LCD_vdStringPostion+0x3c>
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	80 31       	cpi	r24, 0x10	; 16
    2064:	28 f4       	brcc	.+10     	; 0x2070 <LCD_vdStringPostion+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	8f 70       	andi	r24, 0x0F	; 15
    206a:	80 6c       	ori	r24, 0xC0	; 192
    206c:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <LCD_vdWriteString>
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <LCD_vdClear>:

void LCD_vdClear()
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <LCD_vdSendDataoCGRAM+0x6>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	9b 83       	std	Y+3, r25	; 0x03
    20a8:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    20aa:	80 e4       	ldi	r24, 0x40	; 64
    20ac:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    20b0:	19 82       	std	Y+1, r1	; 0x01
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    20b4:	ea 81       	ldd	r30, Y+2	; 0x02
    20b6:	fb 81       	ldd	r31, Y+3	; 0x03
    20b8:	80 81       	ld	r24, Z
    20ba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_vdSendChar>
		ptr++;
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	01 96       	adiw	r24, 0x01	; 1
    20c4:	9b 83       	std	Y+3, r25	; 0x03
    20c6:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	86 30       	cpi	r24, 0x06	; 6
    20d2:	80 f3       	brcs	.-32     	; 0x20b4 <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <LCD_vdGotoDDRAM+0x6>
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	88 23       	and	r24, r24
    20f2:	49 f4       	brne	.+18     	; 0x2106 <LCD_vdGotoDDRAM+0x26>
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 31       	cpi	r24, 0x10	; 16
    20f8:	30 f4       	brcc	.+12     	; 0x2106 <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	8f 70       	andi	r24, 0x0F	; 15
    20fe:	80 68       	ori	r24, 0x80	; 128
    2100:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
    2104:	0b c0       	rjmp	.+22     	; 0x211c <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	41 f4       	brne	.+16     	; 0x211c <LCD_vdGotoDDRAM+0x3c>
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	80 31       	cpi	r24, 0x10	; 16
    2110:	28 f4       	brcc	.+10     	; 0x211c <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	8f 70       	andi	r24, 0x0F	; 15
    2116:	80 6c       	ori	r24, 0xC0	; 192
    2118:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <LCD_vdWriteNum>:
				LCD_vdSendChar(reminder+'0');
				reverse/=10;
			}
}*/
void LCD_vdWriteNum(u32 num)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	29 97       	sbiw	r28, 0x09	; 9
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	6e 83       	std	Y+6, r22	; 0x06
    213c:	7f 83       	std	Y+7, r23	; 0x07
    213e:	88 87       	std	Y+8, r24	; 0x08
    2140:	99 87       	std	Y+9, r25	; 0x09
	u32 reverse=0;
    2142:	1a 82       	std	Y+2, r1	; 0x02
    2144:	1b 82       	std	Y+3, r1	; 0x03
    2146:	1c 82       	std	Y+4, r1	; 0x04
    2148:	1d 82       	std	Y+5, r1	; 0x05
	u8 reminder=0;
    214a:	19 82       	std	Y+1, r1	; 0x01
	if(num>=10)
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	9f 81       	ldd	r25, Y+7	; 0x07
    2150:	a8 85       	ldd	r26, Y+8	; 0x08
    2152:	b9 85       	ldd	r27, Y+9	; 0x09
    2154:	8a 30       	cpi	r24, 0x0A	; 10
    2156:	91 05       	cpc	r25, r1
    2158:	a1 05       	cpc	r26, r1
    215a:	b1 05       	cpc	r27, r1
    215c:	08 f4       	brcc	.+2      	; 0x2160 <LCD_vdWriteNum+0x3a>
    215e:	75 c0       	rjmp	.+234    	; 0x224a <LCD_vdWriteNum+0x124>
    2160:	3c c0       	rjmp	.+120    	; 0x21da <LCD_vdWriteNum+0xb4>
	{
		while(num !=0)
		{
			reminder = num%10;
    2162:	8e 81       	ldd	r24, Y+6	; 0x06
    2164:	9f 81       	ldd	r25, Y+7	; 0x07
    2166:	a8 85       	ldd	r26, Y+8	; 0x08
    2168:	b9 85       	ldd	r27, Y+9	; 0x09
    216a:	2a e0       	ldi	r18, 0x0A	; 10
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodsi4>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse*10+reminder;
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	ac 81       	ldd	r26, Y+4	; 0x04
    2186:	bd 81       	ldd	r27, Y+5	; 0x05
    2188:	2a e0       	ldi	r18, 0x0A	; 10
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsi3>
    2198:	9b 01       	movw	r18, r22
    219a:	ac 01       	movw	r20, r24
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e0       	ldi	r26, 0x00	; 0
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	a4 1f       	adc	r26, r20
    21ac:	b5 1f       	adc	r27, r21
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	9b 83       	std	Y+3, r25	; 0x03
    21b2:	ac 83       	std	Y+4, r26	; 0x04
    21b4:	bd 83       	std	Y+5, r27	; 0x05
			num/=10;
    21b6:	8e 81       	ldd	r24, Y+6	; 0x06
    21b8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ba:	a8 85       	ldd	r26, Y+8	; 0x08
    21bc:	b9 85       	ldd	r27, Y+9	; 0x09
    21be:	2a e0       	ldi	r18, 0x0A	; 10
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodsi4>
    21ce:	da 01       	movw	r26, r20
    21d0:	c9 01       	movw	r24, r18
    21d2:	8e 83       	std	Y+6, r24	; 0x06
    21d4:	9f 83       	std	Y+7, r25	; 0x07
    21d6:	a8 87       	std	Y+8, r26	; 0x08
    21d8:	b9 87       	std	Y+9, r27	; 0x09
{
	u32 reverse=0;
	u8 reminder=0;
	if(num>=10)
	{
		while(num !=0)
    21da:	8e 81       	ldd	r24, Y+6	; 0x06
    21dc:	9f 81       	ldd	r25, Y+7	; 0x07
    21de:	a8 85       	ldd	r26, Y+8	; 0x08
    21e0:	b9 85       	ldd	r27, Y+9	; 0x09
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	a1 05       	cpc	r26, r1
    21e6:	b1 05       	cpc	r27, r1
    21e8:	09 f0       	breq	.+2      	; 0x21ec <LCD_vdWriteNum+0xc6>
    21ea:	bb cf       	rjmp	.-138    	; 0x2162 <LCD_vdWriteNum+0x3c>
    21ec:	25 c0       	rjmp	.+74     	; 0x2238 <LCD_vdWriteNum+0x112>
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
		{
			reminder = reverse%10;
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	ac 81       	ldd	r26, Y+4	; 0x04
    21f4:	bd 81       	ldd	r27, Y+5	; 0x05
    21f6:	2a e0       	ldi	r18, 0x0A	; 10
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodsi4>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 83       	std	Y+1, r24	; 0x01
			LCD_vdSendChar(reminder+'0');
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	80 5d       	subi	r24, 0xD0	; 208
    2210:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_vdSendChar>
			reverse/=10;
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	ac 81       	ldd	r26, Y+4	; 0x04
    221a:	bd 81       	ldd	r27, Y+5	; 0x05
    221c:	2a e0       	ldi	r18, 0x0A	; 10
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	50 e0       	ldi	r21, 0x00	; 0
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 4c 12 	call	0x2498	; 0x2498 <__udivmodsi4>
    222c:	da 01       	movw	r26, r20
    222e:	c9 01       	movw	r24, r18
    2230:	8a 83       	std	Y+2, r24	; 0x02
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	ac 83       	std	Y+4, r26	; 0x04
    2236:	bd 83       	std	Y+5, r27	; 0x05
		{
			reminder = num%10;
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	ac 81       	ldd	r26, Y+4	; 0x04
    223e:	bd 81       	ldd	r27, Y+5	; 0x05
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	a1 05       	cpc	r26, r1
    2244:	b1 05       	cpc	r27, r1
    2246:	99 f6       	brne	.-90     	; 0x21ee <LCD_vdWriteNum+0xc8>
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <LCD_vdWriteNum+0x12c>
			reverse/=10;
		}
	}
	else
	{
		LCD_vdSendChar(num+'0');
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	80 5d       	subi	r24, 0xD0	; 208
    224e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_vdSendChar>
	}
}
    2252:	29 96       	adiw	r28, 0x09	; 9
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <LCD_vdWriteFloatNum>:

void LCD_vdWriteFloatNum(f32 num)
{
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	2a 97       	sbiw	r28, 0x0a	; 10
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	6f 83       	std	Y+7, r22	; 0x07
    2282:	78 87       	std	Y+8, r23	; 0x08
    2284:	89 87       	std	Y+9, r24	; 0x09
    2286:	9a 87       	std	Y+10, r25	; 0x0a
	u16 floatNum=0, number=0, it=0;
    2288:	1e 82       	std	Y+6, r1	; 0x06
    228a:	1d 82       	std	Y+5, r1	; 0x05
    228c:	1c 82       	std	Y+4, r1	; 0x04
    228e:	1b 82       	std	Y+3, r1	; 0x03
    2290:	1a 82       	std	Y+2, r1	; 0x02
    2292:	19 82       	std	Y+1, r1	; 0x01
	if(num == (u32)num)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatunsisf>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	2f 81       	ldd	r18, Y+7	; 0x07
    22b6:	38 85       	ldd	r19, Y+8	; 0x08
    22b8:	49 85       	ldd	r20, Y+9	; 0x09
    22ba:	5a 85       	ldd	r21, Y+10	; 0x0a
    22bc:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	31 f5       	brne	.+76     	; 0x2310 <LCD_vdWriteFloatNum+0xac>
	{
		LCD_vdWriteNum(num);
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_vdWriteNum>
    22dc:	6d c0       	rjmp	.+218    	; 0x23b8 <LCD_vdWriteFloatNum+0x154>
	}
	else
	{
		while(num != (u32)num)
		{
			number= num*10;
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
			it++;
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_vdWriteNum(num);
	}
	else
	{
		while(num != (u32)num)
    2310:	6f 81       	ldd	r22, Y+7	; 0x07
    2312:	78 85       	ldd	r23, Y+8	; 0x08
    2314:	89 85       	ldd	r24, Y+9	; 0x09
    2316:	9a 85       	ldd	r25, Y+10	; 0x0a
    2318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	bc 01       	movw	r22, r24
    2322:	cd 01       	movw	r24, r26
    2324:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatunsisf>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	2f 81       	ldd	r18, Y+7	; 0x07
    2332:	38 85       	ldd	r19, Y+8	; 0x08
    2334:	49 85       	ldd	r20, Y+9	; 0x09
    2336:	5a 85       	ldd	r21, Y+10	; 0x0a
    2338:	0e 94 41 03 	call	0x682	; 0x682 <__nesf2>
    233c:	88 23       	and	r24, r24
    233e:	79 f6       	brne	.-98     	; 0x22de <LCD_vdWriteFloatNum+0x7a>
		{
			number= num*10;
			it++;
		}
		LCD_vdWriteNum(num);
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	bc 01       	movw	r22, r24
    2352:	cd 01       	movw	r24, r26
    2354:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_vdWriteNum>
		LCD_vdSendChar(',');
    2358:	8c e2       	ldi	r24, 0x2C	; 44
    235a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <LCD_vdSendChar>
		floatNum=number-(((u32)num)*it*10);
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    236a:	7b 01       	movw	r14, r22
    236c:	8c 01       	movw	r16, r24
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	9c 01       	movw	r18, r24
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsi3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	2a e0       	ldi	r18, 0x0A	; 10
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	50 e0       	ldi	r21, 0x00	; 0
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 2d 12 	call	0x245a	; 0x245a <__mulsi3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9c 01       	movw	r18, r24
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	82 1b       	sub	r24, r18
    23a0:	93 0b       	sbc	r25, r19
    23a2:	9e 83       	std	Y+6, r25	; 0x06
    23a4:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vdWriteNum(floatNum);
    23a6:	8d 81       	ldd	r24, Y+5	; 0x05
    23a8:	9e 81       	ldd	r25, Y+6	; 0x06
    23aa:	cc 01       	movw	r24, r24
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	bc 01       	movw	r22, r24
    23b2:	cd 01       	movw	r24, r26
    23b4:	0e 94 93 10 	call	0x2126	; 0x2126 <LCD_vdWriteNum>

	}
}
    23b8:	2a 96       	adiw	r28, 0x0a	; 10
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	08 95       	ret

000023d2 <LCD_vdReturnHome>:

void LCD_vdReturnHome()
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (LCD_U8_RETURN_HOME);
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LCD_vdSendCmd>

}
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <LCD_u8BusyFlag>:

void LCD_u8BusyFlag()
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPintDirection(LCD_U8_DATA_PORT,PIN7, PIN_INPUT);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	67 e0       	ldi	r22, 0x07	; 7
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	0e 94 02 08 	call	0x1004	; 0x1004 <DIO_vdSetPintDirection>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN, PIN_High); //Read
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	62 e0       	ldi	r22, 0x02	; 2
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPortDirection(PortB, PORT_OUTPUT);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	6f ef       	ldi	r22, 0xFF	; 255
    241a:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_vdSetPortDirection>
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_u8BusyFlag+0x58>
	while(DIO_u8GetPinValue(LCD_U8_DATA_PORT,PIN7)==1)
	{
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	62 e0       	ldi	r22, 0x02	; 2
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	62 e0       	ldi	r22, 0x02	; 2
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
		DIO_vdSetPinValue(PortB, PIN0 ,PIN_High);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	60 e0       	ldi	r22, 0x00	; 0
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	DIO_vdSetPintDirection(LCD_U8_DATA_PORT,PIN7, PIN_INPUT);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW); //command
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN, PIN_High); //Read
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
	DIO_vdSetPortDirection(PortB, PORT_OUTPUT);
	while(DIO_u8GetPinValue(LCD_U8_DATA_PORT,PIN7)==1)
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	67 e0       	ldi	r22, 0x07	; 7
    2442:	0e 94 12 0a 	call	0x1424	; 0x1424 <DIO_u8GetPinValue>
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	59 f3       	breq	.-42     	; 0x2420 <LCD_u8BusyFlag+0x3a>
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
		DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
		DIO_vdSetPinValue(PortB, PIN0 ,PIN_High);
		//_delay_ms(1000);
	}
	DIO_vdSetPinValue(PortB, PIN0 ,PIN_LOW);
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 0a 09 	call	0x1214	; 0x1214 <DIO_vdSetPinValue>
	//return returned;
}
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <__mulsi3>:
    245a:	62 9f       	mul	r22, r18
    245c:	d0 01       	movw	r26, r0
    245e:	73 9f       	mul	r23, r19
    2460:	f0 01       	movw	r30, r0
    2462:	82 9f       	mul	r24, r18
    2464:	e0 0d       	add	r30, r0
    2466:	f1 1d       	adc	r31, r1
    2468:	64 9f       	mul	r22, r20
    246a:	e0 0d       	add	r30, r0
    246c:	f1 1d       	adc	r31, r1
    246e:	92 9f       	mul	r25, r18
    2470:	f0 0d       	add	r31, r0
    2472:	83 9f       	mul	r24, r19
    2474:	f0 0d       	add	r31, r0
    2476:	74 9f       	mul	r23, r20
    2478:	f0 0d       	add	r31, r0
    247a:	65 9f       	mul	r22, r21
    247c:	f0 0d       	add	r31, r0
    247e:	99 27       	eor	r25, r25
    2480:	72 9f       	mul	r23, r18
    2482:	b0 0d       	add	r27, r0
    2484:	e1 1d       	adc	r30, r1
    2486:	f9 1f       	adc	r31, r25
    2488:	63 9f       	mul	r22, r19
    248a:	b0 0d       	add	r27, r0
    248c:	e1 1d       	adc	r30, r1
    248e:	f9 1f       	adc	r31, r25
    2490:	bd 01       	movw	r22, r26
    2492:	cf 01       	movw	r24, r30
    2494:	11 24       	eor	r1, r1
    2496:	08 95       	ret

00002498 <__udivmodsi4>:
    2498:	a1 e2       	ldi	r26, 0x21	; 33
    249a:	1a 2e       	mov	r1, r26
    249c:	aa 1b       	sub	r26, r26
    249e:	bb 1b       	sub	r27, r27
    24a0:	fd 01       	movw	r30, r26
    24a2:	0d c0       	rjmp	.+26     	; 0x24be <__udivmodsi4_ep>

000024a4 <__udivmodsi4_loop>:
    24a4:	aa 1f       	adc	r26, r26
    24a6:	bb 1f       	adc	r27, r27
    24a8:	ee 1f       	adc	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	a2 17       	cp	r26, r18
    24ae:	b3 07       	cpc	r27, r19
    24b0:	e4 07       	cpc	r30, r20
    24b2:	f5 07       	cpc	r31, r21
    24b4:	20 f0       	brcs	.+8      	; 0x24be <__udivmodsi4_ep>
    24b6:	a2 1b       	sub	r26, r18
    24b8:	b3 0b       	sbc	r27, r19
    24ba:	e4 0b       	sbc	r30, r20
    24bc:	f5 0b       	sbc	r31, r21

000024be <__udivmodsi4_ep>:
    24be:	66 1f       	adc	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	1a 94       	dec	r1
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <__udivmodsi4_loop>
    24ca:	60 95       	com	r22
    24cc:	70 95       	com	r23
    24ce:	80 95       	com	r24
    24d0:	90 95       	com	r25
    24d2:	9b 01       	movw	r18, r22
    24d4:	ac 01       	movw	r20, r24
    24d6:	bd 01       	movw	r22, r26
    24d8:	cf 01       	movw	r24, r30
    24da:	08 95       	ret

000024dc <__prologue_saves__>:
    24dc:	2f 92       	push	r2
    24de:	3f 92       	push	r3
    24e0:	4f 92       	push	r4
    24e2:	5f 92       	push	r5
    24e4:	6f 92       	push	r6
    24e6:	7f 92       	push	r7
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	ca 1b       	sub	r28, r26
    2506:	db 0b       	sbc	r29, r27
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	09 94       	ijmp

00002514 <__epilogue_restores__>:
    2514:	2a 88       	ldd	r2, Y+18	; 0x12
    2516:	39 88       	ldd	r3, Y+17	; 0x11
    2518:	48 88       	ldd	r4, Y+16	; 0x10
    251a:	5f 84       	ldd	r5, Y+15	; 0x0f
    251c:	6e 84       	ldd	r6, Y+14	; 0x0e
    251e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2520:	8c 84       	ldd	r8, Y+12	; 0x0c
    2522:	9b 84       	ldd	r9, Y+11	; 0x0b
    2524:	aa 84       	ldd	r10, Y+10	; 0x0a
    2526:	b9 84       	ldd	r11, Y+9	; 0x09
    2528:	c8 84       	ldd	r12, Y+8	; 0x08
    252a:	df 80       	ldd	r13, Y+7	; 0x07
    252c:	ee 80       	ldd	r14, Y+6	; 0x06
    252e:	fd 80       	ldd	r15, Y+5	; 0x05
    2530:	0c 81       	ldd	r16, Y+4	; 0x04
    2532:	1b 81       	ldd	r17, Y+3	; 0x03
    2534:	aa 81       	ldd	r26, Y+2	; 0x02
    2536:	b9 81       	ldd	r27, Y+1	; 0x01
    2538:	ce 0f       	add	r28, r30
    253a:	d1 1d       	adc	r29, r1
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	ed 01       	movw	r28, r26
    2548:	08 95       	ret

0000254a <_exit>:
    254a:	f8 94       	cli

0000254c <__stop_program>:
    254c:	ff cf       	rjmp	.-2      	; 0x254c <__stop_program>
