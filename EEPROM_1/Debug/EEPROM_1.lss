
EEPROM_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c38  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000e1c  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000005c7  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Types.h"
#include "DIO_Interface.h"
#include "EEPROM_Interface.h"

void main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	u8 data=0;
  76:	19 82       	std	Y+1, r1	; 0x01
	DIO_vdSetPortDirection(PortA, PORT_OUTPUT);
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	6f ef       	ldi	r22, 0xFF	; 255
  7c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_vdSetPortDirection>
	EEPROM_write(10, 100);
  80:	8a e0       	ldi	r24, 0x0A	; 10
  82:	64 e6       	ldi	r22, 0x64	; 100
  84:	70 e0       	ldi	r23, 0x00	; 0
  86:	0e 94 79 04 	call	0x8f2	; 0x8f2 <EEPROM_write>
	EEPROM_read(&data, 100);
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	64 e6       	ldi	r22, 0x64	; 100
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	0e 94 a9 04 	call	0x952	; 0x952 <EEPROM_read>
	DIO_vdSetPortValue(PortA, data);
  96:	99 81       	ldd	r25, Y+1	; 0x01
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	69 2f       	mov	r22, r25
  9c:	0e 94 95 00 	call	0x12a	; 0x12a <DIO_vdSetPortValue>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x34>

000000a2 <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	00 d0       	rcall	.+0      	; 0xa8 <DIO_vdSetPortDirection+0x6>
  a8:	00 d0       	rcall	.+0      	; 0xaa <DIO_vdSetPortDirection+0x8>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	90 f5       	brcc	.+100    	; 0x11c <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	28 2f       	mov	r18, r24
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	3c 83       	std	Y+4, r19	; 0x04
  c0:	2b 83       	std	Y+3, r18	; 0x03
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	9c 81       	ldd	r25, Y+4	; 0x04
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	91 05       	cpc	r25, r1
  ca:	d1 f0       	breq	.+52     	; 0x100 <DIO_vdSetPortDirection+0x5e>
  cc:	2b 81       	ldd	r18, Y+3	; 0x03
  ce:	3c 81       	ldd	r19, Y+4	; 0x04
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	2c f4       	brge	.+10     	; 0xe0 <DIO_vdSetPortDirection+0x3e>
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	9c 81       	ldd	r25, Y+4	; 0x04
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	61 f0       	breq	.+24     	; 0xf6 <DIO_vdSetPortDirection+0x54>
  de:	1e c0       	rjmp	.+60     	; 0x11c <DIO_vdSetPortDirection+0x7a>
  e0:	2b 81       	ldd	r18, Y+3	; 0x03
  e2:	3c 81       	ldd	r19, Y+4	; 0x04
  e4:	22 30       	cpi	r18, 0x02	; 2
  e6:	31 05       	cpc	r19, r1
  e8:	81 f0       	breq	.+32     	; 0x10a <DIO_vdSetPortDirection+0x68>
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	9c 81       	ldd	r25, Y+4	; 0x04
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	91 05       	cpc	r25, r1
  f2:	81 f0       	breq	.+32     	; 0x114 <DIO_vdSetPortDirection+0x72>
  f4:	13 c0       	rjmp	.+38     	; 0x11c <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
  f6:	ea e3       	ldi	r30, 0x3A	; 58
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	80 83       	st	Z, r24
  fe:	0e c0       	rjmp	.+28     	; 0x11c <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
 100:	e7 e3       	ldi	r30, 0x37	; 55
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	80 83       	st	Z, r24
 108:	09 c0       	rjmp	.+18     	; 0x11c <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
 10a:	e4 e3       	ldi	r30, 0x34	; 52
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	80 83       	st	Z, r24
 112:	04 c0       	rjmp	.+8      	; 0x11c <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
 114:	e1 e3       	ldi	r30, 0x31	; 49
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	cf 91       	pop	r28
 126:	df 91       	pop	r29
 128:	08 95       	ret

0000012a <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	00 d0       	rcall	.+0      	; 0x130 <DIO_vdSetPortValue+0x6>
 130:	00 d0       	rcall	.+0      	; 0x132 <DIO_vdSetPortValue+0x8>
 132:	00 d0       	rcall	.+0      	; 0x134 <DIO_vdSetPortValue+0xa>
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	89 83       	std	Y+1, r24	; 0x01
 13a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	08 f0       	brcs	.+2      	; 0x144 <DIO_vdSetPortValue+0x1a>
 142:	64 c0       	rjmp	.+200    	; 0x20c <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	88 23       	and	r24, r24
 148:	79 f5       	brne	.+94     	; 0x1a8 <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	3e 83       	std	Y+6, r19	; 0x06
 152:	2d 83       	std	Y+5, r18	; 0x05
 154:	8d 81       	ldd	r24, Y+5	; 0x05
 156:	9e 81       	ldd	r25, Y+6	; 0x06
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	91 05       	cpc	r25, r1
 15c:	c9 f0       	breq	.+50     	; 0x190 <DIO_vdSetPortValue+0x66>
 15e:	2d 81       	ldd	r18, Y+5	; 0x05
 160:	3e 81       	ldd	r19, Y+6	; 0x06
 162:	22 30       	cpi	r18, 0x02	; 2
 164:	31 05       	cpc	r19, r1
 166:	2c f4       	brge	.+10     	; 0x172 <DIO_vdSetPortValue+0x48>
 168:	8d 81       	ldd	r24, Y+5	; 0x05
 16a:	9e 81       	ldd	r25, Y+6	; 0x06
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	61 f0       	breq	.+24     	; 0x188 <DIO_vdSetPortValue+0x5e>
 170:	4d c0       	rjmp	.+154    	; 0x20c <DIO_vdSetPortValue+0xe2>
 172:	2d 81       	ldd	r18, Y+5	; 0x05
 174:	3e 81       	ldd	r19, Y+6	; 0x06
 176:	22 30       	cpi	r18, 0x02	; 2
 178:	31 05       	cpc	r19, r1
 17a:	71 f0       	breq	.+28     	; 0x198 <DIO_vdSetPortValue+0x6e>
 17c:	8d 81       	ldd	r24, Y+5	; 0x05
 17e:	9e 81       	ldd	r25, Y+6	; 0x06
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	91 05       	cpc	r25, r1
 184:	69 f0       	breq	.+26     	; 0x1a0 <DIO_vdSetPortValue+0x76>
 186:	42 c0       	rjmp	.+132    	; 0x20c <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
 188:	eb e3       	ldi	r30, 0x3B	; 59
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	10 82       	st	Z, r1
 18e:	3e c0       	rjmp	.+124    	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
 190:	e8 e3       	ldi	r30, 0x38	; 56
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	10 82       	st	Z, r1
 196:	3a c0       	rjmp	.+116    	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
 198:	e5 e3       	ldi	r30, 0x35	; 53
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	10 82       	st	Z, r1
 19e:	36 c0       	rjmp	.+108    	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
 1a0:	e2 e3       	ldi	r30, 0x32	; 50
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	10 82       	st	Z, r1
 1a6:	32 c0       	rjmp	.+100    	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	3c 83       	std	Y+4, r19	; 0x04
 1b0:	2b 83       	std	Y+3, r18	; 0x03
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	9c 81       	ldd	r25, Y+4	; 0x04
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	91 05       	cpc	r25, r1
 1ba:	d1 f0       	breq	.+52     	; 0x1f0 <DIO_vdSetPortValue+0xc6>
 1bc:	2b 81       	ldd	r18, Y+3	; 0x03
 1be:	3c 81       	ldd	r19, Y+4	; 0x04
 1c0:	22 30       	cpi	r18, 0x02	; 2
 1c2:	31 05       	cpc	r19, r1
 1c4:	2c f4       	brge	.+10     	; 0x1d0 <DIO_vdSetPortValue+0xa6>
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <DIO_vdSetPortValue+0xbc>
 1ce:	1e c0       	rjmp	.+60     	; 0x20c <DIO_vdSetPortValue+0xe2>
 1d0:	2b 81       	ldd	r18, Y+3	; 0x03
 1d2:	3c 81       	ldd	r19, Y+4	; 0x04
 1d4:	22 30       	cpi	r18, 0x02	; 2
 1d6:	31 05       	cpc	r19, r1
 1d8:	81 f0       	breq	.+32     	; 0x1fa <DIO_vdSetPortValue+0xd0>
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	91 05       	cpc	r25, r1
 1e2:	81 f0       	breq	.+32     	; 0x204 <DIO_vdSetPortValue+0xda>
 1e4:	13 c0       	rjmp	.+38     	; 0x20c <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
 1e6:	eb e3       	ldi	r30, 0x3B	; 59
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	80 83       	st	Z, r24
 1ee:	0e c0       	rjmp	.+28     	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
 1f0:	e8 e3       	ldi	r30, 0x38	; 56
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8a 81       	ldd	r24, Y+2	; 0x02
 1f6:	80 83       	st	Z, r24
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
 1fa:	e5 e3       	ldi	r30, 0x35	; 53
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	80 83       	st	Z, r24
 202:	04 c0       	rjmp	.+8      	; 0x20c <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
 204:	e2 e3       	ldi	r30, 0x32	; 50
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
 20c:	26 96       	adiw	r28, 0x06	; 6
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	08 95       	ret

0000021e <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
 21e:	df 93       	push	r29
 220:	cf 93       	push	r28
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	27 97       	sbiw	r28, 0x07	; 7
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	f8 94       	cli
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	0f be       	out	0x3f, r0	; 63
 230:	cd bf       	out	0x3d, r28	; 61
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	6a 83       	std	Y+2, r22	; 0x02
 236:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	08 f0       	brcs	.+2      	; 0x240 <DIO_vdSetPintDirection+0x22>
 23e:	ee c0       	rjmp	.+476    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	08 f0       	brcs	.+2      	; 0x248 <DIO_vdSetPintDirection+0x2a>
 246:	ea c0       	rjmp	.+468    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_vdSetPintDirection+0x32>
 24e:	6f c0       	rjmp	.+222    	; 0x32e <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	3f 83       	std	Y+7, r19	; 0x07
 258:	2e 83       	std	Y+6, r18	; 0x06
 25a:	8e 81       	ldd	r24, Y+6	; 0x06
 25c:	9f 81       	ldd	r25, Y+7	; 0x07
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	91 05       	cpc	r25, r1
 262:	49 f1       	breq	.+82     	; 0x2b6 <DIO_vdSetPintDirection+0x98>
 264:	2e 81       	ldd	r18, Y+6	; 0x06
 266:	3f 81       	ldd	r19, Y+7	; 0x07
 268:	22 30       	cpi	r18, 0x02	; 2
 26a:	31 05       	cpc	r19, r1
 26c:	2c f4       	brge	.+10     	; 0x278 <DIO_vdSetPintDirection+0x5a>
 26e:	8e 81       	ldd	r24, Y+6	; 0x06
 270:	9f 81       	ldd	r25, Y+7	; 0x07
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	61 f0       	breq	.+24     	; 0x28e <DIO_vdSetPintDirection+0x70>
 276:	d2 c0       	rjmp	.+420    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
 278:	2e 81       	ldd	r18, Y+6	; 0x06
 27a:	3f 81       	ldd	r19, Y+7	; 0x07
 27c:	22 30       	cpi	r18, 0x02	; 2
 27e:	31 05       	cpc	r19, r1
 280:	71 f1       	breq	.+92     	; 0x2de <DIO_vdSetPintDirection+0xc0>
 282:	8e 81       	ldd	r24, Y+6	; 0x06
 284:	9f 81       	ldd	r25, Y+7	; 0x07
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	91 05       	cpc	r25, r1
 28a:	e9 f1       	breq	.+122    	; 0x306 <DIO_vdSetPintDirection+0xe8>
 28c:	c7 c0       	rjmp	.+398    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
 28e:	aa e3       	ldi	r26, 0x3A	; 58
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	ea e3       	ldi	r30, 0x3A	; 58
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	48 2f       	mov	r20, r24
 29a:	8a 81       	ldd	r24, Y+2	; 0x02
 29c:	28 2f       	mov	r18, r24
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 2e       	mov	r0, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_vdSetPintDirection+0x8e>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_vdSetPintDirection+0x8a>
 2b0:	84 2b       	or	r24, r20
 2b2:	8c 93       	st	X, r24
 2b4:	b3 c0       	rjmp	.+358    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
 2b6:	a7 e3       	ldi	r26, 0x37	; 55
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	e7 e3       	ldi	r30, 0x37	; 55
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	48 2f       	mov	r20, r24
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 2e       	mov	r0, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vdSetPintDirection+0xb6>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vdSetPintDirection+0xb2>
 2d8:	84 2b       	or	r24, r20
 2da:	8c 93       	st	X, r24
 2dc:	9f c0       	rjmp	.+318    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
 2de:	a4 e3       	ldi	r26, 0x34	; 52
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	e4 e3       	ldi	r30, 0x34	; 52
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	48 2f       	mov	r20, r24
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 2e       	mov	r0, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_vdSetPintDirection+0xde>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_vdSetPintDirection+0xda>
 300:	84 2b       	or	r24, r20
 302:	8c 93       	st	X, r24
 304:	8b c0       	rjmp	.+278    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
 306:	a1 e3       	ldi	r26, 0x31	; 49
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e1 e3       	ldi	r30, 0x31	; 49
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_vdSetPintDirection+0x106>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_vdSetPintDirection+0x102>
 328:	84 2b       	or	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	77 c0       	rjmp	.+238    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	88 23       	and	r24, r24
 332:	09 f0       	breq	.+2      	; 0x336 <DIO_vdSetPintDirection+0x118>
 334:	73 c0       	rjmp	.+230    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	3d 83       	std	Y+5, r19	; 0x05
 33e:	2c 83       	std	Y+4, r18	; 0x04
 340:	8c 81       	ldd	r24, Y+4	; 0x04
 342:	9d 81       	ldd	r25, Y+5	; 0x05
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	91 05       	cpc	r25, r1
 348:	59 f1       	breq	.+86     	; 0x3a0 <DIO_vdSetPintDirection+0x182>
 34a:	2c 81       	ldd	r18, Y+4	; 0x04
 34c:	3d 81       	ldd	r19, Y+5	; 0x05
 34e:	22 30       	cpi	r18, 0x02	; 2
 350:	31 05       	cpc	r19, r1
 352:	2c f4       	brge	.+10     	; 0x35e <DIO_vdSetPintDirection+0x140>
 354:	8c 81       	ldd	r24, Y+4	; 0x04
 356:	9d 81       	ldd	r25, Y+5	; 0x05
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	69 f0       	breq	.+26     	; 0x376 <DIO_vdSetPintDirection+0x158>
 35c:	5f c0       	rjmp	.+190    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
 35e:	2c 81       	ldd	r18, Y+4	; 0x04
 360:	3d 81       	ldd	r19, Y+5	; 0x05
 362:	22 30       	cpi	r18, 0x02	; 2
 364:	31 05       	cpc	r19, r1
 366:	89 f1       	breq	.+98     	; 0x3ca <DIO_vdSetPintDirection+0x1ac>
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	9d 81       	ldd	r25, Y+5	; 0x05
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	91 05       	cpc	r25, r1
 370:	09 f4       	brne	.+2      	; 0x374 <DIO_vdSetPintDirection+0x156>
 372:	40 c0       	rjmp	.+128    	; 0x3f4 <DIO_vdSetPintDirection+0x1d6>
 374:	53 c0       	rjmp	.+166    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
 376:	aa e3       	ldi	r26, 0x3A	; 58
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	ea e3       	ldi	r30, 0x3A	; 58
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_vdSetPintDirection+0x176>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_vdSetPintDirection+0x172>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
 39e:	3e c0       	rjmp	.+124    	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
 3a0:	a7 e3       	ldi	r26, 0x37	; 55
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	e7 e3       	ldi	r30, 0x37	; 55
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	48 2f       	mov	r20, r24
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 2e       	mov	r0, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_vdSetPintDirection+0x1a0>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	0a 94       	dec	r0
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_vdSetPintDirection+0x19c>
 3c2:	80 95       	com	r24
 3c4:	84 23       	and	r24, r20
 3c6:	8c 93       	st	X, r24
 3c8:	29 c0       	rjmp	.+82     	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
 3ca:	a4 e3       	ldi	r26, 0x34	; 52
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	e4 e3       	ldi	r30, 0x34	; 52
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_vdSetPintDirection+0x1ca>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_vdSetPintDirection+0x1c6>
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	8c 93       	st	X, r24
 3f2:	14 c0       	rjmp	.+40     	; 0x41c <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
 3f4:	a1 e3       	ldi	r26, 0x31	; 49
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e1 e3       	ldi	r30, 0x31	; 49
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	48 2f       	mov	r20, r24
 400:	8a 81       	ldd	r24, Y+2	; 0x02
 402:	28 2f       	mov	r18, r24
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 2e       	mov	r0, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_vdSetPintDirection+0x1f4>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_vdSetPintDirection+0x1f0>
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
 41c:	27 96       	adiw	r28, 0x07	; 7
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	27 97       	sbiw	r28, 0x07	; 7
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	6a 83       	std	Y+2, r22	; 0x02
 446:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	84 30       	cpi	r24, 0x04	; 4
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_vdSetPinValue+0x22>
 44e:	ee c0       	rjmp	.+476    	; 0x62c <DIO_vdSetPinValue+0x1fe>
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	88 30       	cpi	r24, 0x08	; 8
 454:	08 f0       	brcs	.+2      	; 0x458 <DIO_vdSetPinValue+0x2a>
 456:	ea c0       	rjmp	.+468    	; 0x62c <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <DIO_vdSetPinValue+0x32>
 45e:	6f c0       	rjmp	.+222    	; 0x53e <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	3f 83       	std	Y+7, r19	; 0x07
 468:	2e 83       	std	Y+6, r18	; 0x06
 46a:	8e 81       	ldd	r24, Y+6	; 0x06
 46c:	9f 81       	ldd	r25, Y+7	; 0x07
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	91 05       	cpc	r25, r1
 472:	49 f1       	breq	.+82     	; 0x4c6 <DIO_vdSetPinValue+0x98>
 474:	2e 81       	ldd	r18, Y+6	; 0x06
 476:	3f 81       	ldd	r19, Y+7	; 0x07
 478:	22 30       	cpi	r18, 0x02	; 2
 47a:	31 05       	cpc	r19, r1
 47c:	2c f4       	brge	.+10     	; 0x488 <DIO_vdSetPinValue+0x5a>
 47e:	8e 81       	ldd	r24, Y+6	; 0x06
 480:	9f 81       	ldd	r25, Y+7	; 0x07
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	61 f0       	breq	.+24     	; 0x49e <DIO_vdSetPinValue+0x70>
 486:	d2 c0       	rjmp	.+420    	; 0x62c <DIO_vdSetPinValue+0x1fe>
 488:	2e 81       	ldd	r18, Y+6	; 0x06
 48a:	3f 81       	ldd	r19, Y+7	; 0x07
 48c:	22 30       	cpi	r18, 0x02	; 2
 48e:	31 05       	cpc	r19, r1
 490:	71 f1       	breq	.+92     	; 0x4ee <DIO_vdSetPinValue+0xc0>
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	9f 81       	ldd	r25, Y+7	; 0x07
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	91 05       	cpc	r25, r1
 49a:	e9 f1       	breq	.+122    	; 0x516 <DIO_vdSetPinValue+0xe8>
 49c:	c7 c0       	rjmp	.+398    	; 0x62c <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
 49e:	ab e3       	ldi	r26, 0x3B	; 59
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	eb e3       	ldi	r30, 0x3B	; 59
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_vdSetPinValue+0x8e>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_vdSetPinValue+0x8a>
 4c0:	84 2b       	or	r24, r20
 4c2:	8c 93       	st	X, r24
 4c4:	b3 c0       	rjmp	.+358    	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
 4c6:	a8 e3       	ldi	r26, 0x38	; 56
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e8 e3       	ldi	r30, 0x38	; 56
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	48 2f       	mov	r20, r24
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_vdSetPinValue+0xb6>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_vdSetPinValue+0xb2>
 4e8:	84 2b       	or	r24, r20
 4ea:	8c 93       	st	X, r24
 4ec:	9f c0       	rjmp	.+318    	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
 4ee:	a5 e3       	ldi	r26, 0x35	; 53
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	e5 e3       	ldi	r30, 0x35	; 53
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_vdSetPinValue+0xde>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_vdSetPinValue+0xda>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
 514:	8b c0       	rjmp	.+278    	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
 516:	a2 e3       	ldi	r26, 0x32	; 50
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e2 e3       	ldi	r30, 0x32	; 50
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_vdSetPinValue+0x106>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_vdSetPinValue+0x102>
 538:	84 2b       	or	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	77 c0       	rjmp	.+238    	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	88 23       	and	r24, r24
 542:	09 f0       	breq	.+2      	; 0x546 <DIO_vdSetPinValue+0x118>
 544:	73 c0       	rjmp	.+230    	; 0x62c <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	3d 83       	std	Y+5, r19	; 0x05
 54e:	2c 83       	std	Y+4, r18	; 0x04
 550:	8c 81       	ldd	r24, Y+4	; 0x04
 552:	9d 81       	ldd	r25, Y+5	; 0x05
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	91 05       	cpc	r25, r1
 558:	59 f1       	breq	.+86     	; 0x5b0 <DIO_vdSetPinValue+0x182>
 55a:	2c 81       	ldd	r18, Y+4	; 0x04
 55c:	3d 81       	ldd	r19, Y+5	; 0x05
 55e:	22 30       	cpi	r18, 0x02	; 2
 560:	31 05       	cpc	r19, r1
 562:	2c f4       	brge	.+10     	; 0x56e <DIO_vdSetPinValue+0x140>
 564:	8c 81       	ldd	r24, Y+4	; 0x04
 566:	9d 81       	ldd	r25, Y+5	; 0x05
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	69 f0       	breq	.+26     	; 0x586 <DIO_vdSetPinValue+0x158>
 56c:	5f c0       	rjmp	.+190    	; 0x62c <DIO_vdSetPinValue+0x1fe>
 56e:	2c 81       	ldd	r18, Y+4	; 0x04
 570:	3d 81       	ldd	r19, Y+5	; 0x05
 572:	22 30       	cpi	r18, 0x02	; 2
 574:	31 05       	cpc	r19, r1
 576:	89 f1       	breq	.+98     	; 0x5da <DIO_vdSetPinValue+0x1ac>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	9d 81       	ldd	r25, Y+5	; 0x05
 57c:	83 30       	cpi	r24, 0x03	; 3
 57e:	91 05       	cpc	r25, r1
 580:	09 f4       	brne	.+2      	; 0x584 <DIO_vdSetPinValue+0x156>
 582:	40 c0       	rjmp	.+128    	; 0x604 <DIO_vdSetPinValue+0x1d6>
 584:	53 c0       	rjmp	.+166    	; 0x62c <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
 586:	ab e3       	ldi	r26, 0x3B	; 59
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	eb e3       	ldi	r30, 0x3B	; 59
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	48 2f       	mov	r20, r24
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 2e       	mov	r0, r18
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_vdSetPinValue+0x176>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_vdSetPinValue+0x172>
 5a8:	80 95       	com	r24
 5aa:	84 23       	and	r24, r20
 5ac:	8c 93       	st	X, r24
 5ae:	3e c0       	rjmp	.+124    	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
 5b0:	a8 e3       	ldi	r26, 0x38	; 56
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	e8 e3       	ldi	r30, 0x38	; 56
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	48 2f       	mov	r20, r24
 5bc:	8a 81       	ldd	r24, Y+2	; 0x02
 5be:	28 2f       	mov	r18, r24
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 2e       	mov	r0, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_vdSetPinValue+0x1a0>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	0a 94       	dec	r0
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_vdSetPinValue+0x19c>
 5d2:	80 95       	com	r24
 5d4:	84 23       	and	r24, r20
 5d6:	8c 93       	st	X, r24
 5d8:	29 c0       	rjmp	.+82     	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
 5da:	a5 e3       	ldi	r26, 0x35	; 53
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	e5 e3       	ldi	r30, 0x35	; 53
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	48 2f       	mov	r20, r24
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 2e       	mov	r0, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_vdSetPinValue+0x1ca>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	0a 94       	dec	r0
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_vdSetPinValue+0x1c6>
 5fc:	80 95       	com	r24
 5fe:	84 23       	and	r24, r20
 600:	8c 93       	st	X, r24
 602:	14 c0       	rjmp	.+40     	; 0x62c <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
 604:	a2 e3       	ldi	r26, 0x32	; 50
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e2 e3       	ldi	r30, 0x32	; 50
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	48 2f       	mov	r20, r24
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 2e       	mov	r0, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_vdSetPinValue+0x1f4>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_vdSetPinValue+0x1f0>
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
 62c:	27 96       	adiw	r28, 0x07	; 7
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	00 d0       	rcall	.+0      	; 0x644 <DIO_u8GetPinValue+0x6>
 644:	00 d0       	rcall	.+0      	; 0x646 <DIO_u8GetPinValue+0x8>
 646:	00 d0       	rcall	.+0      	; 0x648 <DIO_u8GetPinValue+0xa>
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	84 30       	cpi	r24, 0x04	; 4
 654:	08 f0       	brcs	.+2      	; 0x658 <DIO_u8GetPinValue+0x1a>
 656:	70 c0       	rjmp	.+224    	; 0x738 <DIO_u8GetPinValue+0xfa>
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	88 30       	cpi	r24, 0x08	; 8
 65c:	08 f0       	brcs	.+2      	; 0x660 <DIO_u8GetPinValue+0x22>
 65e:	6c c0       	rjmp	.+216    	; 0x738 <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
 660:	89 81       	ldd	r24, Y+1	; 0x01
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	3d 83       	std	Y+5, r19	; 0x05
 668:	2c 83       	std	Y+4, r18	; 0x04
 66a:	4c 81       	ldd	r20, Y+4	; 0x04
 66c:	5d 81       	ldd	r21, Y+5	; 0x05
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	51 05       	cpc	r21, r1
 672:	49 f1       	breq	.+82     	; 0x6c6 <DIO_u8GetPinValue+0x88>
 674:	8c 81       	ldd	r24, Y+4	; 0x04
 676:	9d 81       	ldd	r25, Y+5	; 0x05
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	91 05       	cpc	r25, r1
 67c:	34 f4       	brge	.+12     	; 0x68a <DIO_u8GetPinValue+0x4c>
 67e:	2c 81       	ldd	r18, Y+4	; 0x04
 680:	3d 81       	ldd	r19, Y+5	; 0x05
 682:	21 15       	cp	r18, r1
 684:	31 05       	cpc	r19, r1
 686:	61 f0       	breq	.+24     	; 0x6a0 <DIO_u8GetPinValue+0x62>
 688:	57 c0       	rjmp	.+174    	; 0x738 <DIO_u8GetPinValue+0xfa>
 68a:	4c 81       	ldd	r20, Y+4	; 0x04
 68c:	5d 81       	ldd	r21, Y+5	; 0x05
 68e:	42 30       	cpi	r20, 0x02	; 2
 690:	51 05       	cpc	r21, r1
 692:	61 f1       	breq	.+88     	; 0x6ec <DIO_u8GetPinValue+0xae>
 694:	8c 81       	ldd	r24, Y+4	; 0x04
 696:	9d 81       	ldd	r25, Y+5	; 0x05
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	91 05       	cpc	r25, r1
 69c:	d1 f1       	breq	.+116    	; 0x712 <DIO_u8GetPinValue+0xd4>
 69e:	4c c0       	rjmp	.+152    	; 0x738 <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
 6a0:	e9 e3       	ldi	r30, 0x39	; 57
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	28 2f       	mov	r18, r24
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	88 2f       	mov	r24, r24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	a9 01       	movw	r20, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_u8GetPinValue+0x7a>
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_u8GetPinValue+0x76>
 6bc:	ca 01       	movw	r24, r20
 6be:	58 2f       	mov	r21, r24
 6c0:	51 70       	andi	r21, 0x01	; 1
 6c2:	5b 83       	std	Y+3, r21	; 0x03
 6c4:	3a c0       	rjmp	.+116    	; 0x73a <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
 6c6:	e6 e3       	ldi	r30, 0x36	; 54
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	a9 01       	movw	r20, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_u8GetPinValue+0xa0>
 6da:	55 95       	asr	r21
 6dc:	47 95       	ror	r20
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_u8GetPinValue+0x9c>
 6e2:	ca 01       	movw	r24, r20
 6e4:	58 2f       	mov	r21, r24
 6e6:	51 70       	andi	r21, 0x01	; 1
 6e8:	5b 83       	std	Y+3, r21	; 0x03
 6ea:	27 c0       	rjmp	.+78     	; 0x73a <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
 6ec:	e3 e3       	ldi	r30, 0x33	; 51
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	a9 01       	movw	r20, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_u8GetPinValue+0xc6>
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_u8GetPinValue+0xc2>
 708:	ca 01       	movw	r24, r20
 70a:	58 2f       	mov	r21, r24
 70c:	51 70       	andi	r21, 0x01	; 1
 70e:	5b 83       	std	Y+3, r21	; 0x03
 710:	14 c0       	rjmp	.+40     	; 0x73a <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
 712:	e0 e3       	ldi	r30, 0x30	; 48
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	28 2f       	mov	r18, r24
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	a9 01       	movw	r20, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <DIO_u8GetPinValue+0xec>
 726:	55 95       	asr	r21
 728:	47 95       	ror	r20
 72a:	8a 95       	dec	r24
 72c:	e2 f7       	brpl	.-8      	; 0x726 <DIO_u8GetPinValue+0xe8>
 72e:	ca 01       	movw	r24, r20
 730:	58 2f       	mov	r21, r24
 732:	51 70       	andi	r21, 0x01	; 1
 734:	5b 83       	std	Y+3, r21	; 0x03
 736:	01 c0       	rjmp	.+2      	; 0x73a <DIO_u8GetPinValue+0xfc>
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	8e 83       	std	Y+6, r24	; 0x06
 73e:	8e 81       	ldd	r24, Y+6	; 0x06
 740:	26 96       	adiw	r28, 0x06	; 6
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	f8 94       	cli
 746:	de bf       	out	0x3e, r29	; 62
 748:	0f be       	out	0x3f, r0	; 63
 74a:	cd bf       	out	0x3d, r28	; 61
 74c:	cf 91       	pop	r28
 74e:	df 91       	pop	r29
 750:	08 95       	ret

00000752 <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
 752:	df 93       	push	r29
 754:	cf 93       	push	r28
 756:	00 d0       	rcall	.+0      	; 0x758 <DIO_vdTogPortValue+0x6>
 758:	0f 92       	push	r0
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
 760:	89 81       	ldd	r24, Y+1	; 0x01
 762:	84 30       	cpi	r24, 0x04	; 4
 764:	08 f0       	brcs	.+2      	; 0x768 <DIO_vdTogPortValue+0x16>
 766:	3e c0       	rjmp	.+124    	; 0x7e4 <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	28 2f       	mov	r18, r24
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	3b 83       	std	Y+3, r19	; 0x03
 770:	2a 83       	std	Y+2, r18	; 0x02
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	9b 81       	ldd	r25, Y+3	; 0x03
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	91 05       	cpc	r25, r1
 77a:	e9 f0       	breq	.+58     	; 0x7b6 <DIO_vdTogPortValue+0x64>
 77c:	2a 81       	ldd	r18, Y+2	; 0x02
 77e:	3b 81       	ldd	r19, Y+3	; 0x03
 780:	22 30       	cpi	r18, 0x02	; 2
 782:	31 05       	cpc	r19, r1
 784:	2c f4       	brge	.+10     	; 0x790 <DIO_vdTogPortValue+0x3e>
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	9b 81       	ldd	r25, Y+3	; 0x03
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	61 f0       	breq	.+24     	; 0x7a6 <DIO_vdTogPortValue+0x54>
 78e:	2a c0       	rjmp	.+84     	; 0x7e4 <DIO_vdTogPortValue+0x92>
 790:	2a 81       	ldd	r18, Y+2	; 0x02
 792:	3b 81       	ldd	r19, Y+3	; 0x03
 794:	22 30       	cpi	r18, 0x02	; 2
 796:	31 05       	cpc	r19, r1
 798:	b1 f0       	breq	.+44     	; 0x7c6 <DIO_vdTogPortValue+0x74>
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	9b 81       	ldd	r25, Y+3	; 0x03
 79e:	83 30       	cpi	r24, 0x03	; 3
 7a0:	91 05       	cpc	r25, r1
 7a2:	c9 f0       	breq	.+50     	; 0x7d6 <DIO_vdTogPortValue+0x84>
 7a4:	1f c0       	rjmp	.+62     	; 0x7e4 <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
 7a6:	ab e3       	ldi	r26, 0x3B	; 59
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	eb e3       	ldi	r30, 0x3B	; 59
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	80 95       	com	r24
 7b2:	8c 93       	st	X, r24
 7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
 7b6:	a8 e3       	ldi	r26, 0x38	; 56
 7b8:	b0 e0       	ldi	r27, 0x00	; 0
 7ba:	e8 e3       	ldi	r30, 0x38	; 56
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	80 95       	com	r24
 7c2:	8c 93       	st	X, r24
 7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
 7c6:	a5 e3       	ldi	r26, 0x35	; 53
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	e5 e3       	ldi	r30, 0x35	; 53
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	80 95       	com	r24
 7d2:	8c 93       	st	X, r24
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
 7d6:	a2 e3       	ldi	r26, 0x32	; 50
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	e2 e3       	ldi	r30, 0x32	; 50
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	80 95       	com	r24
 7e2:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	cf 91       	pop	r28
 7ec:	df 91       	pop	r29
 7ee:	08 95       	ret

000007f0 <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
 7f0:	df 93       	push	r29
 7f2:	cf 93       	push	r28
 7f4:	00 d0       	rcall	.+0      	; 0x7f6 <DIO_vdTogPinValue+0x6>
 7f6:	00 d0       	rcall	.+0      	; 0x7f8 <DIO_vdTogPinValue+0x8>
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	89 83       	std	Y+1, r24	; 0x01
 7fe:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
 800:	89 81       	ldd	r24, Y+1	; 0x01
 802:	84 30       	cpi	r24, 0x04	; 4
 804:	08 f0       	brcs	.+2      	; 0x808 <DIO_vdTogPinValue+0x18>
 806:	6e c0       	rjmp	.+220    	; 0x8e4 <__stack+0x85>
	{
		switch(PortID)
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	28 2f       	mov	r18, r24
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	3c 83       	std	Y+4, r19	; 0x04
 810:	2b 83       	std	Y+3, r18	; 0x03
 812:	8b 81       	ldd	r24, Y+3	; 0x03
 814:	9c 81       	ldd	r25, Y+4	; 0x04
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	91 05       	cpc	r25, r1
 81a:	49 f1       	breq	.+82     	; 0x86e <__stack+0xf>
 81c:	2b 81       	ldd	r18, Y+3	; 0x03
 81e:	3c 81       	ldd	r19, Y+4	; 0x04
 820:	22 30       	cpi	r18, 0x02	; 2
 822:	31 05       	cpc	r19, r1
 824:	2c f4       	brge	.+10     	; 0x830 <DIO_vdTogPinValue+0x40>
 826:	8b 81       	ldd	r24, Y+3	; 0x03
 828:	9c 81       	ldd	r25, Y+4	; 0x04
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	61 f0       	breq	.+24     	; 0x846 <DIO_vdTogPinValue+0x56>
 82e:	5a c0       	rjmp	.+180    	; 0x8e4 <__stack+0x85>
 830:	2b 81       	ldd	r18, Y+3	; 0x03
 832:	3c 81       	ldd	r19, Y+4	; 0x04
 834:	22 30       	cpi	r18, 0x02	; 2
 836:	31 05       	cpc	r19, r1
 838:	71 f1       	breq	.+92     	; 0x896 <__stack+0x37>
 83a:	8b 81       	ldd	r24, Y+3	; 0x03
 83c:	9c 81       	ldd	r25, Y+4	; 0x04
 83e:	83 30       	cpi	r24, 0x03	; 3
 840:	91 05       	cpc	r25, r1
 842:	e9 f1       	breq	.+122    	; 0x8be <__stack+0x5f>
 844:	4f c0       	rjmp	.+158    	; 0x8e4 <__stack+0x85>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
 846:	ab e3       	ldi	r26, 0x3B	; 59
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	eb e3       	ldi	r30, 0x3B	; 59
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	80 81       	ld	r24, Z
 850:	48 2f       	mov	r20, r24
 852:	8a 81       	ldd	r24, Y+2	; 0x02
 854:	28 2f       	mov	r18, r24
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 2e       	mov	r0, r18
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	0a 94       	dec	r0
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	84 27       	eor	r24, r20
 86a:	8c 93       	st	X, r24
 86c:	3b c0       	rjmp	.+118    	; 0x8e4 <__stack+0x85>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
 86e:	a8 e3       	ldi	r26, 0x38	; 56
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	e8 e3       	ldi	r30, 0x38	; 56
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	48 2f       	mov	r20, r24
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	28 2f       	mov	r18, r24
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 2e       	mov	r0, r18
 886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
 888:	88 0f       	add	r24, r24
 88a:	99 1f       	adc	r25, r25
 88c:	0a 94       	dec	r0
 88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
 890:	84 27       	eor	r24, r20
 892:	8c 93       	st	X, r24
 894:	27 c0       	rjmp	.+78     	; 0x8e4 <__stack+0x85>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
 896:	a5 e3       	ldi	r26, 0x35	; 53
 898:	b0 e0       	ldi	r27, 0x00	; 0
 89a:	e5 e3       	ldi	r30, 0x35	; 53
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	48 2f       	mov	r20, r24
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 2e       	mov	r0, r18
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	0a 94       	dec	r0
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	84 27       	eor	r24, r20
 8ba:	8c 93       	st	X, r24
 8bc:	13 c0       	rjmp	.+38     	; 0x8e4 <__stack+0x85>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
 8be:	a2 e3       	ldi	r26, 0x32	; 50
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e2 e3       	ldi	r30, 0x32	; 50
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	48 2f       	mov	r20, r24
 8ca:	8a 81       	ldd	r24, Y+2	; 0x02
 8cc:	28 2f       	mov	r18, r24
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	02 2e       	mov	r0, r18
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	0a 94       	dec	r0
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
 8e0:	84 27       	eor	r24, r20
 8e2:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
 8e4:	0f 90       	pop	r0
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	0f 90       	pop	r0
 8ec:	cf 91       	pop	r28
 8ee:	df 91       	pop	r29
 8f0:	08 95       	ret

000008f2 <EEPROM_write>:
#include "Macros.h"
#include "I2C_Interface.h"
#include "EEPROM_Interface.h"

void EEPROM_write(u8 Data, u16 address)
{
 8f2:	df 93       	push	r29
 8f4:	cf 93       	push	r28
 8f6:	00 d0       	rcall	.+0      	; 0x8f8 <EEPROM_write+0x6>
 8f8:	00 d0       	rcall	.+0      	; 0x8fa <EEPROM_write+0x8>
 8fa:	0f 92       	push	r0
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	8b 83       	std	Y+3, r24	; 0x03
 902:	7d 83       	std	Y+5, r23	; 0x05
 904:	6c 83       	std	Y+4, r22	; 0x04
	u8 Address=0, ByteAddress=0 ;
 906:	1a 82       	std	Y+2, r1	; 0x02
 908:	19 82       	std	Y+1, r1	; 0x01
//	u16 ByteSelect=0;
	Send_vdStartCondition();
 90a:	0e 94 10 05 	call	0xa20	; 0xa20 <Send_vdStartCondition>
	Address = (Device_Select)|(DeviceEnable<<3)|(u8)((address>>7)&0x06);
 90e:	8c 81       	ldd	r24, Y+4	; 0x04
 910:	9d 81       	ldd	r25, Y+5	; 0x05
 912:	88 0f       	add	r24, r24
 914:	89 2f       	mov	r24, r25
 916:	88 1f       	adc	r24, r24
 918:	99 0b       	sbc	r25, r25
 91a:	91 95       	neg	r25
 91c:	86 70       	andi	r24, 0x06	; 6
 91e:	80 6a       	ori	r24, 0xA0	; 160
 920:	8a 83       	std	Y+2, r24	; 0x02
	Address = Address>>1;
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	86 95       	lsr	r24
 926:	8a 83       	std	Y+2, r24	; 0x02
	Send_vdSlaveAddWrite(Address);
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	0e 94 4a 05 	call	0xa94	; 0xa94 <Send_vdSlaveAddWrite>
	ByteAddress = (u8)(address);
 92e:	8c 81       	ldd	r24, Y+4	; 0x04
 930:	89 83       	std	Y+1, r24	; 0x01
	Send_vdData(ByteAddress);
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	0e 94 c0 05 	call	0xb80	; 0xb80 <Send_vdData>
	Send_vdData(Data);
 938:	8b 81       	ldd	r24, Y+3	; 0x03
 93a:	0e 94 c0 05 	call	0xb80	; 0xb80 <Send_vdData>
	Send_vdStopCondition();
 93e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Send_vdStopCondition>
}
 942:	0f 90       	pop	r0
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	0f 90       	pop	r0
 94c:	cf 91       	pop	r28
 94e:	df 91       	pop	r29
 950:	08 95       	ret

00000952 <EEPROM_read>:

void EEPROM_read(u8* Data, u16 address)
{
 952:	df 93       	push	r29
 954:	cf 93       	push	r28
 956:	00 d0       	rcall	.+0      	; 0x958 <EEPROM_read+0x6>
 958:	00 d0       	rcall	.+0      	; 0x95a <EEPROM_read+0x8>
 95a:	00 d0       	rcall	.+0      	; 0x95c <EEPROM_read+0xa>
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	9c 83       	std	Y+4, r25	; 0x04
 962:	8b 83       	std	Y+3, r24	; 0x03
 964:	7e 83       	std	Y+6, r23	; 0x06
 966:	6d 83       	std	Y+5, r22	; 0x05
	u8 Address=0,ByteAddress=0 ;
 968:	1a 82       	std	Y+2, r1	; 0x02
 96a:	19 82       	std	Y+1, r1	; 0x01
	//u16 ByteSelect=0;
	Send_vdStartCondition();
 96c:	0e 94 10 05 	call	0xa20	; 0xa20 <Send_vdStartCondition>
	Address = (Device_Select)|(DeviceEnable<<3)|(u8)((address>>7)&0x06);
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	9e 81       	ldd	r25, Y+6	; 0x06
 974:	88 0f       	add	r24, r24
 976:	89 2f       	mov	r24, r25
 978:	88 1f       	adc	r24, r24
 97a:	99 0b       	sbc	r25, r25
 97c:	91 95       	neg	r25
 97e:	86 70       	andi	r24, 0x06	; 6
 980:	80 6a       	ori	r24, 0xA0	; 160
 982:	8a 83       	std	Y+2, r24	; 0x02
	Address = Address>>1;
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	86 95       	lsr	r24
 988:	8a 83       	std	Y+2, r24	; 0x02
	Send_vdSlaveAddWrite(Address);
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	0e 94 4a 05 	call	0xa94	; 0xa94 <Send_vdSlaveAddWrite>
	ByteAddress = (u8)(address);
 990:	8d 81       	ldd	r24, Y+5	; 0x05
 992:	89 83       	std	Y+1, r24	; 0x01
	Send_vdData(ByteAddress);
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	0e 94 c0 05 	call	0xb80	; 0xb80 <Send_vdData>
	Send_vdRepStartCondition();
 99a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Send_vdRepStartCondition>
	Send_vdSlaveAddRead(Address);
 99e:	8a 81       	ldd	r24, Y+2	; 0x02
 9a0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <Send_vdSlaveAddRead>
	*Data= Read_u8Data();
 9a4:	0e 94 dd 05 	call	0xbba	; 0xbba <Read_u8Data>
 9a8:	eb 81       	ldd	r30, Y+3	; 0x03
 9aa:	fc 81       	ldd	r31, Y+4	; 0x04
 9ac:	80 83       	st	Z, r24
	Send_vdStopCondition();
 9ae:	0e 94 2d 05 	call	0xa5a	; 0xa5a <Send_vdStopCondition>
}
 9b2:	26 96       	adiw	r28, 0x06	; 6
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	f8 94       	cli
 9b8:	de bf       	out	0x3e, r29	; 62
 9ba:	0f be       	out	0x3f, r0	; 63
 9bc:	cd bf       	out	0x3d, r28	; 61
 9be:	cf 91       	pop	r28
 9c0:	df 91       	pop	r29
 9c2:	08 95       	ret

000009c4 <init_vdMaster>:
//It's up to 400KH
#define F_SCL 200000UL
#define TWBRValue ((((F_CPU / F_SCL) / Prescaler1) - 16 ) / 2)
//12
void init_vdMaster()
{
 9c4:	df 93       	push	r29
 9c6:	cf 93       	push	r28
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
	//Select division factor
	CLR_BIT(TWSR_Reg, TWPS0);
 9cc:	a1 e2       	ldi	r26, 0x21	; 33
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	e1 e2       	ldi	r30, 0x21	; 33
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	80 81       	ld	r24, Z
 9d6:	8e 7f       	andi	r24, 0xFE	; 254
 9d8:	8c 93       	st	X, r24
	CLR_BIT(TWSR_Reg, TWPS1);
 9da:	a1 e2       	ldi	r26, 0x21	; 33
 9dc:	b0 e0       	ldi	r27, 0x00	; 0
 9de:	e1 e2       	ldi	r30, 0x21	; 33
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	8d 7f       	andi	r24, 0xFD	; 253
 9e6:	8c 93       	st	X, r24
	//Bit rate
	SET_BYTE(TWBR_Reg, TWBRValue);
 9e8:	e0 e2       	ldi	r30, 0x20	; 32
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	8c e0       	ldi	r24, 0x0C	; 12
 9ee:	80 83       	st	Z, r24
	SET_BIT(TWCR_Reg, EnableAck_TWEA);
 9f0:	a6 e5       	ldi	r26, 0x56	; 86
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
 9f4:	e6 e5       	ldi	r30, 0x56	; 86
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	80 81       	ld	r24, Z
 9fa:	80 64       	ori	r24, 0x40	; 64
 9fc:	8c 93       	st	X, r24
	SET_BIT(TWAR_Reg, GeneralCall);
 9fe:	a2 e2       	ldi	r26, 0x22	; 34
 a00:	b0 e0       	ldi	r27, 0x00	; 0
 a02:	e2 e2       	ldi	r30, 0x22	; 34
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	80 81       	ld	r24, Z
 a08:	81 60       	ori	r24, 0x01	; 1
 a0a:	8c 93       	st	X, r24
	//Enable
	SET_BIT(TWCR_Reg, Enable_TWEN);
 a0c:	a6 e5       	ldi	r26, 0x56	; 86
 a0e:	b0 e0       	ldi	r27, 0x00	; 0
 a10:	e6 e5       	ldi	r30, 0x56	; 86
 a12:	f0 e0       	ldi	r31, 0x00	; 0
 a14:	80 81       	ld	r24, Z
 a16:	84 60       	ori	r24, 0x04	; 4
 a18:	8c 93       	st	X, r24

}
 a1a:	cf 91       	pop	r28
 a1c:	df 91       	pop	r29
 a1e:	08 95       	ret

00000a20 <Send_vdStartCondition>:

void Send_vdStartCondition()
{
 a20:	df 93       	push	r29
 a22:	cf 93       	push	r28
 a24:	cd b7       	in	r28, 0x3d	; 61
 a26:	de b7       	in	r29, 0x3e	; 62
	//Start Condition //Must be cleared after transmitted
	SET_BIT(TWCR_Reg, Start_TWSTA);
 a28:	a6 e5       	ldi	r26, 0x56	; 86
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	e6 e5       	ldi	r30, 0x56	; 86
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	80 62       	ori	r24, 0x20	; 32
 a34:	8c 93       	st	X, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 a36:	a6 e5       	ldi	r26, 0x56	; 86
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	e6 e5       	ldi	r30, 0x56	; 86
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	80 68       	ori	r24, 0x80	; 128
 a42:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 a44:	e6 e5       	ldi	r30, 0x56	; 86
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	80 81       	ld	r24, Z
 a4a:	88 1f       	adc	r24, r24
 a4c:	88 27       	eor	r24, r24
 a4e:	88 1f       	adc	r24, r24
 a50:	81 30       	cpi	r24, 0x01	; 1
 a52:	c1 f7       	brne	.-16     	; 0xa44 <Send_vdStartCondition+0x24>
	//

}
 a54:	cf 91       	pop	r28
 a56:	df 91       	pop	r29
 a58:	08 95       	ret

00000a5a <Send_vdStopCondition>:

void Send_vdStopCondition()
{
 a5a:	df 93       	push	r29
 a5c:	cf 93       	push	r28
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_Reg, Stop_TWSTO);
 a62:	a6 e5       	ldi	r26, 0x56	; 86
 a64:	b0 e0       	ldi	r27, 0x00	; 0
 a66:	e6 e5       	ldi	r30, 0x56	; 86
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	80 81       	ld	r24, Z
 a6c:	80 61       	ori	r24, 0x10	; 16
 a6e:	8c 93       	st	X, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 a70:	a6 e5       	ldi	r26, 0x56	; 86
 a72:	b0 e0       	ldi	r27, 0x00	; 0
 a74:	e6 e5       	ldi	r30, 0x56	; 86
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	80 81       	ld	r24, Z
 a7a:	80 68       	ori	r24, 0x80	; 128
 a7c:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 a7e:	e6 e5       	ldi	r30, 0x56	; 86
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	88 1f       	adc	r24, r24
 a86:	88 27       	eor	r24, r24
 a88:	88 1f       	adc	r24, r24
 a8a:	81 30       	cpi	r24, 0x01	; 1
 a8c:	c1 f7       	brne	.-16     	; 0xa7e <Send_vdStopCondition+0x24>
}
 a8e:	cf 91       	pop	r28
 a90:	df 91       	pop	r29
 a92:	08 95       	ret

00000a94 <Send_vdSlaveAddWrite>:
void Send_vdSlaveAddWrite(u8 Slave_address)
{
 a94:	df 93       	push	r29
 a96:	cf 93       	push	r28
 a98:	0f 92       	push	r0
 a9a:	cd b7       	in	r28, 0x3d	; 61
 a9c:	de b7       	in	r29, 0x3e	; 62
 a9e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TWCR_Reg, Start_TWSTA);
 aa0:	a6 e5       	ldi	r26, 0x56	; 86
 aa2:	b0 e0       	ldi	r27, 0x00	; 0
 aa4:	e6 e5       	ldi	r30, 0x56	; 86
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	8f 7d       	andi	r24, 0xDF	; 223
 aac:	8c 93       	st	X, r24
	//Send address on data register
	Slave_address = Slave_address<<1;
 aae:	89 81       	ldd	r24, Y+1	; 0x01
 ab0:	88 0f       	add	r24, r24
 ab2:	89 83       	std	Y+1, r24	; 0x01
	SET_BYTE(TWDR_Reg, Slave_address);
 ab4:	e3 e2       	ldi	r30, 0x23	; 35
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	80 83       	st	Z, r24
	CLR_BIT(TWDR_Reg, 0);
 abc:	a3 e2       	ldi	r26, 0x23	; 35
 abe:	b0 e0       	ldi	r27, 0x00	; 0
 ac0:	e3 e2       	ldi	r30, 0x23	; 35
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	8e 7f       	andi	r24, 0xFE	; 254
 ac8:	8c 93       	st	X, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 aca:	a6 e5       	ldi	r26, 0x56	; 86
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	e6 e5       	ldi	r30, 0x56	; 86
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 ad8:	e6 e5       	ldi	r30, 0x56	; 86
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	80 81       	ld	r24, Z
 ade:	88 1f       	adc	r24, r24
 ae0:	88 27       	eor	r24, r24
 ae2:	88 1f       	adc	r24, r24
 ae4:	81 30       	cpi	r24, 0x01	; 1
 ae6:	c1 f7       	brne	.-16     	; 0xad8 <Send_vdSlaveAddWrite+0x44>
	//CheckAck
	/*//Send data
	SET_BYTE(TWDR_Reg, Data);
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
	SET_BIT(TWCR_Reg, IntFlag_TWINT);*/
}
 ae8:	0f 90       	pop	r0
 aea:	cf 91       	pop	r28
 aec:	df 91       	pop	r29
 aee:	08 95       	ret

00000af0 <Send_vdSlaveAddRead>:

void Send_vdSlaveAddRead(u8 Slave_address)
{
 af0:	df 93       	push	r29
 af2:	cf 93       	push	r28
 af4:	0f 92       	push	r0
 af6:	cd b7       	in	r28, 0x3d	; 61
 af8:	de b7       	in	r29, 0x3e	; 62
 afa:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TWCR_Reg, Start_TWSTA);
 afc:	a6 e5       	ldi	r26, 0x56	; 86
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	e6 e5       	ldi	r30, 0x56	; 86
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	8f 7d       	andi	r24, 0xDF	; 223
 b08:	8c 93       	st	X, r24
	//Send address on data register
	SET_BYTE(TWDR_Reg, Slave_address);
 b0a:	e3 e2       	ldi	r30, 0x23	; 35
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	89 81       	ldd	r24, Y+1	; 0x01
 b10:	80 83       	st	Z, r24
	SET_BIT(TWDR_Reg, 0);
 b12:	a3 e2       	ldi	r26, 0x23	; 35
 b14:	b0 e0       	ldi	r27, 0x00	; 0
 b16:	e3 e2       	ldi	r30, 0x23	; 35
 b18:	f0 e0       	ldi	r31, 0x00	; 0
 b1a:	80 81       	ld	r24, Z
 b1c:	81 60       	ori	r24, 0x01	; 1
 b1e:	8c 93       	st	X, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 b20:	a6 e5       	ldi	r26, 0x56	; 86
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	e6 e5       	ldi	r30, 0x56	; 86
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	80 68       	ori	r24, 0x80	; 128
 b2c:	8c 93       	st	X, r24

	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 b2e:	e6 e5       	ldi	r30, 0x56	; 86
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 81       	ld	r24, Z
 b34:	88 1f       	adc	r24, r24
 b36:	88 27       	eor	r24, r24
 b38:	88 1f       	adc	r24, r24
 b3a:	81 30       	cpi	r24, 0x01	; 1
 b3c:	c1 f7       	brne	.-16     	; 0xb2e <Send_vdSlaveAddRead+0x3e>

}
 b3e:	0f 90       	pop	r0
 b40:	cf 91       	pop	r28
 b42:	df 91       	pop	r29
 b44:	08 95       	ret

00000b46 <Send_vdRepStartCondition>:

void Send_vdRepStartCondition()
{
 b46:	df 93       	push	r29
 b48:	cf 93       	push	r28
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_Reg, Start_TWSTA);
 b4e:	a6 e5       	ldi	r26, 0x56	; 86
 b50:	b0 e0       	ldi	r27, 0x00	; 0
 b52:	e6 e5       	ldi	r30, 0x56	; 86
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	80 81       	ld	r24, Z
 b58:	80 62       	ori	r24, 0x20	; 32
 b5a:	8c 93       	st	X, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 b5c:	a6 e5       	ldi	r26, 0x56	; 86
 b5e:	b0 e0       	ldi	r27, 0x00	; 0
 b60:	e6 e5       	ldi	r30, 0x56	; 86
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	80 81       	ld	r24, Z
 b66:	80 68       	ori	r24, 0x80	; 128
 b68:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 b6a:	e6 e5       	ldi	r30, 0x56	; 86
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	88 1f       	adc	r24, r24
 b72:	88 27       	eor	r24, r24
 b74:	88 1f       	adc	r24, r24
 b76:	81 30       	cpi	r24, 0x01	; 1
 b78:	c1 f7       	brne	.-16     	; 0xb6a <Send_vdRepStartCondition+0x24>
}
 b7a:	cf 91       	pop	r28
 b7c:	df 91       	pop	r29
 b7e:	08 95       	ret

00000b80 <Send_vdData>:

void Send_vdData(u8 Data)
{
 b80:	df 93       	push	r29
 b82:	cf 93       	push	r28
 b84:	0f 92       	push	r0
 b86:	cd b7       	in	r28, 0x3d	; 61
 b88:	de b7       	in	r29, 0x3e	; 62
 b8a:	89 83       	std	Y+1, r24	; 0x01
	//Send data
	SET_BYTE(TWDR_Reg, Data);
 b8c:	e3 e2       	ldi	r30, 0x23	; 35
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	89 81       	ldd	r24, Y+1	; 0x01
 b92:	80 83       	st	Z, r24
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 b94:	a6 e5       	ldi	r26, 0x56	; 86
 b96:	b0 e0       	ldi	r27, 0x00	; 0
 b98:	e6 e5       	ldi	r30, 0x56	; 86
 b9a:	f0 e0       	ldi	r31, 0x00	; 0
 b9c:	80 81       	ld	r24, Z
 b9e:	80 68       	ori	r24, 0x80	; 128
 ba0:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 ba2:	e6 e5       	ldi	r30, 0x56	; 86
 ba4:	f0 e0       	ldi	r31, 0x00	; 0
 ba6:	80 81       	ld	r24, Z
 ba8:	88 1f       	adc	r24, r24
 baa:	88 27       	eor	r24, r24
 bac:	88 1f       	adc	r24, r24
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	c1 f7       	brne	.-16     	; 0xba2 <Send_vdData+0x22>
}
 bb2:	0f 90       	pop	r0
 bb4:	cf 91       	pop	r28
 bb6:	df 91       	pop	r29
 bb8:	08 95       	ret

00000bba <Read_u8Data>:
u8 Read_u8Data()
{
 bba:	df 93       	push	r29
 bbc:	cf 93       	push	r28
 bbe:	cd b7       	in	r28, 0x3d	; 61
 bc0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_Reg, IntFlag_TWINT);
 bc2:	a6 e5       	ldi	r26, 0x56	; 86
 bc4:	b0 e0       	ldi	r27, 0x00	; 0
 bc6:	e6 e5       	ldi	r30, 0x56	; 86
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	80 68       	ori	r24, 0x80	; 128
 bce:	8c 93       	st	X, r24
	while((GET_BIT(TWCR_Reg, IntFlag_TWINT))!=1);
 bd0:	e6 e5       	ldi	r30, 0x56	; 86
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	88 1f       	adc	r24, r24
 bd8:	88 27       	eor	r24, r24
 bda:	88 1f       	adc	r24, r24
 bdc:	81 30       	cpi	r24, 0x01	; 1
 bde:	c1 f7       	brne	.-16     	; 0xbd0 <Read_u8Data+0x16>
	return TWDR_Reg;
 be0:	e3 e2       	ldi	r30, 0x23	; 35
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
}
 be6:	cf 91       	pop	r28
 be8:	df 91       	pop	r29
 bea:	08 95       	ret

00000bec <init_vdSlave>:

void init_vdSlave(u8 MyAddress)
{
 bec:	df 93       	push	r29
 bee:	cf 93       	push	r28
 bf0:	0f 92       	push	r0
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR_Reg, EnableAck_TWEA);
 bf8:	a6 e5       	ldi	r26, 0x56	; 86
 bfa:	b0 e0       	ldi	r27, 0x00	; 0
 bfc:	e6 e5       	ldi	r30, 0x56	; 86
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	80 64       	ori	r24, 0x40	; 64
 c04:	8c 93       	st	X, r24
	//Enable
	SET_BIT(TWCR_Reg, Enable_TWEN);
 c06:	a6 e5       	ldi	r26, 0x56	; 86
 c08:	b0 e0       	ldi	r27, 0x00	; 0
 c0a:	e6 e5       	ldi	r30, 0x56	; 86
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 81       	ld	r24, Z
 c10:	84 60       	ori	r24, 0x04	; 4
 c12:	8c 93       	st	X, r24
	//Shift address left by 1
	TWAR_Reg =(MyAddress<<1);
 c14:	e2 e2       	ldi	r30, 0x22	; 34
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	89 81       	ldd	r24, Y+1	; 0x01
 c1a:	88 0f       	add	r24, r24
 c1c:	80 83       	st	Z, r24
	SET_BIT(TWAR_Reg, GeneralCall);
 c1e:	a2 e2       	ldi	r26, 0x22	; 34
 c20:	b0 e0       	ldi	r27, 0x00	; 0
 c22:	e2 e2       	ldi	r30, 0x22	; 34
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	81 60       	ori	r24, 0x01	; 1
 c2a:	8c 93       	st	X, r24
}
 c2c:	0f 90       	pop	r0
 c2e:	cf 91       	pop	r28
 c30:	df 91       	pop	r29
 c32:	08 95       	ret

00000c34 <_exit>:
 c34:	f8 94       	cli

00000c36 <__stop_program>:
 c36:	ff cf       	rjmp	.-2      	; 0xc36 <__stop_program>
