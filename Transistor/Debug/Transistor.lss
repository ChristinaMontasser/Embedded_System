
Transistor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000023e8  0000245c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000018fc  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b2d  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000489d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000049dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007681  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000881d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "DIO_Interface.h"
#include "LCD_Interface.h"
#include "Keypad_Interface.h"

int main (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	6c 97       	sbiw	r28, 0x1c	; 28
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	DIO_vdSetPintDirection(PortB, PIN0, PIN_OUTPUT);
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	41 e0       	ldi	r20, 0x01	; 1
     b50:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_vdSetPintDirection>
	DIO_vdSetPintDirection(PortB, PIN1, PIN_OUTPUT);
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <DIO_vdSetPintDirection>

	while(1){
		DIO_vdSetPinValue(PortB, PIN0, PIN_High);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	aa ef       	ldi	r26, 0xFA	; 250
     b6e:	b3 e4       	ldi	r27, 0x43	; 67
     b70:	89 8f       	std	Y+25, r24	; 0x19
     b72:	9a 8f       	std	Y+26, r25	; 0x1a
     b74:	ab 8f       	std	Y+27, r26	; 0x1b
     b76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b78:	69 8d       	ldd	r22, Y+25	; 0x19
     b7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	4a ef       	ldi	r20, 0xFA	; 250
     b86:	54 e4       	ldi	r21, 0x44	; 68
     b88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b8c:	dc 01       	movw	r26, r24
     b8e:	cb 01       	movw	r24, r22
     b90:	8d 8b       	std	Y+21, r24	; 0x15
     b92:	9e 8b       	std	Y+22, r25	; 0x16
     b94:	af 8b       	std	Y+23, r26	; 0x17
     b96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b98:	6d 89       	ldd	r22, Y+21	; 0x15
     b9a:	7e 89       	ldd	r23, Y+22	; 0x16
     b9c:	8f 89       	ldd	r24, Y+23	; 0x17
     b9e:	98 8d       	ldd	r25, Y+24	; 0x18
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <main+0x84>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9c 8b       	std	Y+20, r25	; 0x14
     bb6:	8b 8b       	std	Y+19, r24	; 0x13
     bb8:	3f c0       	rjmp	.+126    	; 0xc38 <main+0x102>
	else if (__tmp > 65535)
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	4f e7       	ldi	r20, 0x7F	; 127
     bc8:	57 e4       	ldi	r21, 0x47	; 71
     bca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bce:	18 16       	cp	r1, r24
     bd0:	4c f5       	brge	.+82     	; 0xc24 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd2:	69 8d       	ldd	r22, Y+25	; 0x19
     bd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e2       	ldi	r20, 0x20	; 32
     be0:	51 e4       	ldi	r21, 0x41	; 65
     be2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	9c 8b       	std	Y+20, r25	; 0x14
     bf8:	8b 8b       	std	Y+19, r24	; 0x13
     bfa:	0f c0       	rjmp	.+30     	; 0xc1a <main+0xe4>
     bfc:	88 ec       	ldi	r24, 0xC8	; 200
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9a 8b       	std	Y+18, r25	; 0x12
     c02:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c04:	89 89       	ldd	r24, Y+17	; 0x11
     c06:	9a 89       	ldd	r25, Y+18	; 0x12
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <main+0xd2>
     c0c:	9a 8b       	std	Y+18, r25	; 0x12
     c0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c10:	8b 89       	ldd	r24, Y+19	; 0x13
     c12:	9c 89       	ldd	r25, Y+20	; 0x14
     c14:	01 97       	sbiw	r24, 0x01	; 1
     c16:	9c 8b       	std	Y+20, r25	; 0x14
     c18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1a:	8b 89       	ldd	r24, Y+19	; 0x13
     c1c:	9c 89       	ldd	r25, Y+20	; 0x14
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	69 f7       	brne	.-38     	; 0xbfc <main+0xc6>
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c24:	6d 89       	ldd	r22, Y+21	; 0x15
     c26:	7e 89       	ldd	r23, Y+22	; 0x16
     c28:	8f 89       	ldd	r24, Y+23	; 0x17
     c2a:	98 8d       	ldd	r25, Y+24	; 0x18
     c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c30:	dc 01       	movw	r26, r24
     c32:	cb 01       	movw	r24, r22
     c34:	9c 8b       	std	Y+20, r25	; 0x14
     c36:	8b 8b       	std	Y+19, r24	; 0x13
     c38:	8b 89       	ldd	r24, Y+19	; 0x13
     c3a:	9c 89       	ldd	r25, Y+20	; 0x14
     c3c:	98 8b       	std	Y+16, r25	; 0x10
     c3e:	8f 87       	std	Y+15, r24	; 0x0f
     c40:	8f 85       	ldd	r24, Y+15	; 0x0f
     c42:	98 89       	ldd	r25, Y+16	; 0x10
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <main+0x10e>
     c48:	98 8b       	std	Y+16, r25	; 0x10
     c4a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		DIO_vdSetPinValue(PortB, PIN0, PIN_LOW);
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	aa ef       	ldi	r26, 0xFA	; 250
     c5c:	b3 e4       	ldi	r27, 0x43	; 67
     c5e:	8b 87       	std	Y+11, r24	; 0x0b
     c60:	9c 87       	std	Y+12, r25	; 0x0c
     c62:	ad 87       	std	Y+13, r26	; 0x0d
     c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c66:	6b 85       	ldd	r22, Y+11	; 0x0b
     c68:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	4a ef       	ldi	r20, 0xFA	; 250
     c74:	54 e4       	ldi	r21, 0x44	; 68
     c76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	8f 83       	std	Y+7, r24	; 0x07
     c80:	98 87       	std	Y+8, r25	; 0x08
     c82:	a9 87       	std	Y+9, r26	; 0x09
     c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c86:	6f 81       	ldd	r22, Y+7	; 0x07
     c88:	78 85       	ldd	r23, Y+8	; 0x08
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e8       	ldi	r20, 0x80	; 128
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	2c f4       	brge	.+10     	; 0xca8 <main+0x172>
		__ticks = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	3f c0       	rjmp	.+126    	; 0xd26 <main+0x1f0>
	else if (__tmp > 65535)
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	78 85       	ldd	r23, Y+8	; 0x08
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	4c f5       	brge	.+82     	; 0xd12 <main+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e2       	ldi	r20, 0x20	; 32
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9e 83       	std	Y+6, r25	; 0x06
     ce6:	8d 83       	std	Y+5, r24	; 0x05
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <main+0x1d2>
     cea:	88 ec       	ldi	r24, 0xC8	; 200
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 83       	std	Y+4, r25	; 0x04
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <main+0x1c0>
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9e 83       	std	Y+6, r25	; 0x06
     d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	69 f7       	brne	.-38     	; 0xcea <main+0x1b4>
     d10:	26 cf       	rjmp	.-436    	; 0xb5e <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	89 85       	ldd	r24, Y+9	; 0x09
     d18:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <main+0x1fc>
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	11 cf       	rjmp	.-478    	; 0xb5e <main+0x28>

00000d3c <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <DIO_vdSetPortDirection+0x6>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <DIO_vdSetPortDirection+0x8>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	90 f5       	brcc	.+100    	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	3c 83       	std	Y+4, r19	; 0x04
     d5a:	2b 83       	std	Y+3, r18	; 0x03
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	9c 81       	ldd	r25, Y+4	; 0x04
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	91 05       	cpc	r25, r1
     d64:	d1 f0       	breq	.+52     	; 0xd9a <DIO_vdSetPortDirection+0x5e>
     d66:	2b 81       	ldd	r18, Y+3	; 0x03
     d68:	3c 81       	ldd	r19, Y+4	; 0x04
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	31 05       	cpc	r19, r1
     d6e:	2c f4       	brge	.+10     	; 0xd7a <DIO_vdSetPortDirection+0x3e>
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	61 f0       	breq	.+24     	; 0xd90 <DIO_vdSetPortDirection+0x54>
     d78:	1e c0       	rjmp	.+60     	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	3c 81       	ldd	r19, Y+4	; 0x04
     d7e:	22 30       	cpi	r18, 0x02	; 2
     d80:	31 05       	cpc	r19, r1
     d82:	81 f0       	breq	.+32     	; 0xda4 <DIO_vdSetPortDirection+0x68>
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	81 f0       	breq	.+32     	; 0xdae <DIO_vdSetPortDirection+0x72>
     d8e:	13 c0       	rjmp	.+38     	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
     d90:	ea e3       	ldi	r30, 0x3A	; 58
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	80 83       	st	Z, r24
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
     d9a:	e7 e3       	ldi	r30, 0x37	; 55
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	80 83       	st	Z, r24
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
     da4:	e4 e3       	ldi	r30, 0x34	; 52
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	80 83       	st	Z, r24
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
     dae:	e1 e3       	ldi	r30, 0x31	; 49
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <DIO_vdSetPortValue+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <DIO_vdSetPortValue+0x8>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <DIO_vdSetPortValue+0xa>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	84 30       	cpi	r24, 0x04	; 4
     dda:	08 f0       	brcs	.+2      	; 0xdde <DIO_vdSetPortValue+0x1a>
     ddc:	64 c0       	rjmp	.+200    	; 0xea6 <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	88 23       	and	r24, r24
     de2:	79 f5       	brne	.+94     	; 0xe42 <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3e 83       	std	Y+6, r19	; 0x06
     dec:	2d 83       	std	Y+5, r18	; 0x05
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	91 05       	cpc	r25, r1
     df6:	c9 f0       	breq	.+50     	; 0xe2a <DIO_vdSetPortValue+0x66>
     df8:	2d 81       	ldd	r18, Y+5	; 0x05
     dfa:	3e 81       	ldd	r19, Y+6	; 0x06
     dfc:	22 30       	cpi	r18, 0x02	; 2
     dfe:	31 05       	cpc	r19, r1
     e00:	2c f4       	brge	.+10     	; 0xe0c <DIO_vdSetPortValue+0x48>
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	61 f0       	breq	.+24     	; 0xe22 <DIO_vdSetPortValue+0x5e>
     e0a:	4d c0       	rjmp	.+154    	; 0xea6 <DIO_vdSetPortValue+0xe2>
     e0c:	2d 81       	ldd	r18, Y+5	; 0x05
     e0e:	3e 81       	ldd	r19, Y+6	; 0x06
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	71 f0       	breq	.+28     	; 0xe32 <DIO_vdSetPortValue+0x6e>
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	91 05       	cpc	r25, r1
     e1e:	69 f0       	breq	.+26     	; 0xe3a <DIO_vdSetPortValue+0x76>
     e20:	42 c0       	rjmp	.+132    	; 0xea6 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	10 82       	st	Z, r1
     e28:	3e c0       	rjmp	.+124    	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
     e2a:	e8 e3       	ldi	r30, 0x38	; 56
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	10 82       	st	Z, r1
     e30:	3a c0       	rjmp	.+116    	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
     e32:	e5 e3       	ldi	r30, 0x35	; 53
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	10 82       	st	Z, r1
     e38:	36 c0       	rjmp	.+108    	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
     e3a:	e2 e3       	ldi	r30, 0x32	; 50
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	10 82       	st	Z, r1
     e40:	32 c0       	rjmp	.+100    	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3c 83       	std	Y+4, r19	; 0x04
     e4a:	2b 83       	std	Y+3, r18	; 0x03
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	91 05       	cpc	r25, r1
     e54:	d1 f0       	breq	.+52     	; 0xe8a <DIO_vdSetPortValue+0xc6>
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	3c 81       	ldd	r19, Y+4	; 0x04
     e5a:	22 30       	cpi	r18, 0x02	; 2
     e5c:	31 05       	cpc	r19, r1
     e5e:	2c f4       	brge	.+10     	; 0xe6a <DIO_vdSetPortValue+0xa6>
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	61 f0       	breq	.+24     	; 0xe80 <DIO_vdSetPortValue+0xbc>
     e68:	1e c0       	rjmp	.+60     	; 0xea6 <DIO_vdSetPortValue+0xe2>
     e6a:	2b 81       	ldd	r18, Y+3	; 0x03
     e6c:	3c 81       	ldd	r19, Y+4	; 0x04
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	81 f0       	breq	.+32     	; 0xe94 <DIO_vdSetPortValue+0xd0>
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	91 05       	cpc	r25, r1
     e7c:	81 f0       	breq	.+32     	; 0xe9e <DIO_vdSetPortValue+0xda>
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	80 83       	st	Z, r24
     e88:	0e c0       	rjmp	.+28     	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	80 83       	st	Z, r24
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	80 83       	st	Z, r24
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
     e9e:	e2 e3       	ldi	r30, 0x32	; 50
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
     ea6:	26 96       	adiw	r28, 0x06	; 6
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	27 97       	sbiw	r28, 0x07	; 7
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	6a 83       	std	Y+2, r22	; 0x02
     ed0:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	08 f0       	brcs	.+2      	; 0xeda <DIO_vdSetPintDirection+0x22>
     ed8:	ee c0       	rjmp	.+476    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	88 30       	cpi	r24, 0x08	; 8
     ede:	08 f0       	brcs	.+2      	; 0xee2 <DIO_vdSetPintDirection+0x2a>
     ee0:	ea c0       	rjmp	.+468    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	09 f0       	breq	.+2      	; 0xeea <DIO_vdSetPintDirection+0x32>
     ee8:	6f c0       	rjmp	.+222    	; 0xfc8 <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3f 83       	std	Y+7, r19	; 0x07
     ef2:	2e 83       	std	Y+6, r18	; 0x06
     ef4:	8e 81       	ldd	r24, Y+6	; 0x06
     ef6:	9f 81       	ldd	r25, Y+7	; 0x07
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	49 f1       	breq	.+82     	; 0xf50 <DIO_vdSetPintDirection+0x98>
     efe:	2e 81       	ldd	r18, Y+6	; 0x06
     f00:	3f 81       	ldd	r19, Y+7	; 0x07
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	2c f4       	brge	.+10     	; 0xf12 <DIO_vdSetPintDirection+0x5a>
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	9f 81       	ldd	r25, Y+7	; 0x07
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	61 f0       	breq	.+24     	; 0xf28 <DIO_vdSetPintDirection+0x70>
     f10:	d2 c0       	rjmp	.+420    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
     f12:	2e 81       	ldd	r18, Y+6	; 0x06
     f14:	3f 81       	ldd	r19, Y+7	; 0x07
     f16:	22 30       	cpi	r18, 0x02	; 2
     f18:	31 05       	cpc	r19, r1
     f1a:	71 f1       	breq	.+92     	; 0xf78 <DIO_vdSetPintDirection+0xc0>
     f1c:	8e 81       	ldd	r24, Y+6	; 0x06
     f1e:	9f 81       	ldd	r25, Y+7	; 0x07
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	e9 f1       	breq	.+122    	; 0xfa0 <DIO_vdSetPintDirection+0xe8>
     f26:	c7 c0       	rjmp	.+398    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
     f28:	aa e3       	ldi	r26, 0x3A	; 58
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	ea e3       	ldi	r30, 0x3A	; 58
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_vdSetPintDirection+0x8e>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_vdSetPintDirection+0x8a>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	b3 c0       	rjmp	.+358    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
     f50:	a7 e3       	ldi	r26, 0x37	; 55
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e7 e3       	ldi	r30, 0x37	; 55
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_vdSetPintDirection+0xb6>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_vdSetPintDirection+0xb2>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	9f c0       	rjmp	.+318    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
     f78:	a4 e3       	ldi	r26, 0x34	; 52
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e4 e3       	ldi	r30, 0x34	; 52
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_vdSetPintDirection+0xde>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_vdSetPintDirection+0xda>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	8b c0       	rjmp	.+278    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
     fa0:	a1 e3       	ldi	r26, 0x31	; 49
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e1 e3       	ldi	r30, 0x31	; 49
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_vdSetPintDirection+0x106>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_vdSetPintDirection+0x102>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	77 c0       	rjmp	.+238    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 23       	and	r24, r24
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <DIO_vdSetPintDirection+0x118>
     fce:	73 c0       	rjmp	.+230    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	3d 83       	std	Y+5, r19	; 0x05
     fd8:	2c 83       	std	Y+4, r18	; 0x04
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	9d 81       	ldd	r25, Y+5	; 0x05
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	59 f1       	breq	.+86     	; 0x103a <DIO_vdSetPintDirection+0x182>
     fe4:	2c 81       	ldd	r18, Y+4	; 0x04
     fe6:	3d 81       	ldd	r19, Y+5	; 0x05
     fe8:	22 30       	cpi	r18, 0x02	; 2
     fea:	31 05       	cpc	r19, r1
     fec:	2c f4       	brge	.+10     	; 0xff8 <DIO_vdSetPintDirection+0x140>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	9d 81       	ldd	r25, Y+5	; 0x05
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f0       	breq	.+26     	; 0x1010 <DIO_vdSetPintDirection+0x158>
     ff6:	5f c0       	rjmp	.+190    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
     ff8:	2c 81       	ldd	r18, Y+4	; 0x04
     ffa:	3d 81       	ldd	r19, Y+5	; 0x05
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	89 f1       	breq	.+98     	; 0x1064 <DIO_vdSetPintDirection+0x1ac>
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_vdSetPintDirection+0x156>
    100c:	40 c0       	rjmp	.+128    	; 0x108e <DIO_vdSetPintDirection+0x1d6>
    100e:	53 c0       	rjmp	.+166    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
    1010:	aa e3       	ldi	r26, 0x3A	; 58
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	ea e3       	ldi	r30, 0x3A	; 58
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_vdSetPintDirection+0x176>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_vdSetPintDirection+0x172>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	3e c0       	rjmp	.+124    	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
    103a:	a7 e3       	ldi	r26, 0x37	; 55
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_vdSetPintDirection+0x1a0>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_vdSetPintDirection+0x19c>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	29 c0       	rjmp	.+82     	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
    1064:	a4 e3       	ldi	r26, 0x34	; 52
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e4 e3       	ldi	r30, 0x34	; 52
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <DIO_vdSetPintDirection+0x1ca>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <DIO_vdSetPintDirection+0x1c6>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
    108e:	a1 e3       	ldi	r26, 0x31	; 49
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e1 e3       	ldi	r30, 0x31	; 49
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_vdSetPintDirection+0x1f4>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_vdSetPintDirection+0x1f0>
    10b0:	80 95       	com	r24
    10b2:	84 23       	and	r24, r20
    10b4:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
    10b6:	27 96       	adiw	r28, 0x07	; 7
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	27 97       	sbiw	r28, 0x07	; 7
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	6a 83       	std	Y+2, r22	; 0x02
    10e0:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	84 30       	cpi	r24, 0x04	; 4
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <DIO_vdSetPinValue+0x22>
    10e8:	ee c0       	rjmp	.+476    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	88 30       	cpi	r24, 0x08	; 8
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <DIO_vdSetPinValue+0x2a>
    10f0:	ea c0       	rjmp	.+468    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_vdSetPinValue+0x32>
    10f8:	6f c0       	rjmp	.+222    	; 0x11d8 <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3f 83       	std	Y+7, r19	; 0x07
    1102:	2e 83       	std	Y+6, r18	; 0x06
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	9f 81       	ldd	r25, Y+7	; 0x07
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	49 f1       	breq	.+82     	; 0x1160 <DIO_vdSetPinValue+0x98>
    110e:	2e 81       	ldd	r18, Y+6	; 0x06
    1110:	3f 81       	ldd	r19, Y+7	; 0x07
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <DIO_vdSetPinValue+0x5a>
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	9f 81       	ldd	r25, Y+7	; 0x07
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <DIO_vdSetPinValue+0x70>
    1120:	d2 c0       	rjmp	.+420    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
    1122:	2e 81       	ldd	r18, Y+6	; 0x06
    1124:	3f 81       	ldd	r19, Y+7	; 0x07
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	71 f1       	breq	.+92     	; 0x1188 <DIO_vdSetPinValue+0xc0>
    112c:	8e 81       	ldd	r24, Y+6	; 0x06
    112e:	9f 81       	ldd	r25, Y+7	; 0x07
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	e9 f1       	breq	.+122    	; 0x11b0 <DIO_vdSetPinValue+0xe8>
    1136:	c7 c0       	rjmp	.+398    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
    1138:	ab e3       	ldi	r26, 0x3B	; 59
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	eb e3       	ldi	r30, 0x3B	; 59
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_vdSetPinValue+0x8e>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_vdSetPinValue+0x8a>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	b3 c0       	rjmp	.+358    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
    1160:	a8 e3       	ldi	r26, 0x38	; 56
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e8 e3       	ldi	r30, 0x38	; 56
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_vdSetPinValue+0xb6>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_vdSetPinValue+0xb2>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	9f c0       	rjmp	.+318    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_vdSetPinValue+0xde>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_vdSetPinValue+0xda>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	8b c0       	rjmp	.+278    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_vdSetPinValue+0x106>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_vdSetPinValue+0x102>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	77 c0       	rjmp	.+238    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <DIO_vdSetPinValue+0x118>
    11de:	73 c0       	rjmp	.+230    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3d 83       	std	Y+5, r19	; 0x05
    11e8:	2c 83       	std	Y+4, r18	; 0x04
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	59 f1       	breq	.+86     	; 0x124a <DIO_vdSetPinValue+0x182>
    11f4:	2c 81       	ldd	r18, Y+4	; 0x04
    11f6:	3d 81       	ldd	r19, Y+5	; 0x05
    11f8:	22 30       	cpi	r18, 0x02	; 2
    11fa:	31 05       	cpc	r19, r1
    11fc:	2c f4       	brge	.+10     	; 0x1208 <DIO_vdSetPinValue+0x140>
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f0       	breq	.+26     	; 0x1220 <DIO_vdSetPinValue+0x158>
    1206:	5f c0       	rjmp	.+190    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	89 f1       	breq	.+98     	; 0x1274 <DIO_vdSetPinValue+0x1ac>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <DIO_vdSetPinValue+0x156>
    121c:	40 c0       	rjmp	.+128    	; 0x129e <DIO_vdSetPinValue+0x1d6>
    121e:	53 c0       	rjmp	.+166    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    1220:	ab e3       	ldi	r26, 0x3B	; 59
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <DIO_vdSetPinValue+0x176>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <DIO_vdSetPinValue+0x172>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	3e c0       	rjmp	.+124    	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    124a:	a8 e3       	ldi	r26, 0x38	; 56
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e8 e3       	ldi	r30, 0x38	; 56
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_vdSetPinValue+0x1a0>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_vdSetPinValue+0x19c>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	29 c0       	rjmp	.+82     	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    1274:	a5 e3       	ldi	r26, 0x35	; 53
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e3       	ldi	r30, 0x35	; 53
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_vdSetPinValue+0x1ca>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_vdSetPinValue+0x1c6>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    129e:	a2 e3       	ldi	r26, 0x32	; 50
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e2 e3       	ldi	r30, 0x32	; 50
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_vdSetPinValue+0x1f4>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_vdSetPinValue+0x1f0>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    12c6:	27 96       	adiw	r28, 0x07	; 7
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <DIO_u8GetPinValue+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <DIO_u8GetPinValue+0x8>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_u8GetPinValue+0xa>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <DIO_u8GetPinValue+0x1a>
    12f0:	70 c0       	rjmp	.+224    	; 0x13d2 <DIO_u8GetPinValue+0xfa>
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	88 30       	cpi	r24, 0x08	; 8
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <DIO_u8GetPinValue+0x22>
    12f8:	6c c0       	rjmp	.+216    	; 0x13d2 <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	4c 81       	ldd	r20, Y+4	; 0x04
    1306:	5d 81       	ldd	r21, Y+5	; 0x05
    1308:	41 30       	cpi	r20, 0x01	; 1
    130a:	51 05       	cpc	r21, r1
    130c:	49 f1       	breq	.+82     	; 0x1360 <DIO_u8GetPinValue+0x88>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	82 30       	cpi	r24, 0x02	; 2
    1314:	91 05       	cpc	r25, r1
    1316:	34 f4       	brge	.+12     	; 0x1324 <DIO_u8GetPinValue+0x4c>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	61 f0       	breq	.+24     	; 0x133a <DIO_u8GetPinValue+0x62>
    1322:	57 c0       	rjmp	.+174    	; 0x13d2 <DIO_u8GetPinValue+0xfa>
    1324:	4c 81       	ldd	r20, Y+4	; 0x04
    1326:	5d 81       	ldd	r21, Y+5	; 0x05
    1328:	42 30       	cpi	r20, 0x02	; 2
    132a:	51 05       	cpc	r21, r1
    132c:	61 f1       	breq	.+88     	; 0x1386 <DIO_u8GetPinValue+0xae>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	d1 f1       	breq	.+116    	; 0x13ac <DIO_u8GetPinValue+0xd4>
    1338:	4c c0       	rjmp	.+152    	; 0x13d2 <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    133a:	e9 e3       	ldi	r30, 0x39	; 57
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetPinValue+0x7a>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetPinValue+0x76>
    1356:	ca 01       	movw	r24, r20
    1358:	58 2f       	mov	r21, r24
    135a:	51 70       	andi	r21, 0x01	; 1
    135c:	5b 83       	std	Y+3, r21	; 0x03
    135e:	3a c0       	rjmp	.+116    	; 0x13d4 <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    1360:	e6 e3       	ldi	r30, 0x36	; 54
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <DIO_u8GetPinValue+0xa0>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <DIO_u8GetPinValue+0x9c>
    137c:	ca 01       	movw	r24, r20
    137e:	58 2f       	mov	r21, r24
    1380:	51 70       	andi	r21, 0x01	; 1
    1382:	5b 83       	std	Y+3, r21	; 0x03
    1384:	27 c0       	rjmp	.+78     	; 0x13d4 <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    1386:	e3 e3       	ldi	r30, 0x33	; 51
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8GetPinValue+0xc6>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8GetPinValue+0xc2>
    13a2:	ca 01       	movw	r24, r20
    13a4:	58 2f       	mov	r21, r24
    13a6:	51 70       	andi	r21, 0x01	; 1
    13a8:	5b 83       	std	Y+3, r21	; 0x03
    13aa:	14 c0       	rjmp	.+40     	; 0x13d4 <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    13ac:	e0 e3       	ldi	r30, 0x30	; 48
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_u8GetPinValue+0xec>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_u8GetPinValue+0xe8>
    13c8:	ca 01       	movw	r24, r20
    13ca:	58 2f       	mov	r21, r24
    13cc:	51 70       	andi	r21, 0x01	; 1
    13ce:	5b 83       	std	Y+3, r21	; 0x03
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <DIO_u8GetPinValue+0xfc>
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	8e 83       	std	Y+6, r24	; 0x06
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	26 96       	adiw	r28, 0x06	; 6
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <DIO_vdTogPortValue+0x6>
    13f2:	0f 92       	push	r0
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <DIO_vdTogPortValue+0x16>
    1400:	3e c0       	rjmp	.+124    	; 0x147e <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3b 83       	std	Y+3, r19	; 0x03
    140a:	2a 83       	std	Y+2, r18	; 0x02
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	9b 81       	ldd	r25, Y+3	; 0x03
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 05       	cpc	r25, r1
    1414:	e9 f0       	breq	.+58     	; 0x1450 <DIO_vdTogPortValue+0x64>
    1416:	2a 81       	ldd	r18, Y+2	; 0x02
    1418:	3b 81       	ldd	r19, Y+3	; 0x03
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	2c f4       	brge	.+10     	; 0x142a <DIO_vdTogPortValue+0x3e>
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	61 f0       	breq	.+24     	; 0x1440 <DIO_vdTogPortValue+0x54>
    1428:	2a c0       	rjmp	.+84     	; 0x147e <DIO_vdTogPortValue+0x92>
    142a:	2a 81       	ldd	r18, Y+2	; 0x02
    142c:	3b 81       	ldd	r19, Y+3	; 0x03
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	b1 f0       	breq	.+44     	; 0x1460 <DIO_vdTogPortValue+0x74>
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	91 05       	cpc	r25, r1
    143c:	c9 f0       	breq	.+50     	; 0x1470 <DIO_vdTogPortValue+0x84>
    143e:	1f c0       	rjmp	.+62     	; 0x147e <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    1440:	ab e3       	ldi	r26, 0x3B	; 59
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	eb e3       	ldi	r30, 0x3B	; 59
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 95       	com	r24
    144c:	8c 93       	st	X, r24
    144e:	17 c0       	rjmp	.+46     	; 0x147e <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 95       	com	r24
    145c:	8c 93       	st	X, r24
    145e:	0f c0       	rjmp	.+30     	; 0x147e <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    1460:	a5 e3       	ldi	r26, 0x35	; 53
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e3       	ldi	r30, 0x35	; 53
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 95       	com	r24
    146c:	8c 93       	st	X, r24
    146e:	07 c0       	rjmp	.+14     	; 0x147e <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    1470:	a2 e3       	ldi	r26, 0x32	; 50
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e2 e3       	ldi	r30, 0x32	; 50
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 95       	com	r24
    147c:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_vdTogPinValue+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_vdTogPinValue+0x8>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	84 30       	cpi	r24, 0x04	; 4
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <DIO_vdTogPinValue+0x18>
    14a0:	6e c0       	rjmp	.+220    	; 0x157e <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3c 83       	std	Y+4, r19	; 0x04
    14aa:	2b 83       	std	Y+3, r18	; 0x03
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	49 f1       	breq	.+82     	; 0x1508 <DIO_vdTogPinValue+0x7e>
    14b6:	2b 81       	ldd	r18, Y+3	; 0x03
    14b8:	3c 81       	ldd	r19, Y+4	; 0x04
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <DIO_vdTogPinValue+0x40>
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <DIO_vdTogPinValue+0x56>
    14c8:	5a c0       	rjmp	.+180    	; 0x157e <DIO_vdTogPinValue+0xf4>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	71 f1       	breq	.+92     	; 0x1530 <DIO_vdTogPinValue+0xa6>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	e9 f1       	breq	.+122    	; 0x1558 <DIO_vdTogPinValue+0xce>
    14de:	4f c0       	rjmp	.+158    	; 0x157e <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    14e0:	ab e3       	ldi	r26, 0x3B	; 59
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	eb e3       	ldi	r30, 0x3B	; 59
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <DIO_vdTogPinValue+0x74>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <DIO_vdTogPinValue+0x70>
    1502:	84 27       	eor	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	3b c0       	rjmp	.+118    	; 0x157e <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    1508:	a8 e3       	ldi	r26, 0x38	; 56
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e8 e3       	ldi	r30, 0x38	; 56
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_vdTogPinValue+0x9c>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_vdTogPinValue+0x98>
    152a:	84 27       	eor	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	27 c0       	rjmp	.+78     	; 0x157e <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    1530:	a5 e3       	ldi	r26, 0x35	; 53
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e3       	ldi	r30, 0x35	; 53
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_vdTogPinValue+0xc4>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_vdTogPinValue+0xc0>
    1552:	84 27       	eor	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	13 c0       	rjmp	.+38     	; 0x157e <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    1558:	a2 e3       	ldi	r26, 0x32	; 50
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e2 e3       	ldi	r30, 0x32	; 50
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DIO_vdTogPinValue+0xec>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DIO_vdTogPinValue+0xe8>
    157a:	84 27       	eor	r24, r20
    157c:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <Keypad_vdInitialization>:
		{'7','8','9','*'},
		{'0','=','/','%'}
};

void Keypad_vdInitialization (void)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPortDirection(KEYPAD_U8_PORT, COLS_ROWS_DIRECTION);
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	6f e0       	ldi	r22, 0x0F	; 15
    1598:	0e 94 9e 06 	call	0xd3c	; 0xd3c <DIO_vdSetPortDirection>
	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_vdSetPortValue>
}
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <Keypad_vdGetPressedKey>:

void Keypad_vdGetPressedKey (u8 *LOC_pu8ReturnedData)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	63 97       	sbiw	r28, 0x13	; 19
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	9b 8b       	std	Y+19, r25	; 0x13
    15c0:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_u8RowsCounter , LOC_u8ColoumsCounter , LOC_u8StatusButton;

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	6f ef       	ldi	r22, 0xFF	; 255
    15c6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_vdSetPortValue>

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    15ca:	19 8a       	std	Y+17, r1	; 0x11
    15cc:	bd c0       	rjmp	.+378    	; 0x1748 <Keypad_vdGetPressedKey+0x19e>
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	69 89       	ldd	r22, Y+17	; 0x11
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    15d8:	18 8a       	std	Y+16, r1	; 0x10
    15da:	aa c0       	rjmp	.+340    	; 0x1730 <Keypad_vdGetPressedKey+0x186>
		{
			LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    15dc:	88 89       	ldd	r24, Y+16	; 0x10
    15de:	98 2f       	mov	r25, r24
    15e0:	9c 5f       	subi	r25, 0xFC	; 252
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	69 2f       	mov	r22, r25
    15e6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_u8GetPinValue>
    15ea:	8f 87       	std	Y+15, r24	; 0x0f

			if(LOC_u8StatusButton == PIN_LOW)
    15ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ee:	88 23       	and	r24, r24
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <Keypad_vdGetPressedKey+0x4a>
    15f2:	9b c0       	rjmp	.+310    	; 0x172a <Keypad_vdGetPressedKey+0x180>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 ea       	ldi	r26, 0xA0	; 160
    15fa:	b1 e4       	ldi	r27, 0x41	; 65
    15fc:	8b 87       	std	Y+11, r24	; 0x0b
    15fe:	9c 87       	std	Y+12, r25	; 0x0c
    1600:	ad 87       	std	Y+13, r26	; 0x0d
    1602:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1604:	6b 85       	ldd	r22, Y+11	; 0x0b
    1606:	7c 85       	ldd	r23, Y+12	; 0x0c
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	4a ef       	ldi	r20, 0xFA	; 250
    1612:	54 e4       	ldi	r21, 0x44	; 68
    1614:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	8f 83       	std	Y+7, r24	; 0x07
    161e:	98 87       	std	Y+8, r25	; 0x08
    1620:	a9 87       	std	Y+9, r26	; 0x09
    1622:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e8       	ldi	r20, 0x80	; 128
    1632:	5f e3       	ldi	r21, 0x3F	; 63
    1634:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1638:	88 23       	and	r24, r24
    163a:	2c f4       	brge	.+10     	; 0x1646 <Keypad_vdGetPressedKey+0x9c>
		__ticks = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	3f c0       	rjmp	.+126    	; 0x16c4 <Keypad_vdGetPressedKey+0x11a>
	else if (__tmp > 65535)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	4c f5       	brge	.+82     	; 0x16b0 <Keypad_vdGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e2       	ldi	r20, 0x20	; 32
    166c:	51 e4       	ldi	r21, 0x41	; 65
    166e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	0f c0       	rjmp	.+30     	; 0x16a6 <Keypad_vdGetPressedKey+0xfc>
    1688:	88 ec       	ldi	r24, 0xC8	; 200
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 83       	std	Y+4, r25	; 0x04
    168e:	8b 83       	std	Y+3, r24	; 0x03
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <Keypad_vdGetPressedKey+0xea>
    1698:	9c 83       	std	Y+4, r25	; 0x04
    169a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	69 f7       	brne	.-38     	; 0x1688 <Keypad_vdGetPressedKey+0xde>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <Keypad_vdGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	6f 81       	ldd	r22, Y+7	; 0x07
    16b2:	78 85       	ldd	r23, Y+8	; 0x08
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <Keypad_vdGetPressedKey+0x126>
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    16d8:	88 89       	ldd	r24, Y+16	; 0x10
    16da:	98 2f       	mov	r25, r24
    16dc:	9c 5f       	subi	r25, 0xFC	; 252
    16de:	82 e0       	ldi	r24, 0x02	; 2
    16e0:	69 2f       	mov	r22, r25
    16e2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_u8GetPinValue>
    16e6:	8f 87       	std	Y+15, r24	; 0x0f
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <Keypad_vdGetPressedKey+0x150>

				while (LOC_u8StatusButton == PIN_LOW)
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    16ea:	88 89       	ldd	r24, Y+16	; 0x10
    16ec:	98 2f       	mov	r25, r24
    16ee:	9c 5f       	subi	r25, 0xFC	; 252
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	69 2f       	mov	r22, r25
    16f4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <DIO_u8GetPinValue>
    16f8:	8f 87       	std	Y+15, r24	; 0x0f
			if(LOC_u8StatusButton == PIN_LOW)
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);

				while (LOC_u8StatusButton == PIN_LOW)
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	88 23       	and	r24, r24
    16fe:	a9 f3       	breq	.-22     	; 0x16ea <Keypad_vdGetPressedKey+0x140>
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
				}

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
    1700:	89 89       	ldd	r24, Y+17	; 0x11
    1702:	48 2f       	mov	r20, r24
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	88 89       	ldd	r24, Y+16	; 0x10
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	ca 01       	movw	r24, r20
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	fc 01       	movw	r30, r24
    171c:	e8 59       	subi	r30, 0x98	; 152
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	ea 89       	ldd	r30, Y+18	; 0x12
    1724:	fb 89       	ldd	r31, Y+19	; 0x13
    1726:	80 83       	st	Z, r24
    1728:	13 c0       	rjmp	.+38     	; 0x1750 <Keypad_vdGetPressedKey+0x1a6>

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    172a:	88 89       	ldd	r24, Y+16	; 0x10
    172c:	8f 5f       	subi	r24, 0xFF	; 255
    172e:	88 8b       	std	Y+16, r24	; 0x10
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	08 f4       	brcc	.+2      	; 0x1738 <Keypad_vdGetPressedKey+0x18e>
    1736:	52 cf       	rjmp	.-348    	; 0x15dc <Keypad_vdGetPressedKey+0x32>

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	69 89       	ldd	r22, Y+17	; 0x11
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    1742:	89 89       	ldd	r24, Y+17	; 0x11
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	89 8b       	std	Y+17, r24	; 0x11
    1748:	89 89       	ldd	r24, Y+17	; 0x11
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	08 f4       	brcc	.+2      	; 0x1750 <Keypad_vdGetPressedKey+0x1a6>
    174e:	3f cf       	rjmp	.-386    	; 0x15ce <Keypad_vdGetPressedKey+0x24>
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
	}
}
    1750:	63 96       	adiw	r28, 0x13	; 19
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	6d 97       	sbiw	r28, 0x1d	; 29
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1790:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e8       	ldi	r26, 0x80	; 128
    17a4:	bf e3       	ldi	r27, 0x3F	; 63
    17a6:	89 8f       	std	Y+25, r24	; 0x19
    17a8:	9a 8f       	std	Y+26, r25	; 0x1a
    17aa:	ab 8f       	std	Y+27, r26	; 0x1b
    17ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	69 8d       	ldd	r22, Y+25	; 0x19
    17b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a ef       	ldi	r20, 0xFA	; 250
    17bc:	54 e4       	ldi	r21, 0x44	; 68
    17be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	8d 8b       	std	Y+21, r24	; 0x15
    17c8:	9e 8b       	std	Y+22, r25	; 0x16
    17ca:	af 8b       	std	Y+23, r26	; 0x17
    17cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17ce:	6d 89       	ldd	r22, Y+21	; 0x15
    17d0:	7e 89       	ldd	r23, Y+22	; 0x16
    17d2:	8f 89       	ldd	r24, Y+23	; 0x17
    17d4:	98 8d       	ldd	r25, Y+24	; 0x18
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e2:	88 23       	and	r24, r24
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 8b       	std	Y+20, r25	; 0x14
    17ec:	8b 8b       	std	Y+19, r24	; 0x13
    17ee:	3f c0       	rjmp	.+126    	; 0x186e <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    17f0:	6d 89       	ldd	r22, Y+21	; 0x15
    17f2:	7e 89       	ldd	r23, Y+22	; 0x16
    17f4:	8f 89       	ldd	r24, Y+23	; 0x17
    17f6:	98 8d       	ldd	r25, Y+24	; 0x18
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	3f ef       	ldi	r19, 0xFF	; 255
    17fc:	4f e7       	ldi	r20, 0x7F	; 127
    17fe:	57 e4       	ldi	r21, 0x47	; 71
    1800:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1804:	18 16       	cp	r1, r24
    1806:	4c f5       	brge	.+82     	; 0x185a <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1808:	69 8d       	ldd	r22, Y+25	; 0x19
    180a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e2       	ldi	r20, 0x20	; 32
    1816:	51 e4       	ldi	r21, 0x41	; 65
    1818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	9c 8b       	std	Y+20, r25	; 0x14
    182e:	8b 8b       	std	Y+19, r24	; 0x13
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <LCD_vdSendCmd+0xee>
    1832:	88 ec       	ldi	r24, 0xC8	; 200
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9a 8b       	std	Y+18, r25	; 0x12
    1838:	89 8b       	std	Y+17, r24	; 0x11
    183a:	89 89       	ldd	r24, Y+17	; 0x11
    183c:	9a 89       	ldd	r25, Y+18	; 0x12
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_vdSendCmd+0xdc>
    1842:	9a 8b       	std	Y+18, r25	; 0x12
    1844:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	8b 89       	ldd	r24, Y+19	; 0x13
    1848:	9c 89       	ldd	r25, Y+20	; 0x14
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	9c 8b       	std	Y+20, r25	; 0x14
    184e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1850:	8b 89       	ldd	r24, Y+19	; 0x13
    1852:	9c 89       	ldd	r25, Y+20	; 0x14
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	69 f7       	brne	.-38     	; 0x1832 <LCD_vdSendCmd+0xd0>
    1858:	14 c0       	rjmp	.+40     	; 0x1882 <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	6d 89       	ldd	r22, Y+21	; 0x15
    185c:	7e 89       	ldd	r23, Y+22	; 0x16
    185e:	8f 89       	ldd	r24, Y+23	; 0x17
    1860:	98 8d       	ldd	r25, Y+24	; 0x18
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9c 8b       	std	Y+20, r25	; 0x14
    186c:	8b 8b       	std	Y+19, r24	; 0x13
    186e:	8b 89       	ldd	r24, Y+19	; 0x13
    1870:	9c 89       	ldd	r25, Y+20	; 0x14
    1872:	98 8b       	std	Y+16, r25	; 0x10
    1874:	8f 87       	std	Y+15, r24	; 0x0f
    1876:	8f 85       	ldd	r24, Y+15	; 0x0f
    1878:	98 89       	ldd	r25, Y+16	; 0x10
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_vdSendCmd+0x118>
    187e:	98 8b       	std	Y+16, r25	; 0x10
    1880:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	62 e0       	ldi	r22, 0x02	; 2
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e8       	ldi	r26, 0x80	; 128
    1892:	bf e3       	ldi	r27, 0x3F	; 63
    1894:	8b 87       	std	Y+11, r24	; 0x0b
    1896:	9c 87       	std	Y+12, r25	; 0x0c
    1898:	ad 87       	std	Y+13, r26	; 0x0d
    189a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a ef       	ldi	r20, 0xFA	; 250
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8f 83       	std	Y+7, r24	; 0x07
    18b6:	98 87       	std	Y+8, r25	; 0x08
    18b8:	a9 87       	std	Y+9, r26	; 0x09
    18ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18bc:	6f 81       	ldd	r22, Y+7	; 0x07
    18be:	78 85       	ldd	r23, Y+8	; 0x08
    18c0:	89 85       	ldd	r24, Y+9	; 0x09
    18c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	0f c0       	rjmp	.+30     	; 0x193e <LCD_vdSendCmd+0x1dc>
    1920:	88 ec       	ldi	r24, 0xC8	; 200
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_vdSendCmd+0x1ca>
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <LCD_vdSendCmd+0x1be>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_vdSendCmd+0x206>
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1970:	6d 96       	adiw	r28, 0x1d	; 29
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	6d 97       	sbiw	r28, 0x1d	; 29
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    19a2:	83 e0       	ldi	r24, 0x03	; 3
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19b0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    19b4:	83 e0       	ldi	r24, 0x03	; 3
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	89 8f       	std	Y+25, r24	; 0x19
    19c8:	9a 8f       	std	Y+26, r25	; 0x1a
    19ca:	ab 8f       	std	Y+27, r26	; 0x1b
    19cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	69 8d       	ldd	r22, Y+25	; 0x19
    19d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a ef       	ldi	r20, 0xFA	; 250
    19dc:	54 e4       	ldi	r21, 0x44	; 68
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8d 8b       	std	Y+21, r24	; 0x15
    19e8:	9e 8b       	std	Y+22, r25	; 0x16
    19ea:	af 8b       	std	Y+23, r26	; 0x17
    19ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_vdSendChar+0x8e>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9c 8b       	std	Y+20, r25	; 0x14
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    1a10:	6d 89       	ldd	r22, Y+21	; 0x15
    1a12:	7e 89       	ldd	r23, Y+22	; 0x16
    1a14:	8f 89       	ldd	r24, Y+23	; 0x17
    1a16:	98 8d       	ldd	r25, Y+24	; 0x18
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	69 8d       	ldd	r22, Y+25	; 0x19
    1a2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_vdSendChar+0xee>
    1a52:	88 ec       	ldi	r24, 0xC8	; 200
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	89 8b       	std	Y+17, r24	; 0x11
    1a5a:	89 89       	ldd	r24, Y+17	; 0x11
    1a5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_vdSendChar+0xdc>
    1a62:	9a 8b       	std	Y+18, r25	; 0x12
    1a64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	8b 89       	ldd	r24, Y+19	; 0x13
    1a68:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9c 8b       	std	Y+20, r25	; 0x14
    1a6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	8b 89       	ldd	r24, Y+19	; 0x13
    1a72:	9c 89       	ldd	r25, Y+20	; 0x14
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_vdSendChar+0xd0>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a80:	98 8d       	ldd	r25, Y+24	; 0x18
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9c 8b       	std	Y+20, r25	; 0x14
    1a8c:	8b 8b       	std	Y+19, r24	; 0x13
    1a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a90:	9c 89       	ldd	r25, Y+20	; 0x14
    1a92:	98 8b       	std	Y+16, r25	; 0x10
    1a94:	8f 87       	std	Y+15, r24	; 0x0f
    1a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a98:	98 89       	ldd	r25, Y+16	; 0x10
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_vdSendChar+0x118>
    1a9e:	98 8b       	std	Y+16, r25	; 0x10
    1aa0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	40 e0       	ldi	r20, 0x00	; 0
    1aa8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_vdSetPinValue>
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a0 e8       	ldi	r26, 0x80	; 128
    1ab2:	bf e3       	ldi	r27, 0x3F	; 63
    1ab4:	8b 87       	std	Y+11, r24	; 0x0b
    1ab6:	9c 87       	std	Y+12, r25	; 0x0c
    1ab8:	ad 87       	std	Y+13, r26	; 0x0d
    1aba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a ef       	ldi	r20, 0xFA	; 250
    1aca:	54 e4       	ldi	r21, 0x44	; 68
    1acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	8f 83       	std	Y+7, r24	; 0x07
    1ad6:	98 87       	std	Y+8, r25	; 0x08
    1ad8:	a9 87       	std	Y+9, r26	; 0x09
    1ada:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e8       	ldi	r20, 0x80	; 128
    1aea:	5f e3       	ldi	r21, 0x3F	; 63
    1aec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1af0:	88 23       	and	r24, r24
    1af2:	2c f4       	brge	.+10     	; 0x1afe <LCD_vdSendChar+0x17c>
		__ticks = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	3f c0       	rjmp	.+126    	; 0x1b7c <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	3f ef       	ldi	r19, 0xFF	; 255
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	57 e4       	ldi	r21, 0x47	; 71
    1b0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	4c f5       	brge	.+82     	; 0x1b68 <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e2       	ldi	r20, 0x20	; 32
    1b24:	51 e4       	ldi	r21, 0x41	; 65
    1b26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	bc 01       	movw	r22, r24
    1b30:	cd 01       	movw	r24, r26
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	0f c0       	rjmp	.+30     	; 0x1b5e <LCD_vdSendChar+0x1dc>
    1b40:	88 ec       	ldi	r24, 0xC8	; 200
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <LCD_vdSendChar+0x1ca>
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	69 f7       	brne	.-38     	; 0x1b40 <LCD_vdSendChar+0x1be>
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b68:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6a:	78 85       	ldd	r23, Y+8	; 0x08
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_vdSendChar+0x206>
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b90:	6d 96       	adiw	r28, 0x1d	; 29
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <LCD_vdInitialization>:

void LCD_vdInitialization(void)
{
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	c6 54       	subi	r28, 0x46	; 70
    1bb0:	d0 40       	sbci	r29, 0x00	; 0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ed 5b       	subi	r30, 0xBD	; 189
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a8 e4       	ldi	r26, 0x48	; 72
    1bc8:	b2 e4       	ldi	r27, 0x42	; 66
    1bca:	80 83       	st	Z, r24
    1bcc:	91 83       	std	Z+1, r25	; 0x01
    1bce:	a2 83       	std	Z+2, r26	; 0x02
    1bd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	01 5c       	subi	r16, 0xC1	; 193
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	ed 5b       	subi	r30, 0xBD	; 189
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 83       	st	Z, r24
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	a2 83       	std	Z+2, r26	; 0x02
    1bfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c00:	fe 01       	movw	r30, r28
    1c02:	ff 96       	adiw	r30, 0x3f	; 63
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_vdInitialization+0x84>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9e af       	std	Y+62, r25	; 0x3e
    1c22:	8d af       	std	Y+61, r24	; 0x3d
    1c24:	46 c0       	rjmp	.+140    	; 0x1cb2 <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    1c26:	fe 01       	movw	r30, r28
    1c28:	ff 96       	adiw	r30, 0x3f	; 63
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	4f e7       	ldi	r20, 0x7F	; 127
    1c38:	57 e4       	ldi	r21, 0x47	; 71
    1c3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3e:	18 16       	cp	r1, r24
    1c40:	64 f5       	brge	.+88     	; 0x1c9a <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c42:	fe 01       	movw	r30, r28
    1c44:	ed 5b       	subi	r30, 0xBD	; 189
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	60 81       	ld	r22, Z
    1c4a:	71 81       	ldd	r23, Z+1	; 0x01
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9e af       	std	Y+62, r25	; 0x3e
    1c6e:	8d af       	std	Y+61, r24	; 0x3d
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <LCD_vdInitialization+0xee>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9c af       	std	Y+60, r25	; 0x3c
    1c78:	8b af       	std	Y+59, r24	; 0x3b
    1c7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_vdInitialization+0xdc>
    1c82:	9c af       	std	Y+60, r25	; 0x3c
    1c84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9e af       	std	Y+62, r25	; 0x3e
    1c8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <LCD_vdInitialization+0xd0>
    1c98:	16 c0       	rjmp	.+44     	; 0x1cc6 <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ff 96       	adiw	r30, 0x3f	; 63
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e af       	std	Y+62, r25	; 0x3e
    1cb0:	8d af       	std	Y+61, r24	; 0x3d
    1cb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cb6:	9a af       	std	Y+58, r25	; 0x3a
    1cb8:	89 af       	std	Y+57, r24	; 0x39
    1cba:	89 ad       	ldd	r24, Y+57	; 0x39
    1cbc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_vdInitialization+0x11c>
    1cc2:	9a af       	std	Y+58, r25	; 0x3a
    1cc4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    1cc6:	88 e3       	ldi	r24, 0x38	; 56
    1cc8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e2       	ldi	r26, 0x20	; 32
    1cd2:	b1 e4       	ldi	r27, 0x41	; 65
    1cd4:	8d ab       	std	Y+53, r24	; 0x35
    1cd6:	9e ab       	std	Y+54, r25	; 0x36
    1cd8:	af ab       	std	Y+55, r26	; 0x37
    1cda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1cde:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4a ef       	ldi	r20, 0xFA	; 250
    1cea:	54 e4       	ldi	r21, 0x44	; 68
    1cec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	89 ab       	std	Y+49, r24	; 0x31
    1cf6:	9a ab       	std	Y+50, r25	; 0x32
    1cf8:	ab ab       	std	Y+51, r26	; 0x33
    1cfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1d00:	8b a9       	ldd	r24, Y+51	; 0x33
    1d02:	9c a9       	ldd	r25, Y+52	; 0x34
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e8       	ldi	r20, 0x80	; 128
    1d0a:	5f e3       	ldi	r21, 0x3F	; 63
    1d0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d10:	88 23       	and	r24, r24
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <LCD_vdInitialization+0x17c>
		__ticks = 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	98 ab       	std	Y+48, r25	; 0x30
    1d1a:	8f a7       	std	Y+47, r24	; 0x2f
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    1d1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d20:	7a a9       	ldd	r23, Y+50	; 0x32
    1d22:	8b a9       	ldd	r24, Y+51	; 0x33
    1d24:	9c a9       	ldd	r25, Y+52	; 0x34
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	57 e4       	ldi	r21, 0x47	; 71
    1d2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	4c f5       	brge	.+82     	; 0x1d88 <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d36:	6d a9       	ldd	r22, Y+53	; 0x35
    1d38:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e2       	ldi	r20, 0x20	; 32
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <LCD_vdInitialization+0x1dc>
    1d60:	88 ec       	ldi	r24, 0xC8	; 200
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9e a7       	std	Y+46, r25	; 0x2e
    1d66:	8d a7       	std	Y+45, r24	; 0x2d
    1d68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_vdInitialization+0x1ca>
    1d70:	9e a7       	std	Y+46, r25	; 0x2e
    1d72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d76:	98 a9       	ldd	r25, Y+48	; 0x30
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	98 ab       	std	Y+48, r25	; 0x30
    1d7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d80:	98 a9       	ldd	r25, Y+48	; 0x30
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	69 f7       	brne	.-38     	; 0x1d60 <LCD_vdInitialization+0x1be>
    1d86:	14 c0       	rjmp	.+40     	; 0x1db0 <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d88:	69 a9       	ldd	r22, Y+49	; 0x31
    1d8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	98 ab       	std	Y+48, r25	; 0x30
    1d9a:	8f a7       	std	Y+47, r24	; 0x2f
    1d9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1da0:	9c a7       	std	Y+44, r25	; 0x2c
    1da2:	8b a7       	std	Y+43, r24	; 0x2b
    1da4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1da6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_vdInitialization+0x206>
    1dac:	9c a7       	std	Y+44, r25	; 0x2c
    1dae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    1db0:	8f e0       	ldi	r24, 0x0F	; 15
    1db2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	a0 e2       	ldi	r26, 0x20	; 32
    1dbc:	b1 e4       	ldi	r27, 0x41	; 65
    1dbe:	8f a3       	std	Y+39, r24	; 0x27
    1dc0:	98 a7       	std	Y+40, r25	; 0x28
    1dc2:	a9 a7       	std	Y+41, r26	; 0x29
    1dc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dca:	89 a5       	ldd	r24, Y+41	; 0x29
    1dcc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a ef       	ldi	r20, 0xFA	; 250
    1dd4:	54 e4       	ldi	r21, 0x44	; 68
    1dd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8b a3       	std	Y+35, r24	; 0x23
    1de0:	9c a3       	std	Y+36, r25	; 0x24
    1de2:	ad a3       	std	Y+37, r26	; 0x25
    1de4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de6:	6b a1       	ldd	r22, Y+35	; 0x23
    1de8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dea:	8d a1       	ldd	r24, Y+37	; 0x25
    1dec:	9e a1       	ldd	r25, Y+38	; 0x26
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dfa:	88 23       	and	r24, r24
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <LCD_vdInitialization+0x266>
		__ticks = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
    1e06:	3f c0       	rjmp	.+126    	; 0x1e86 <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    1e08:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	3f ef       	ldi	r19, 0xFF	; 255
    1e14:	4f e7       	ldi	r20, 0x7F	; 127
    1e16:	57 e4       	ldi	r21, 0x47	; 71
    1e18:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	4c f5       	brge	.+82     	; 0x1e72 <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e20:	6f a1       	ldd	r22, Y+39	; 0x27
    1e22:	78 a5       	ldd	r23, Y+40	; 0x28
    1e24:	89 a5       	ldd	r24, Y+41	; 0x29
    1e26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e2       	ldi	r20, 0x20	; 32
    1e2e:	51 e4       	ldi	r21, 0x41	; 65
    1e30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <LCD_vdInitialization+0x2c6>
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	98 a3       	std	Y+32, r25	; 0x20
    1e50:	8f 8f       	std	Y+31, r24	; 0x1f
    1e52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e54:	98 a1       	ldd	r25, Y+32	; 0x20
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_vdInitialization+0x2b4>
    1e5a:	98 a3       	std	Y+32, r25	; 0x20
    1e5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e60:	9a a1       	ldd	r25, Y+34	; 0x22
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	9a a3       	std	Y+34, r25	; 0x22
    1e66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e68:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	69 f7       	brne	.-38     	; 0x1e4a <LCD_vdInitialization+0x2a8>
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e72:	6b a1       	ldd	r22, Y+35	; 0x23
    1e74:	7c a1       	ldd	r23, Y+36	; 0x24
    1e76:	8d a1       	ldd	r24, Y+37	; 0x25
    1e78:	9e a1       	ldd	r25, Y+38	; 0x26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9a a3       	std	Y+34, r25	; 0x22
    1e84:	89 a3       	std	Y+33, r24	; 0x21
    1e86:	89 a1       	ldd	r24, Y+33	; 0x21
    1e88:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_vdInitialization+0x2f0>
    1e96:	9e 8f       	std	Y+30, r25	; 0x1e
    1e98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e2       	ldi	r26, 0x20	; 32
    1ea6:	b1 e4       	ldi	r27, 0x41	; 65
    1ea8:	89 8f       	std	Y+25, r24	; 0x19
    1eaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1eac:	ab 8f       	std	Y+27, r26	; 0x1b
    1eae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8d 8b       	std	Y+21, r24	; 0x15
    1eca:	9e 8b       	std	Y+22, r25	; 0x16
    1ecc:	af 8b       	std	Y+23, r26	; 0x17
    1ece:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_vdInitialization+0x350>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    1ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_vdInitialization+0x3b0>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
    1f3c:	89 89       	ldd	r24, Y+17	; 0x11
    1f3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_vdInitialization+0x39e>
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8b 89       	ldd	r24, Y+19	; 0x13
    1f54:	9c 89       	ldd	r25, Y+20	; 0x14
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_vdInitialization+0x392>
    1f5a:	14 c0       	rjmp	.+40     	; 0x1f84 <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f60:	8f 89       	ldd	r24, Y+23	; 0x17
    1f62:	98 8d       	ldd	r25, Y+24	; 0x18
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9c 8b       	std	Y+20, r25	; 0x14
    1f6e:	8b 8b       	std	Y+19, r24	; 0x13
    1f70:	8b 89       	ldd	r24, Y+19	; 0x13
    1f72:	9c 89       	ldd	r25, Y+20	; 0x14
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7a:	98 89       	ldd	r25, Y+16	; 0x10
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_vdInitialization+0x3da>
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    1f84:	86 e0       	ldi	r24, 0x06	; 6
    1f86:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	a0 e2       	ldi	r26, 0x20	; 32
    1f90:	b1 e4       	ldi	r27, 0x41	; 65
    1f92:	8b 87       	std	Y+11, r24	; 0x0b
    1f94:	9c 87       	std	Y+12, r25	; 0x0c
    1f96:	ad 87       	std	Y+13, r26	; 0x0d
    1f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8f 83       	std	Y+7, r24	; 0x07
    1fb4:	98 87       	std	Y+8, r25	; 0x08
    1fb6:	a9 87       	std	Y+9, r26	; 0x09
    1fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	40 e8       	ldi	r20, 0x80	; 128
    1fc8:	5f e3       	ldi	r21, 0x3F	; 63
    1fca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fce:	88 23       	and	r24, r24
    1fd0:	2c f4       	brge	.+10     	; 0x1fdc <LCD_vdInitialization+0x43a>
		__ticks = 1;
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
    1fda:	3f c0       	rjmp	.+126    	; 0x205a <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	3f ef       	ldi	r19, 0xFF	; 255
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	57 e4       	ldi	r21, 0x47	; 71
    1fec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	4c f5       	brge	.+82     	; 0x2046 <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e2       	ldi	r20, 0x20	; 32
    2002:	51 e4       	ldi	r21, 0x41	; 65
    2004:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	0f c0       	rjmp	.+30     	; 0x203c <LCD_vdInitialization+0x49a>
    201e:	88 ec       	ldi	r24, 0xC8	; 200
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c 83       	std	Y+4, r25	; 0x04
    2024:	8b 83       	std	Y+3, r24	; 0x03
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_vdInitialization+0x488>
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	9e 81       	ldd	r25, Y+6	; 0x06
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	69 f7       	brne	.-38     	; 0x201e <LCD_vdInitialization+0x47c>
    2044:	14 c0       	rjmp	.+40     	; 0x206e <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2046:	6f 81       	ldd	r22, Y+7	; 0x07
    2048:	78 85       	ldd	r23, Y+8	; 0x08
    204a:	89 85       	ldd	r24, Y+9	; 0x09
    204c:	9a 85       	ldd	r25, Y+10	; 0x0a
    204e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
    2062:	89 81       	ldd	r24, Y+1	; 0x01
    2064:	9a 81       	ldd	r25, Y+2	; 0x02
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_vdInitialization+0x4c4>
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    206e:	ca 5b       	subi	r28, 0xBA	; 186
    2070:	df 4f       	sbci	r29, 0xFF	; 255
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <LCD_vdWriteString>:

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_vdWriteString+0x6>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	9a 83       	std	Y+2, r25	; 0x02
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	0a c0       	rjmp	.+20     	; 0x20aa <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    2096:	e9 81       	ldd	r30, Y+1	; 0x01
    2098:	fa 81       	ldd	r31, Y+2	; 0x02
    209a:	80 81       	ld	r24, Z
    209c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_vdSendChar>
		LOC_u8Ptr++;
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	9a 83       	std	Y+2, r25	; 0x02
    20a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    20aa:	e9 81       	ldd	r30, Y+1	; 0x01
    20ac:	fa 81       	ldd	r31, Y+2	; 0x02
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	89 f7       	brne	.-30     	; 0x2096 <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <LCD_vdStringPostion+0x6>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <LCD_vdStringPostion+0x8>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	6a 83       	std	Y+2, r22	; 0x02
    20ce:	5c 83       	std	Y+4, r21	; 0x04
    20d0:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	88 23       	and	r24, r24
    20d6:	49 f4       	brne	.+18     	; 0x20ea <LCD_vdStringPostion+0x2c>
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	80 31       	cpi	r24, 0x10	; 16
    20dc:	30 f4       	brcc	.+12     	; 0x20ea <LCD_vdStringPostion+0x2c>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	8f 70       	andi	r24, 0x0F	; 15
    20e2:	80 68       	ori	r24, 0x80	; 128
    20e4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <LCD_vdStringPostion+0x42>
	else if (row == 1 && pos<16)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	41 f4       	brne	.+16     	; 0x2100 <LCD_vdStringPostion+0x42>
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	80 31       	cpi	r24, 0x10	; 16
    20f4:	28 f4       	brcc	.+10     	; 0x2100 <LCD_vdStringPostion+0x42>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	8f 70       	andi	r24, 0x0F	; 15
    20fa:	80 6c       	ori	r24, 0xC0	; 192
    20fc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_vdWriteString>
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <LCD_vdClear>:

void LCD_vdClear()
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <LCD_vdSendDataoCGRAM+0x6>
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	9b 83       	std	Y+3, r25	; 0x03
    2138:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    213a:	80 e4       	ldi	r24, 0x40	; 64
    213c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	0d c0       	rjmp	.+26     	; 0x215e <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    2144:	ea 81       	ldd	r30, Y+2	; 0x02
    2146:	fb 81       	ldd	r31, Y+3	; 0x03
    2148:	80 81       	ld	r24, Z
    214a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_vdSendChar>
		ptr++;
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	9b 83       	std	Y+3, r25	; 0x03
    2156:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	86 30       	cpi	r24, 0x06	; 6
    2162:	80 f3       	brcs	.-32     	; 0x2144 <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_vdGotoDDRAM+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	88 23       	and	r24, r24
    2182:	49 f4       	brne	.+18     	; 0x2196 <LCD_vdGotoDDRAM+0x26>
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	80 31       	cpi	r24, 0x10	; 16
    2188:	30 f4       	brcc	.+12     	; 0x2196 <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	8f 70       	andi	r24, 0x0F	; 15
    218e:	80 68       	ori	r24, 0x80	; 128
    2190:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
    2194:	0b c0       	rjmp	.+22     	; 0x21ac <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	41 f4       	brne	.+16     	; 0x21ac <LCD_vdGotoDDRAM+0x3c>
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	80 31       	cpi	r24, 0x10	; 16
    21a0:	28 f4       	brcc	.+10     	; 0x21ac <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	8f 70       	andi	r24, 0x0F	; 15
    21a6:	80 6c       	ori	r24, 0xC0	; 192
    21a8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <LCD_vdSendCmd>
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <LCD_vdWriteNum>:

void LCD_vdWriteNum(u32 num)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	29 97       	sbiw	r28, 0x09	; 9
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	6e 83       	std	Y+6, r22	; 0x06
    21cc:	7f 83       	std	Y+7, r23	; 0x07
    21ce:	88 87       	std	Y+8, r24	; 0x08
    21d0:	99 87       	std	Y+9, r25	; 0x09
	u32 reverse=0;
    21d2:	1a 82       	std	Y+2, r1	; 0x02
    21d4:	1b 82       	std	Y+3, r1	; 0x03
    21d6:	1c 82       	std	Y+4, r1	; 0x04
    21d8:	1d 82       	std	Y+5, r1	; 0x05
	u8 reminder=0;
    21da:	19 82       	std	Y+1, r1	; 0x01
	if(num>=10)
    21dc:	8e 81       	ldd	r24, Y+6	; 0x06
    21de:	9f 81       	ldd	r25, Y+7	; 0x07
    21e0:	a8 85       	ldd	r26, Y+8	; 0x08
    21e2:	b9 85       	ldd	r27, Y+9	; 0x09
    21e4:	8a 30       	cpi	r24, 0x0A	; 10
    21e6:	91 05       	cpc	r25, r1
    21e8:	a1 05       	cpc	r26, r1
    21ea:	b1 05       	cpc	r27, r1
    21ec:	08 f4       	brcc	.+2      	; 0x21f0 <LCD_vdWriteNum+0x3a>
    21ee:	75 c0       	rjmp	.+234    	; 0x22da <LCD_vdWriteNum+0x124>
    21f0:	3c c0       	rjmp	.+120    	; 0x226a <LCD_vdWriteNum+0xb4>
	{
		while(num !=0)
		{
			reminder = num%10;
    21f2:	8e 81       	ldd	r24, Y+6	; 0x06
    21f4:	9f 81       	ldd	r25, Y+7	; 0x07
    21f6:	a8 85       	ldd	r26, Y+8	; 0x08
    21f8:	b9 85       	ldd	r27, Y+9	; 0x09
    21fa:	2a e0       	ldi	r18, 0x0A	; 10
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse*10+reminder;
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	ac 81       	ldd	r26, Y+4	; 0x04
    2216:	bd 81       	ldd	r27, Y+5	; 0x05
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e0       	ldi	r20, 0x00	; 0
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__mulsi3>
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	82 0f       	add	r24, r18
    2238:	93 1f       	adc	r25, r19
    223a:	a4 1f       	adc	r26, r20
    223c:	b5 1f       	adc	r27, r21
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	9b 83       	std	Y+3, r25	; 0x03
    2242:	ac 83       	std	Y+4, r26	; 0x04
    2244:	bd 83       	std	Y+5, r27	; 0x05
			num/=10;
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	a8 85       	ldd	r26, Y+8	; 0x08
    224c:	b9 85       	ldd	r27, Y+9	; 0x09
    224e:	2a e0       	ldi	r18, 0x0A	; 10
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    225e:	da 01       	movw	r26, r20
    2260:	c9 01       	movw	r24, r18
    2262:	8e 83       	std	Y+6, r24	; 0x06
    2264:	9f 83       	std	Y+7, r25	; 0x07
    2266:	a8 87       	std	Y+8, r26	; 0x08
    2268:	b9 87       	std	Y+9, r27	; 0x09
{
	u32 reverse=0;
	u8 reminder=0;
	if(num>=10)
	{
		while(num !=0)
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	a8 85       	ldd	r26, Y+8	; 0x08
    2270:	b9 85       	ldd	r27, Y+9	; 0x09
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	a1 05       	cpc	r26, r1
    2276:	b1 05       	cpc	r27, r1
    2278:	09 f0       	breq	.+2      	; 0x227c <LCD_vdWriteNum+0xc6>
    227a:	bb cf       	rjmp	.-138    	; 0x21f2 <LCD_vdWriteNum+0x3c>
    227c:	25 c0       	rjmp	.+74     	; 0x22c8 <LCD_vdWriteNum+0x112>
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
		{
			reminder = reverse%10;
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	ac 81       	ldd	r26, Y+4	; 0x04
    2284:	bd 81       	ldd	r27, Y+5	; 0x05
    2286:	2a e0       	ldi	r18, 0x0A	; 10
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e0       	ldi	r20, 0x00	; 0
    228c:	50 e0       	ldi	r21, 0x00	; 0
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	89 83       	std	Y+1, r24	; 0x01
			LCD_vdSendChar(reminder+'0');
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	80 5d       	subi	r24, 0xD0	; 208
    22a0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_vdSendChar>
			reverse/=10;
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	ac 81       	ldd	r26, Y+4	; 0x04
    22aa:	bd 81       	ldd	r27, Y+5	; 0x05
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    22bc:	da 01       	movw	r26, r20
    22be:	c9 01       	movw	r24, r18
    22c0:	8a 83       	std	Y+2, r24	; 0x02
    22c2:	9b 83       	std	Y+3, r25	; 0x03
    22c4:	ac 83       	std	Y+4, r26	; 0x04
    22c6:	bd 83       	std	Y+5, r27	; 0x05
		{
			reminder = num%10;
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	ac 81       	ldd	r26, Y+4	; 0x04
    22ce:	bd 81       	ldd	r27, Y+5	; 0x05
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	a1 05       	cpc	r26, r1
    22d4:	b1 05       	cpc	r27, r1
    22d6:	99 f6       	brne	.-90     	; 0x227e <LCD_vdWriteNum+0xc8>
    22d8:	04 c0       	rjmp	.+8      	; 0x22e2 <LCD_vdWriteNum+0x12c>
			reverse/=10;
		}
	}
	else
	{
		LCD_vdSendChar(num+'0');
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	80 5d       	subi	r24, 0xD0	; 208
    22de:	0e 94 c1 0c 	call	0x1982	; 0x1982 <LCD_vdSendChar>
	}
}
    22e2:	29 96       	adiw	r28, 0x09	; 9
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <__mulsi3>:
    22f4:	62 9f       	mul	r22, r18
    22f6:	d0 01       	movw	r26, r0
    22f8:	73 9f       	mul	r23, r19
    22fa:	f0 01       	movw	r30, r0
    22fc:	82 9f       	mul	r24, r18
    22fe:	e0 0d       	add	r30, r0
    2300:	f1 1d       	adc	r31, r1
    2302:	64 9f       	mul	r22, r20
    2304:	e0 0d       	add	r30, r0
    2306:	f1 1d       	adc	r31, r1
    2308:	92 9f       	mul	r25, r18
    230a:	f0 0d       	add	r31, r0
    230c:	83 9f       	mul	r24, r19
    230e:	f0 0d       	add	r31, r0
    2310:	74 9f       	mul	r23, r20
    2312:	f0 0d       	add	r31, r0
    2314:	65 9f       	mul	r22, r21
    2316:	f0 0d       	add	r31, r0
    2318:	99 27       	eor	r25, r25
    231a:	72 9f       	mul	r23, r18
    231c:	b0 0d       	add	r27, r0
    231e:	e1 1d       	adc	r30, r1
    2320:	f9 1f       	adc	r31, r25
    2322:	63 9f       	mul	r22, r19
    2324:	b0 0d       	add	r27, r0
    2326:	e1 1d       	adc	r30, r1
    2328:	f9 1f       	adc	r31, r25
    232a:	bd 01       	movw	r22, r26
    232c:	cf 01       	movw	r24, r30
    232e:	11 24       	eor	r1, r1
    2330:	08 95       	ret

00002332 <__udivmodsi4>:
    2332:	a1 e2       	ldi	r26, 0x21	; 33
    2334:	1a 2e       	mov	r1, r26
    2336:	aa 1b       	sub	r26, r26
    2338:	bb 1b       	sub	r27, r27
    233a:	fd 01       	movw	r30, r26
    233c:	0d c0       	rjmp	.+26     	; 0x2358 <__udivmodsi4_ep>

0000233e <__udivmodsi4_loop>:
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	ee 1f       	adc	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	a2 17       	cp	r26, r18
    2348:	b3 07       	cpc	r27, r19
    234a:	e4 07       	cpc	r30, r20
    234c:	f5 07       	cpc	r31, r21
    234e:	20 f0       	brcs	.+8      	; 0x2358 <__udivmodsi4_ep>
    2350:	a2 1b       	sub	r26, r18
    2352:	b3 0b       	sbc	r27, r19
    2354:	e4 0b       	sbc	r30, r20
    2356:	f5 0b       	sbc	r31, r21

00002358 <__udivmodsi4_ep>:
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	1a 94       	dec	r1
    2362:	69 f7       	brne	.-38     	; 0x233e <__udivmodsi4_loop>
    2364:	60 95       	com	r22
    2366:	70 95       	com	r23
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	bd 01       	movw	r22, r26
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret

00002376 <__prologue_saves__>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ca 1b       	sub	r28, r26
    23a0:	db 0b       	sbc	r29, r27
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	09 94       	ijmp

000023ae <__epilogue_restores__>:
    23ae:	2a 88       	ldd	r2, Y+18	; 0x12
    23b0:	39 88       	ldd	r3, Y+17	; 0x11
    23b2:	48 88       	ldd	r4, Y+16	; 0x10
    23b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    23bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23be:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c0:	b9 84       	ldd	r11, Y+9	; 0x09
    23c2:	c8 84       	ldd	r12, Y+8	; 0x08
    23c4:	df 80       	ldd	r13, Y+7	; 0x07
    23c6:	ee 80       	ldd	r14, Y+6	; 0x06
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	0c 81       	ldd	r16, Y+4	; 0x04
    23cc:	1b 81       	ldd	r17, Y+3	; 0x03
    23ce:	aa 81       	ldd	r26, Y+2	; 0x02
    23d0:	b9 81       	ldd	r27, Y+1	; 0x01
    23d2:	ce 0f       	add	r28, r30
    23d4:	d1 1d       	adc	r29, r1
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	ed 01       	movw	r28, r26
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
