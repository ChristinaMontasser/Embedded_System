
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000025ca  0000263e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c2c  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c0d  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005141  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000095df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c3 05 	jmp	0xb86	; 0xb86 <__vector_1>
       8:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_2>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:


void __vector_1 (void) __attribute__((signal));
void __vector_2 (void) __attribute__((signal));
void main (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPinDirection(PortA,PIN0,PIN_OUTPUT);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	0e 94 db 06 	call	0xdb6	; 0xdb6 <DIO_vdSetPinDirection>
	//pull up resistor
	DIO_vdSetPinDirection(PortD,PIN2,PIN_INPUT);
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	62 e0       	ldi	r22, 0x02	; 2
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <DIO_vdSetPinDirection>
	DIO_vdSetPinValue(PortD,PIN2,PIN_High);
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>

	DIO_vdSetPinDirection(PortD,PIN1,PIN_INPUT);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 db 06 	call	0xdb6	; 0xdb6 <DIO_vdSetPinDirection>
	DIO_vdSetPinValue(PortD,PIN1,PIN_High);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>

	EX_vdConfigInterrupt(EX_INT0,EX_SENSE_FALLING_EDGE);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EX_vdConfigInterrupt>

	EX_vdConfigInterrupt(EX_INT0,EX_SENSE_RAISING_EDGE);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EX_vdConfigInterrupt>

	GI_vdEnableGI();
     b80:	0e 94 9b 0b 	call	0x1736	; 0x1736 <GI_vdEnableGI>
     b84:	ff cf       	rjmp	.-2      	; 0xb84 <main+0x4e>

00000b86 <__vector_1>:
	while(1);
}

void __vector_1 (void)
{
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPinValue(PortA,PIN0,PIN_High);
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
}
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_2>:
void __vector_2 (void)
{
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPinValue(PortA,PIN0,PIN_LOW);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	ff 91       	pop	r31
     c1a:	ef 91       	pop	r30
     c1c:	bf 91       	pop	r27
     c1e:	af 91       	pop	r26
     c20:	9f 91       	pop	r25
     c22:	8f 91       	pop	r24
     c24:	7f 91       	pop	r23
     c26:	6f 91       	pop	r22
     c28:	5f 91       	pop	r21
     c2a:	4f 91       	pop	r20
     c2c:	3f 91       	pop	r19
     c2e:	2f 91       	pop	r18
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <DIO_vdSetPortDirection+0x6>
     c40:	00 d0       	rcall	.+0      	; 0xc42 <DIO_vdSetPortDirection+0x8>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	90 f5       	brcc	.+100    	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3c 83       	std	Y+4, r19	; 0x04
     c58:	2b 83       	std	Y+3, r18	; 0x03
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	d1 f0       	breq	.+52     	; 0xc98 <DIO_vdSetPortDirection+0x5e>
     c64:	2b 81       	ldd	r18, Y+3	; 0x03
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_vdSetPortDirection+0x3e>
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	61 f0       	breq	.+24     	; 0xc8e <DIO_vdSetPortDirection+0x54>
     c76:	1e c0       	rjmp	.+60     	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
     c78:	2b 81       	ldd	r18, Y+3	; 0x03
     c7a:	3c 81       	ldd	r19, Y+4	; 0x04
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	81 f0       	breq	.+32     	; 0xca2 <DIO_vdSetPortDirection+0x68>
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	81 f0       	breq	.+32     	; 0xcac <DIO_vdSetPortDirection+0x72>
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
     c8e:	ea e3       	ldi	r30, 0x3A	; 58
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	80 83       	st	Z, r24
     c96:	0e c0       	rjmp	.+28     	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
     c98:	e7 e3       	ldi	r30, 0x37	; 55
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	80 83       	st	Z, r24
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	80 83       	st	Z, r24
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
     cac:	e1 e3       	ldi	r30, 0x31	; 49
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <DIO_vdSetPortValue+0x6>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_vdSetPortValue+0x8>
     cca:	00 d0       	rcall	.+0      	; 0xccc <DIO_vdSetPortValue+0xa>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <DIO_vdSetPortValue+0x1a>
     cda:	64 c0       	rjmp	.+200    	; 0xda4 <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	88 23       	and	r24, r24
     ce0:	79 f5       	brne	.+94     	; 0xd40 <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3e 83       	std	Y+6, r19	; 0x06
     cea:	2d 83       	std	Y+5, r18	; 0x05
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	c9 f0       	breq	.+50     	; 0xd28 <DIO_vdSetPortValue+0x66>
     cf6:	2d 81       	ldd	r18, Y+5	; 0x05
     cf8:	3e 81       	ldd	r19, Y+6	; 0x06
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	2c f4       	brge	.+10     	; 0xd0a <DIO_vdSetPortValue+0x48>
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <DIO_vdSetPortValue+0x5e>
     d08:	4d c0       	rjmp	.+154    	; 0xda4 <DIO_vdSetPortValue+0xe2>
     d0a:	2d 81       	ldd	r18, Y+5	; 0x05
     d0c:	3e 81       	ldd	r19, Y+6	; 0x06
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	71 f0       	breq	.+28     	; 0xd30 <DIO_vdSetPortValue+0x6e>
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	69 f0       	breq	.+26     	; 0xd38 <DIO_vdSetPortValue+0x76>
     d1e:	42 c0       	rjmp	.+132    	; 0xda4 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
     d20:	eb e3       	ldi	r30, 0x3B	; 59
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	10 82       	st	Z, r1
     d26:	3e c0       	rjmp	.+124    	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
     d28:	e8 e3       	ldi	r30, 0x38	; 56
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	10 82       	st	Z, r1
     d2e:	3a c0       	rjmp	.+116    	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
     d30:	e5 e3       	ldi	r30, 0x35	; 53
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	10 82       	st	Z, r1
     d36:	36 c0       	rjmp	.+108    	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
     d38:	e2 e3       	ldi	r30, 0x32	; 50
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	10 82       	st	Z, r1
     d3e:	32 c0       	rjmp	.+100    	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3c 83       	std	Y+4, r19	; 0x04
     d48:	2b 83       	std	Y+3, r18	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	d1 f0       	breq	.+52     	; 0xd88 <DIO_vdSetPortValue+0xc6>
     d54:	2b 81       	ldd	r18, Y+3	; 0x03
     d56:	3c 81       	ldd	r19, Y+4	; 0x04
     d58:	22 30       	cpi	r18, 0x02	; 2
     d5a:	31 05       	cpc	r19, r1
     d5c:	2c f4       	brge	.+10     	; 0xd68 <DIO_vdSetPortValue+0xa6>
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	61 f0       	breq	.+24     	; 0xd7e <DIO_vdSetPortValue+0xbc>
     d66:	1e c0       	rjmp	.+60     	; 0xda4 <DIO_vdSetPortValue+0xe2>
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	3c 81       	ldd	r19, Y+4	; 0x04
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	81 f0       	breq	.+32     	; 0xd92 <DIO_vdSetPortValue+0xd0>
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	9c 81       	ldd	r25, Y+4	; 0x04
     d76:	83 30       	cpi	r24, 0x03	; 3
     d78:	91 05       	cpc	r25, r1
     d7a:	81 f0       	breq	.+32     	; 0xd9c <DIO_vdSetPortValue+0xda>
     d7c:	13 c0       	rjmp	.+38     	; 0xda4 <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
     d7e:	eb e3       	ldi	r30, 0x3B	; 59
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	80 83       	st	Z, r24
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
     d88:	e8 e3       	ldi	r30, 0x38	; 56
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	80 83       	st	Z, r24
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
     d92:	e5 e3       	ldi	r30, 0x35	; 53
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	80 83       	st	Z, r24
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
     d9c:	e2 e3       	ldi	r30, 0x32	; 50
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
     da4:	26 96       	adiw	r28, 0x06	; 6
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <DIO_vdSetPinDirection>:

//Set pin direction
void DIO_vdSetPinDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	27 97       	sbiw	r28, 0x07	; 7
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	89 83       	std	Y+1, r24	; 0x01
     dcc:	6a 83       	std	Y+2, r22	; 0x02
     dce:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	84 30       	cpi	r24, 0x04	; 4
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <DIO_vdSetPinDirection+0x22>
     dd6:	ee c0       	rjmp	.+476    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <DIO_vdSetPinDirection+0x2a>
     dde:	ea c0       	rjmp	.+468    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	09 f0       	breq	.+2      	; 0xde8 <DIO_vdSetPinDirection+0x32>
     de6:	6f c0       	rjmp	.+222    	; 0xec6 <DIO_vdSetPinDirection+0x110>
		{
			switch(PortID)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	3f 83       	std	Y+7, r19	; 0x07
     df0:	2e 83       	std	Y+6, r18	; 0x06
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	9f 81       	ldd	r25, Y+7	; 0x07
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 05       	cpc	r25, r1
     dfa:	49 f1       	breq	.+82     	; 0xe4e <DIO_vdSetPinDirection+0x98>
     dfc:	2e 81       	ldd	r18, Y+6	; 0x06
     dfe:	3f 81       	ldd	r19, Y+7	; 0x07
     e00:	22 30       	cpi	r18, 0x02	; 2
     e02:	31 05       	cpc	r19, r1
     e04:	2c f4       	brge	.+10     	; 0xe10 <DIO_vdSetPinDirection+0x5a>
     e06:	8e 81       	ldd	r24, Y+6	; 0x06
     e08:	9f 81       	ldd	r25, Y+7	; 0x07
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	61 f0       	breq	.+24     	; 0xe26 <DIO_vdSetPinDirection+0x70>
     e0e:	d2 c0       	rjmp	.+420    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
     e10:	2e 81       	ldd	r18, Y+6	; 0x06
     e12:	3f 81       	ldd	r19, Y+7	; 0x07
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	31 05       	cpc	r19, r1
     e18:	71 f1       	breq	.+92     	; 0xe76 <DIO_vdSetPinDirection+0xc0>
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	91 05       	cpc	r25, r1
     e22:	e9 f1       	breq	.+122    	; 0xe9e <DIO_vdSetPinDirection+0xe8>
     e24:	c7 c0       	rjmp	.+398    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_vdSetPinDirection+0x8e>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_vdSetPinDirection+0x8a>
     e48:	84 2b       	or	r24, r20
     e4a:	8c 93       	st	X, r24
     e4c:	b3 c0       	rjmp	.+358    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
     e4e:	a7 e3       	ldi	r26, 0x37	; 55
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e7 e3       	ldi	r30, 0x37	; 55
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_vdSetPinDirection+0xb6>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_vdSetPinDirection+0xb2>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	9f c0       	rjmp	.+318    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
     e76:	a4 e3       	ldi	r26, 0x34	; 52
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e4 e3       	ldi	r30, 0x34	; 52
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_vdSetPinDirection+0xde>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_vdSetPinDirection+0xda>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
     e9c:	8b c0       	rjmp	.+278    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
     e9e:	a1 e3       	ldi	r26, 0x31	; 49
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e1 e3       	ldi	r30, 0x31	; 49
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_vdSetPinDirection+0x106>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_vdSetPinDirection+0x102>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	77 c0       	rjmp	.+238    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	88 23       	and	r24, r24
     eca:	09 f0       	breq	.+2      	; 0xece <DIO_vdSetPinDirection+0x118>
     ecc:	73 c0       	rjmp	.+230    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
		{
			switch(PortID)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3d 83       	std	Y+5, r19	; 0x05
     ed6:	2c 83       	std	Y+4, r18	; 0x04
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	59 f1       	breq	.+86     	; 0xf38 <DIO_vdSetPinDirection+0x182>
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	2c f4       	brge	.+10     	; 0xef6 <DIO_vdSetPinDirection+0x140>
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	69 f0       	breq	.+26     	; 0xf0e <DIO_vdSetPinDirection+0x158>
     ef4:	5f c0       	rjmp	.+190    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
     ef6:	2c 81       	ldd	r18, Y+4	; 0x04
     ef8:	3d 81       	ldd	r19, Y+5	; 0x05
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	89 f1       	breq	.+98     	; 0xf62 <DIO_vdSetPinDirection+0x1ac>
     f00:	8c 81       	ldd	r24, Y+4	; 0x04
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <DIO_vdSetPinDirection+0x156>
     f0a:	40 c0       	rjmp	.+128    	; 0xf8c <DIO_vdSetPinDirection+0x1d6>
     f0c:	53 c0       	rjmp	.+166    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
     f0e:	aa e3       	ldi	r26, 0x3A	; 58
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ea e3       	ldi	r30, 0x3A	; 58
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_vdSetPinDirection+0x176>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_vdSetPinDirection+0x172>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	3e c0       	rjmp	.+124    	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
     f38:	a7 e3       	ldi	r26, 0x37	; 55
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e7 e3       	ldi	r30, 0x37	; 55
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_vdSetPinDirection+0x1a0>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_vdSetPinDirection+0x19c>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	29 c0       	rjmp	.+82     	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
     f62:	a4 e3       	ldi	r26, 0x34	; 52
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e4 e3       	ldi	r30, 0x34	; 52
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_vdSetPinDirection+0x1ca>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_vdSetPinDirection+0x1c6>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <DIO_vdSetPinDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
     f8c:	a1 e3       	ldi	r26, 0x31	; 49
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e1 e3       	ldi	r30, 0x31	; 49
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_vdSetPinDirection+0x1f4>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_vdSetPinDirection+0x1f0>
     fae:	80 95       	com	r24
     fb0:	84 23       	and	r24, r20
     fb2:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
     fb4:	27 96       	adiw	r28, 0x07	; 7
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	27 97       	sbiw	r28, 0x07	; 7
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	6a 83       	std	Y+2, r22	; 0x02
     fde:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <DIO_vdSetPinValue+0x22>
     fe6:	ee c0       	rjmp	.+476    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	88 30       	cpi	r24, 0x08	; 8
     fec:	08 f0       	brcs	.+2      	; 0xff0 <DIO_vdSetPinValue+0x2a>
     fee:	ea c0       	rjmp	.+468    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_vdSetPinValue+0x32>
     ff6:	6f c0       	rjmp	.+222    	; 0x10d6 <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3f 83       	std	Y+7, r19	; 0x07
    1000:	2e 83       	std	Y+6, r18	; 0x06
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	49 f1       	breq	.+82     	; 0x105e <DIO_vdSetPinValue+0x98>
    100c:	2e 81       	ldd	r18, Y+6	; 0x06
    100e:	3f 81       	ldd	r19, Y+7	; 0x07
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <DIO_vdSetPinValue+0x5a>
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	61 f0       	breq	.+24     	; 0x1036 <DIO_vdSetPinValue+0x70>
    101e:	d2 c0       	rjmp	.+420    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
    1020:	2e 81       	ldd	r18, Y+6	; 0x06
    1022:	3f 81       	ldd	r19, Y+7	; 0x07
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	71 f1       	breq	.+92     	; 0x1086 <DIO_vdSetPinValue+0xc0>
    102a:	8e 81       	ldd	r24, Y+6	; 0x06
    102c:	9f 81       	ldd	r25, Y+7	; 0x07
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	e9 f1       	breq	.+122    	; 0x10ae <DIO_vdSetPinValue+0xe8>
    1034:	c7 c0       	rjmp	.+398    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
    1036:	ab e3       	ldi	r26, 0x3B	; 59
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	eb e3       	ldi	r30, 0x3B	; 59
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_vdSetPinValue+0x8e>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_vdSetPinValue+0x8a>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	b3 c0       	rjmp	.+358    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_vdSetPinValue+0xb6>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_vdSetPinValue+0xb2>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	9f c0       	rjmp	.+318    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
    1086:	a5 e3       	ldi	r26, 0x35	; 53
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e3       	ldi	r30, 0x35	; 53
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_vdSetPinValue+0xde>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_vdSetPinValue+0xda>
    10a8:	84 2b       	or	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	8b c0       	rjmp	.+278    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_vdSetPinValue+0x106>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_vdSetPinValue+0x102>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	77 c0       	rjmp	.+238    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <DIO_vdSetPinValue+0x118>
    10dc:	73 c0       	rjmp	.+230    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3d 83       	std	Y+5, r19	; 0x05
    10e6:	2c 83       	std	Y+4, r18	; 0x04
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	59 f1       	breq	.+86     	; 0x1148 <DIO_vdSetPinValue+0x182>
    10f2:	2c 81       	ldd	r18, Y+4	; 0x04
    10f4:	3d 81       	ldd	r19, Y+5	; 0x05
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <DIO_vdSetPinValue+0x140>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f0       	breq	.+26     	; 0x111e <DIO_vdSetPinValue+0x158>
    1104:	5f c0       	rjmp	.+190    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
    1106:	2c 81       	ldd	r18, Y+4	; 0x04
    1108:	3d 81       	ldd	r19, Y+5	; 0x05
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	89 f1       	breq	.+98     	; 0x1172 <DIO_vdSetPinValue+0x1ac>
    1110:	8c 81       	ldd	r24, Y+4	; 0x04
    1112:	9d 81       	ldd	r25, Y+5	; 0x05
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	09 f4       	brne	.+2      	; 0x111c <DIO_vdSetPinValue+0x156>
    111a:	40 c0       	rjmp	.+128    	; 0x119c <DIO_vdSetPinValue+0x1d6>
    111c:	53 c0       	rjmp	.+166    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    111e:	ab e3       	ldi	r26, 0x3B	; 59
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_vdSetPinValue+0x176>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_vdSetPinValue+0x172>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	3e c0       	rjmp	.+124    	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    1148:	a8 e3       	ldi	r26, 0x38	; 56
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e8 e3       	ldi	r30, 0x38	; 56
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_vdSetPinValue+0x1a0>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_vdSetPinValue+0x19c>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	29 c0       	rjmp	.+82     	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_vdSetPinValue+0x1ca>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_vdSetPinValue+0x1c6>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    119c:	a2 e3       	ldi	r26, 0x32	; 50
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e2 e3       	ldi	r30, 0x32	; 50
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_vdSetPinValue+0x1f4>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_vdSetPinValue+0x1f0>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    11c4:	27 96       	adiw	r28, 0x07	; 7
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_u8GetPinValue+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_u8GetPinValue+0x8>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIO_u8GetPinValue+0xa>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
    11e6:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <DIO_u8GetPinValue+0x1a>
    11ee:	70 c0       	rjmp	.+224    	; 0x12d0 <DIO_u8GetPinValue+0xfa>
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <DIO_u8GetPinValue+0x22>
    11f6:	6c c0       	rjmp	.+216    	; 0x12d0 <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	3d 83       	std	Y+5, r19	; 0x05
    1200:	2c 83       	std	Y+4, r18	; 0x04
    1202:	4c 81       	ldd	r20, Y+4	; 0x04
    1204:	5d 81       	ldd	r21, Y+5	; 0x05
    1206:	41 30       	cpi	r20, 0x01	; 1
    1208:	51 05       	cpc	r21, r1
    120a:	49 f1       	breq	.+82     	; 0x125e <DIO_u8GetPinValue+0x88>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	91 05       	cpc	r25, r1
    1214:	34 f4       	brge	.+12     	; 0x1222 <DIO_u8GetPinValue+0x4c>
    1216:	2c 81       	ldd	r18, Y+4	; 0x04
    1218:	3d 81       	ldd	r19, Y+5	; 0x05
    121a:	21 15       	cp	r18, r1
    121c:	31 05       	cpc	r19, r1
    121e:	61 f0       	breq	.+24     	; 0x1238 <DIO_u8GetPinValue+0x62>
    1220:	57 c0       	rjmp	.+174    	; 0x12d0 <DIO_u8GetPinValue+0xfa>
    1222:	4c 81       	ldd	r20, Y+4	; 0x04
    1224:	5d 81       	ldd	r21, Y+5	; 0x05
    1226:	42 30       	cpi	r20, 0x02	; 2
    1228:	51 05       	cpc	r21, r1
    122a:	61 f1       	breq	.+88     	; 0x1284 <DIO_u8GetPinValue+0xae>
    122c:	8c 81       	ldd	r24, Y+4	; 0x04
    122e:	9d 81       	ldd	r25, Y+5	; 0x05
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	d1 f1       	breq	.+116    	; 0x12aa <DIO_u8GetPinValue+0xd4>
    1236:	4c c0       	rjmp	.+152    	; 0x12d0 <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    1238:	e9 e3       	ldi	r30, 0x39	; 57
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8GetPinValue+0x7a>
    124c:	55 95       	asr	r21
    124e:	47 95       	ror	r20
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8GetPinValue+0x76>
    1254:	ca 01       	movw	r24, r20
    1256:	58 2f       	mov	r21, r24
    1258:	51 70       	andi	r21, 0x01	; 1
    125a:	5b 83       	std	Y+3, r21	; 0x03
    125c:	3a c0       	rjmp	.+116    	; 0x12d2 <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    125e:	e6 e3       	ldi	r30, 0x36	; 54
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	88 2f       	mov	r24, r24
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a9 01       	movw	r20, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_u8GetPinValue+0xa0>
    1272:	55 95       	asr	r21
    1274:	47 95       	ror	r20
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_u8GetPinValue+0x9c>
    127a:	ca 01       	movw	r24, r20
    127c:	58 2f       	mov	r21, r24
    127e:	51 70       	andi	r21, 0x01	; 1
    1280:	5b 83       	std	Y+3, r21	; 0x03
    1282:	27 c0       	rjmp	.+78     	; 0x12d2 <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    1284:	e3 e3       	ldi	r30, 0x33	; 51
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 2f       	mov	r24, r24
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <DIO_u8GetPinValue+0xc6>
    1298:	55 95       	asr	r21
    129a:	47 95       	ror	r20
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <DIO_u8GetPinValue+0xc2>
    12a0:	ca 01       	movw	r24, r20
    12a2:	58 2f       	mov	r21, r24
    12a4:	51 70       	andi	r21, 0x01	; 1
    12a6:	5b 83       	std	Y+3, r21	; 0x03
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    12aa:	e0 e3       	ldi	r30, 0x30	; 48
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8GetPinValue+0xec>
    12be:	55 95       	asr	r21
    12c0:	47 95       	ror	r20
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8GetPinValue+0xe8>
    12c6:	ca 01       	movw	r24, r20
    12c8:	58 2f       	mov	r21, r24
    12ca:	51 70       	andi	r21, 0x01	; 1
    12cc:	5b 83       	std	Y+3, r21	; 0x03
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <DIO_u8GetPinValue+0xfc>
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	8e 83       	std	Y+6, r24	; 0x06
    12d6:	8e 81       	ldd	r24, Y+6	; 0x06
    12d8:	26 96       	adiw	r28, 0x06	; 6
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_vdTogPortValue+0x6>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <DIO_vdTogPortValue+0x16>
    12fe:	3e c0       	rjmp	.+124    	; 0x137c <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3b 83       	std	Y+3, r19	; 0x03
    1308:	2a 83       	std	Y+2, r18	; 0x02
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	e9 f0       	breq	.+58     	; 0x134e <DIO_vdTogPortValue+0x64>
    1314:	2a 81       	ldd	r18, Y+2	; 0x02
    1316:	3b 81       	ldd	r19, Y+3	; 0x03
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_vdTogPortValue+0x3e>
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	9b 81       	ldd	r25, Y+3	; 0x03
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_vdTogPortValue+0x54>
    1326:	2a c0       	rjmp	.+84     	; 0x137c <DIO_vdTogPortValue+0x92>
    1328:	2a 81       	ldd	r18, Y+2	; 0x02
    132a:	3b 81       	ldd	r19, Y+3	; 0x03
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	b1 f0       	breq	.+44     	; 0x135e <DIO_vdTogPortValue+0x74>
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	9b 81       	ldd	r25, Y+3	; 0x03
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	c9 f0       	breq	.+50     	; 0x136e <DIO_vdTogPortValue+0x84>
    133c:	1f c0       	rjmp	.+62     	; 0x137c <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    133e:	ab e3       	ldi	r26, 0x3B	; 59
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e3       	ldi	r30, 0x3B	; 59
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 95       	com	r24
    134a:	8c 93       	st	X, r24
    134c:	17 c0       	rjmp	.+46     	; 0x137c <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    134e:	a8 e3       	ldi	r26, 0x38	; 56
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	80 95       	com	r24
    135a:	8c 93       	st	X, r24
    135c:	0f c0       	rjmp	.+30     	; 0x137c <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    135e:	a5 e3       	ldi	r26, 0x35	; 53
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e5 e3       	ldi	r30, 0x35	; 53
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	80 95       	com	r24
    136a:	8c 93       	st	X, r24
    136c:	07 c0       	rjmp	.+14     	; 0x137c <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 95       	com	r24
    137a:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_vdTogPinValue+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <DIO_vdTogPinValue+0x8>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <DIO_vdTogPinValue+0x18>
    139e:	6e c0       	rjmp	.+220    	; 0x147c <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	3c 83       	std	Y+4, r19	; 0x04
    13a8:	2b 83       	std	Y+3, r18	; 0x03
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	49 f1       	breq	.+82     	; 0x1406 <DIO_vdTogPinValue+0x7e>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <DIO_vdTogPinValue+0x40>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	61 f0       	breq	.+24     	; 0x13de <DIO_vdTogPinValue+0x56>
    13c6:	5a c0       	rjmp	.+180    	; 0x147c <DIO_vdTogPinValue+0xf4>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	71 f1       	breq	.+92     	; 0x142e <DIO_vdTogPinValue+0xa6>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	83 30       	cpi	r24, 0x03	; 3
    13d8:	91 05       	cpc	r25, r1
    13da:	e9 f1       	breq	.+122    	; 0x1456 <DIO_vdTogPinValue+0xce>
    13dc:	4f c0       	rjmp	.+158    	; 0x147c <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    13de:	ab e3       	ldi	r26, 0x3B	; 59
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_vdTogPinValue+0x74>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_vdTogPinValue+0x70>
    1400:	84 27       	eor	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	3b c0       	rjmp	.+118    	; 0x147c <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    1406:	a8 e3       	ldi	r26, 0x38	; 56
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_vdTogPinValue+0x9c>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_vdTogPinValue+0x98>
    1428:	84 27       	eor	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	27 c0       	rjmp	.+78     	; 0x147c <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    142e:	a5 e3       	ldi	r26, 0x35	; 53
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e3       	ldi	r30, 0x35	; 53
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_vdTogPinValue+0xc4>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_vdTogPinValue+0xc0>
    1450:	84 27       	eor	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	13 c0       	rjmp	.+38     	; 0x147c <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    1456:	a2 e3       	ldi	r26, 0x32	; 50
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_vdTogPinValue+0xec>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_vdTogPinValue+0xe8>
    1478:	84 27       	eor	r24, r20
    147a:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <EX_vdDisable>:
#include "EX_Interface.h"
#include "Ex_private.h"
#include "Macros.h"
#include "DIO_Interface.h"
void EX_vdDisable(u8 CopyInterrupt)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <EX_vdDisable+0x6>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
	if(CopyInterrupt <= EX_INT2)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	50 f5       	brcc	.+84     	; 0x14f2 <EX_vdDisable+0x68>
	{
		switch (CopyInterrupt)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3b 83       	std	Y+3, r19	; 0x03
    14a6:	2a 83       	std	Y+2, r18	; 0x02
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	9b 81       	ldd	r25, Y+3	; 0x03
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	89 f0       	breq	.+34     	; 0x14d4 <EX_vdDisable+0x4a>
    14b2:	2a 81       	ldd	r18, Y+2	; 0x02
    14b4:	3b 81       	ldd	r19, Y+3	; 0x03
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	a1 f0       	breq	.+40     	; 0x14e4 <EX_vdDisable+0x5a>
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	b9 f4       	brne	.+46     	; 0x14f2 <EX_vdDisable+0x68>
		{
		case EX_INT0:
			CLR_BIT(GICR_REGISTER,6);
    14c4:	ab e5       	ldi	r26, 0x5B	; 91
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	eb e5       	ldi	r30, 0x5B	; 91
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	8c 93       	st	X, r24
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <EX_vdDisable+0x68>
			break;
		case EX_INT1:
			CLR_BIT(GICR_REGISTER,7);
    14d4:	ab e5       	ldi	r26, 0x5B	; 91
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	eb e5       	ldi	r30, 0x5B	; 91
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	8f 77       	andi	r24, 0x7F	; 127
    14e0:	8c 93       	st	X, r24
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <EX_vdDisable+0x68>
			break;
		case EX_INT2:
			CLR_BIT(GICR_REGISTER,5);
    14e4:	ab e5       	ldi	r26, 0x5B	; 91
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e5       	ldi	r30, 0x5B	; 91
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <EX_vdConfigInterrupt>:

void EX_vdConfigInterrupt(u8 CopyInterrupt , u8 CopyControlSense)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	2a 97       	sbiw	r28, 0x0a	; 10
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
	if(CopyInterrupt <= EX_INT2 && CopyControlSense <= EX_SENSE_LOGIACL_CHANGE)
    1516:	89 81       	ldd	r24, Y+1	; 0x01
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	08 f0       	brcs	.+2      	; 0x151e <EX_vdConfigInterrupt+0x20>
    151c:	03 c1       	rjmp	.+518    	; 0x1724 <EX_vdConfigInterrupt+0x226>
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	08 f0       	brcs	.+2      	; 0x1526 <EX_vdConfigInterrupt+0x28>
    1524:	ff c0       	rjmp	.+510    	; 0x1724 <EX_vdConfigInterrupt+0x226>
	{
		switch (CopyInterrupt)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3a 87       	std	Y+10, r19	; 0x0a
    152e:	29 87       	std	Y+9, r18	; 0x09
    1530:	89 85       	ldd	r24, Y+9	; 0x09
    1532:	9a 85       	ldd	r25, Y+10	; 0x0a
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <EX_vdConfigInterrupt+0x3e>
    153a:	6d c0       	rjmp	.+218    	; 0x1616 <EX_vdConfigInterrupt+0x118>
    153c:	29 85       	ldd	r18, Y+9	; 0x09
    153e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <EX_vdConfigInterrupt+0x4a>
    1546:	c9 c0       	rjmp	.+402    	; 0x16da <EX_vdConfigInterrupt+0x1dc>
    1548:	89 85       	ldd	r24, Y+9	; 0x09
    154a:	9a 85       	ldd	r25, Y+10	; 0x0a
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <EX_vdConfigInterrupt+0x54>
    1550:	e9 c0       	rjmp	.+466    	; 0x1724 <EX_vdConfigInterrupt+0x226>
		{
			case EX_INT0:
				SET_BIT(GICR_REGISTER,6);
    1552:	ab e5       	ldi	r26, 0x5B	; 91
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e5       	ldi	r30, 0x5B	; 91
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24
				switch (CopyControlSense)
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	38 87       	std	Y+8, r19	; 0x08
    1568:	2f 83       	std	Y+7, r18	; 0x07
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	98 85       	ldd	r25, Y+8	; 0x08
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	21 f1       	breq	.+72     	; 0x15bc <EX_vdConfigInterrupt+0xbe>
    1574:	2f 81       	ldd	r18, Y+7	; 0x07
    1576:	38 85       	ldd	r19, Y+8	; 0x08
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <EX_vdConfigInterrupt+0x8a>
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	98 85       	ldd	r25, Y+8	; 0x08
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	61 f0       	breq	.+24     	; 0x159e <EX_vdConfigInterrupt+0xa0>
    1586:	ce c0       	rjmp	.+412    	; 0x1724 <EX_vdConfigInterrupt+0x226>
    1588:	2f 81       	ldd	r18, Y+7	; 0x07
    158a:	38 85       	ldd	r19, Y+8	; 0x08
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	21 f1       	breq	.+72     	; 0x15da <EX_vdConfigInterrupt+0xdc>
    1592:	8f 81       	ldd	r24, Y+7	; 0x07
    1594:	98 85       	ldd	r25, Y+8	; 0x08
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	71 f1       	breq	.+92     	; 0x15f8 <EX_vdConfigInterrupt+0xfa>
    159c:	c3 c0       	rjmp	.+390    	; 0x1724 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						CLR_BIT(MCUCR_REGISTER,0);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8e 7f       	andi	r24, 0xFE	; 254
    15aa:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REGISTER,1);
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	82 60       	ori	r24, 0x02	; 2
    15b8:	8c 93       	st	X, r24
    15ba:	b4 c0       	rjmp	.+360    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						SET_BIT(MCUCR_REGISTER,0);
    15bc:	a5 e5       	ldi	r26, 0x55	; 85
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e5       	ldi	r30, 0x55	; 85
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	81 60       	ori	r24, 0x01	; 1
    15c8:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REGISTER,1);
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	8c 93       	st	X, r24
    15d8:	a5 c0       	rjmp	.+330    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						CLR_BIT(MCUCR_REGISTER,0);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REGISTER,1);
    15e8:	a5 e5       	ldi	r26, 0x55	; 85
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e5       	ldi	r30, 0x55	; 85
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8d 7f       	andi	r24, 0xFD	; 253
    15f4:	8c 93       	st	X, r24
    15f6:	96 c0       	rjmp	.+300    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						SET_BIT(MCUCR_REGISTER,0);
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REGISTER,1);
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	8d 7f       	andi	r24, 0xFD	; 253
    1612:	8c 93       	st	X, r24
    1614:	87 c0       	rjmp	.+270    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT1:
				SET_BIT(GICR_REGISTER,7);
    1616:	ab e5       	ldi	r26, 0x5B	; 91
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e5       	ldi	r30, 0x5B	; 91
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
				switch (CopyControlSense)
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3e 83       	std	Y+6, r19	; 0x06
    162c:	2d 83       	std	Y+5, r18	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	21 f1       	breq	.+72     	; 0x1680 <EX_vdConfigInterrupt+0x182>
    1638:	2d 81       	ldd	r18, Y+5	; 0x05
    163a:	3e 81       	ldd	r19, Y+6	; 0x06
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <EX_vdConfigInterrupt+0x14e>
    1642:	8d 81       	ldd	r24, Y+5	; 0x05
    1644:	9e 81       	ldd	r25, Y+6	; 0x06
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	61 f0       	breq	.+24     	; 0x1662 <EX_vdConfigInterrupt+0x164>
    164a:	6c c0       	rjmp	.+216    	; 0x1724 <EX_vdConfigInterrupt+0x226>
    164c:	2d 81       	ldd	r18, Y+5	; 0x05
    164e:	3e 81       	ldd	r19, Y+6	; 0x06
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	21 f1       	breq	.+72     	; 0x169e <EX_vdConfigInterrupt+0x1a0>
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	91 05       	cpc	r25, r1
    165e:	71 f1       	breq	.+92     	; 0x16bc <EX_vdConfigInterrupt+0x1be>
    1660:	61 c0       	rjmp	.+194    	; 0x1724 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						CLR_BIT(MCUCR_REGISTER,2);
    1662:	a5 e5       	ldi	r26, 0x55	; 85
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e5       	ldi	r30, 0x55	; 85
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8b 7f       	andi	r24, 0xFB	; 251
    166e:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REGISTER,3);
    1670:	a5 e5       	ldi	r26, 0x55	; 85
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	e5 e5       	ldi	r30, 0x55	; 85
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	88 60       	ori	r24, 0x08	; 8
    167c:	8c 93       	st	X, r24
    167e:	52 c0       	rjmp	.+164    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						SET_BIT(MCUCR_REGISTER,2);
    1680:	a5 e5       	ldi	r26, 0x55	; 85
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e5 e5       	ldi	r30, 0x55	; 85
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	84 60       	ori	r24, 0x04	; 4
    168c:	8c 93       	st	X, r24
						SET_BIT(MCUCR_REGISTER,3);
    168e:	a5 e5       	ldi	r26, 0x55	; 85
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e5       	ldi	r30, 0x55	; 85
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	88 60       	ori	r24, 0x08	; 8
    169a:	8c 93       	st	X, r24
    169c:	43 c0       	rjmp	.+134    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOW_LEVEL:
						CLR_BIT(MCUCR_REGISTER,2);
    169e:	a5 e5       	ldi	r26, 0x55	; 85
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e5 e5       	ldi	r30, 0x55	; 85
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	8b 7f       	andi	r24, 0xFB	; 251
    16aa:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REGISTER,3);
    16ac:	a5 e5       	ldi	r26, 0x55	; 85
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e5       	ldi	r30, 0x55	; 85
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	87 7f       	andi	r24, 0xF7	; 247
    16b8:	8c 93       	st	X, r24
    16ba:	34 c0       	rjmp	.+104    	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_LOGIACL_CHANGE:
						SET_BIT(MCUCR_REGISTER,2);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	84 60       	ori	r24, 0x04	; 4
    16c8:	8c 93       	st	X, r24
						CLR_BIT(MCUCR_REGISTER,3);
    16ca:	a5 e5       	ldi	r26, 0x55	; 85
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e5       	ldi	r30, 0x55	; 85
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	87 7f       	andi	r24, 0xF7	; 247
    16d6:	8c 93       	st	X, r24
    16d8:	25 c0       	rjmp	.+74     	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
				}
				break;
			case EX_INT2:
				SET_BIT(GICR_REGISTER,5);
    16da:	ab e5       	ldi	r26, 0x5B	; 91
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e5       	ldi	r30, 0x5B	; 91
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	8c 93       	st	X, r24
				switch (CopyControlSense)
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	3c 83       	std	Y+4, r19	; 0x04
    16f0:	2b 83       	std	Y+3, r18	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	31 f0       	breq	.+12     	; 0x1706 <EX_vdConfigInterrupt+0x208>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	21 30       	cpi	r18, 0x01	; 1
    1700:	31 05       	cpc	r19, r1
    1702:	49 f0       	breq	.+18     	; 0x1716 <EX_vdConfigInterrupt+0x218>
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <EX_vdConfigInterrupt+0x226>
				{
					case EX_SENSE_FALLING_EDGE:
						CLR_BIT(MCUCSR_REGISTER,6);
    1706:	a4 e5       	ldi	r26, 0x54	; 84
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e4 e5       	ldi	r30, 0x54	; 84
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	8c 93       	st	X, r24
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <EX_vdConfigInterrupt+0x226>
						break;
					case EX_SENSE_RAISING_EDGE:
						SET_BIT(MCUCSR_REGISTER,6);
    1716:	a4 e5       	ldi	r26, 0x54	; 84
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e4 e5       	ldi	r30, 0x54	; 84
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
				}
				break;
		}
	}

}
    1724:	2a 96       	adiw	r28, 0x0a	; 10
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <GI_vdEnableGI>:
#include "GI_Private.h"
#include "Macros.h"
#include "Types.h"

void GI_vdEnableGI()
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REGISTER, BIT_I);
    173e:	af e5       	ldi	r26, 0x5F	; 95
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e5       	ldi	r30, 0x5F	; 95
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	8c 93       	st	X, r24
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <GI_vdDisEnableGI>:

void GI_vdDisEnableGI()
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	 CLR_BIT(SREG_REGISTER, BIT_I);
    175a:	af e5       	ldi	r26, 0x5F	; 95
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ef e5       	ldi	r30, 0x5F	; 95
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8f 77       	andi	r24, 0x7F	; 127
    1766:	8c 93       	st	X, r24
}
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret

0000176e <Keypad_vdInitialization>:
		{'7','8','9','*'},
		{'0','=','/','%'}
};

void Keypad_vdInitialization (void)
{
    176e:	df 93       	push	r29
    1770:	cf 93       	push	r28
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPortDirection(KEYPAD_U8_PORT, COLS_ROWS_DIRECTION);
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	6f e0       	ldi	r22, 0x0F	; 15
    177a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_vdSetPortDirection>
	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	6f ef       	ldi	r22, 0xFF	; 255
    1782:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_vdSetPortValue>
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <Keypad_vdGetPressedKey>:

void Keypad_vdGetPressedKey (u8 *LOC_pu8ReturnedData)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	63 97       	sbiw	r28, 0x13	; 19
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	9b 8b       	std	Y+19, r25	; 0x13
    17a2:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_u8RowsCounter , LOC_u8ColoumsCounter , LOC_u8StatusButton;

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_vdSetPortValue>

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    17ac:	19 8a       	std	Y+17, r1	; 0x11
    17ae:	bd c0       	rjmp	.+378    	; 0x192a <Keypad_vdGetPressedKey+0x19e>
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	69 89       	ldd	r22, Y+17	; 0x11
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    17ba:	18 8a       	std	Y+16, r1	; 0x10
    17bc:	aa c0       	rjmp	.+340    	; 0x1912 <Keypad_vdGetPressedKey+0x186>
		{
			LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    17be:	88 89       	ldd	r24, Y+16	; 0x10
    17c0:	98 2f       	mov	r25, r24
    17c2:	9c 5f       	subi	r25, 0xFC	; 252
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	69 2f       	mov	r22, r25
    17c8:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_u8GetPinValue>
    17cc:	8f 87       	std	Y+15, r24	; 0x0f

			if(LOC_u8StatusButton == PIN_LOW)
    17ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d0:	88 23       	and	r24, r24
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <Keypad_vdGetPressedKey+0x4a>
    17d4:	9b c0       	rjmp	.+310    	; 0x190c <Keypad_vdGetPressedKey+0x180>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 ea       	ldi	r26, 0xA0	; 160
    17dc:	b1 e4       	ldi	r27, 0x41	; 65
    17de:	8b 87       	std	Y+11, r24	; 0x0b
    17e0:	9c 87       	std	Y+12, r25	; 0x0c
    17e2:	ad 87       	std	Y+13, r26	; 0x0d
    17e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8f 83       	std	Y+7, r24	; 0x07
    1800:	98 87       	std	Y+8, r25	; 0x08
    1802:	a9 87       	std	Y+9, r26	; 0x09
    1804:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <Keypad_vdGetPressedKey+0x9c>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <Keypad_vdGetPressedKey+0x11a>
	else if (__tmp > 65535)
    1828:	6f 81       	ldd	r22, Y+7	; 0x07
    182a:	78 85       	ldd	r23, Y+8	; 0x08
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <Keypad_vdGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	6b 85       	ldd	r22, Y+11	; 0x0b
    1842:	7c 85       	ldd	r23, Y+12	; 0x0c
    1844:	8d 85       	ldd	r24, Y+13	; 0x0d
    1846:	9e 85       	ldd	r25, Y+14	; 0x0e
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <Keypad_vdGetPressedKey+0xfc>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <Keypad_vdGetPressedKey+0xea>
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <Keypad_vdGetPressedKey+0xde>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <Keypad_vdGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <Keypad_vdGetPressedKey+0x126>
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    18ba:	88 89       	ldd	r24, Y+16	; 0x10
    18bc:	98 2f       	mov	r25, r24
    18be:	9c 5f       	subi	r25, 0xFC	; 252
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	69 2f       	mov	r22, r25
    18c4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_u8GetPinValue>
    18c8:	8f 87       	std	Y+15, r24	; 0x0f
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <Keypad_vdGetPressedKey+0x150>

				while (LOC_u8StatusButton == PIN_LOW)
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    18cc:	88 89       	ldd	r24, Y+16	; 0x10
    18ce:	98 2f       	mov	r25, r24
    18d0:	9c 5f       	subi	r25, 0xFC	; 252
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	69 2f       	mov	r22, r25
    18d6:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DIO_u8GetPinValue>
    18da:	8f 87       	std	Y+15, r24	; 0x0f
			if(LOC_u8StatusButton == PIN_LOW)
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);

				while (LOC_u8StatusButton == PIN_LOW)
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	88 23       	and	r24, r24
    18e0:	a9 f3       	breq	.-22     	; 0x18cc <Keypad_vdGetPressedKey+0x140>
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
				}

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	48 2f       	mov	r20, r24
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	ca 01       	movw	r24, r20
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	82 0f       	add	r24, r18
    18fa:	93 1f       	adc	r25, r19
    18fc:	fc 01       	movw	r30, r24
    18fe:	e8 59       	subi	r30, 0x98	; 152
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	ea 89       	ldd	r30, Y+18	; 0x12
    1906:	fb 89       	ldd	r31, Y+19	; 0x13
    1908:	80 83       	st	Z, r24
    190a:	13 c0       	rjmp	.+38     	; 0x1932 <Keypad_vdGetPressedKey+0x1a6>

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    190c:	88 89       	ldd	r24, Y+16	; 0x10
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	88 8b       	std	Y+16, r24	; 0x10
    1912:	88 89       	ldd	r24, Y+16	; 0x10
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	08 f4       	brcc	.+2      	; 0x191a <Keypad_vdGetPressedKey+0x18e>
    1918:	52 cf       	rjmp	.-348    	; 0x17be <Keypad_vdGetPressedKey+0x32>

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	69 89       	ldd	r22, Y+17	; 0x11
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    1924:	89 89       	ldd	r24, Y+17	; 0x11
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	89 8b       	std	Y+17, r24	; 0x11
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	08 f4       	brcc	.+2      	; 0x1932 <Keypad_vdGetPressedKey+0x1a6>
    1930:	3f cf       	rjmp	.-386    	; 0x17b0 <Keypad_vdGetPressedKey+0x24>
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
	}
}
    1932:	63 96       	adiw	r28, 0x13	; 19
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	6d 97       	sbiw	r28, 0x1d	; 29
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1972:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	41 e0       	ldi	r20, 0x01	; 1
    197c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e8       	ldi	r26, 0x80	; 128
    1986:	bf e3       	ldi	r27, 0x3F	; 63
    1988:	89 8f       	std	Y+25, r24	; 0x19
    198a:	9a 8f       	std	Y+26, r25	; 0x1a
    198c:	ab 8f       	std	Y+27, r26	; 0x1b
    198e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	69 8d       	ldd	r22, Y+25	; 0x19
    1992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8d 8b       	std	Y+21, r24	; 0x15
    19aa:	9e 8b       	std	Y+22, r25	; 0x16
    19ac:	af 8b       	std	Y+23, r26	; 0x17
    19ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b0:	6d 89       	ldd	r22, Y+21	; 0x15
    19b2:	7e 89       	ldd	r23, Y+22	; 0x16
    19b4:	8f 89       	ldd	r24, Y+23	; 0x17
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9c 8b       	std	Y+20, r25	; 0x14
    19ce:	8b 8b       	std	Y+19, r24	; 0x13
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	69 8d       	ldd	r22, Y+25	; 0x19
    19ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	8b 8b       	std	Y+19, r24	; 0x13
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <LCD_vdSendCmd+0xee>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_vdSendCmd+0xdc>
    1a24:	9a 8b       	std	Y+18, r25	; 0x12
    1a26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9c 8b       	std	Y+20, r25	; 0x14
    1a30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8b 89       	ldd	r24, Y+19	; 0x13
    1a34:	9c 89       	ldd	r25, Y+20	; 0x14
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <LCD_vdSendCmd+0xd0>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
    1a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5a:	98 89       	ldd	r25, Y+16	; 0x10
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_vdSendCmd+0x118>
    1a60:	98 8b       	std	Y+16, r25	; 0x10
    1a62:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1a64:	83 e0       	ldi	r24, 0x03	; 3
    1a66:	62 e0       	ldi	r22, 0x02	; 2
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	8b 87       	std	Y+11, r24	; 0x0b
    1a78:	9c 87       	std	Y+12, r25	; 0x0c
    1a7a:	ad 87       	std	Y+13, r26	; 0x0d
    1a7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8f 83       	std	Y+7, r24	; 0x07
    1a98:	98 87       	std	Y+8, r25	; 0x08
    1a9a:	a9 87       	std	Y+9, r26	; 0x09
    1a9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_vdSendCmd+0x1dc>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_vdSendCmd+0x1ca>
    1b12:	9c 83       	std	Y+4, r25	; 0x04
    1b14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d 81       	ldd	r24, Y+5	; 0x05
    1b18:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d 81       	ldd	r24, Y+5	; 0x05
    1b22:	9e 81       	ldd	r25, Y+6	; 0x06
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_vdSendCmd+0x1be>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2c:	78 85       	ldd	r23, Y+8	; 0x08
    1b2e:	89 85       	ldd	r24, Y+9	; 0x09
    1b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	9a 83       	std	Y+2, r25	; 0x02
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_vdSendCmd+0x206>
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b52:	6d 96       	adiw	r28, 0x1d	; 29
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	41 e0       	ldi	r20, 0x01	; 1
    1b80:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1b84:	83 e0       	ldi	r24, 0x03	; 3
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b92:	0e 94 61 06 	call	0xcc2	; 0xcc2 <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	62 e0       	ldi	r22, 0x02	; 2
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e8       	ldi	r26, 0x80	; 128
    1ba6:	bf e3       	ldi	r27, 0x3F	; 63
    1ba8:	89 8f       	std	Y+25, r24	; 0x19
    1baa:	9a 8f       	std	Y+26, r25	; 0x1a
    1bac:	ab 8f       	std	Y+27, r26	; 0x1b
    1bae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	4a ef       	ldi	r20, 0xFA	; 250
    1bbe:	54 e4       	ldi	r21, 0x44	; 68
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8d 8b       	std	Y+21, r24	; 0x15
    1bca:	9e 8b       	std	Y+22, r25	; 0x16
    1bcc:	af 8b       	std	Y+23, r26	; 0x17
    1bce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	2c f4       	brge	.+10     	; 0x1bf2 <LCD_vdSendChar+0x8e>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	9c 8b       	std	Y+20, r25	; 0x14
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
    1bf0:	3f c0       	rjmp	.+126    	; 0x1c70 <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    1bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	3f ef       	ldi	r19, 0xFF	; 255
    1bfe:	4f e7       	ldi	r20, 0x7F	; 127
    1c00:	57 e4       	ldi	r21, 0x47	; 71
    1c02:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c06:	18 16       	cp	r1, r24
    1c08:	4c f5       	brge	.+82     	; 0x1c5c <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9c 8b       	std	Y+20, r25	; 0x14
    1c30:	8b 8b       	std	Y+19, r24	; 0x13
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <LCD_vdSendChar+0xee>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9a 8b       	std	Y+18, r25	; 0x12
    1c3a:	89 8b       	std	Y+17, r24	; 0x11
    1c3c:	89 89       	ldd	r24, Y+17	; 0x11
    1c3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_vdSendChar+0xdc>
    1c44:	9a 8b       	std	Y+18, r25	; 0x12
    1c46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9c 8b       	std	Y+20, r25	; 0x14
    1c50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8b 89       	ldd	r24, Y+19	; 0x13
    1c54:	9c 89       	ldd	r25, Y+20	; 0x14
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <LCD_vdSendChar+0xd0>
    1c5a:	14 c0       	rjmp	.+40     	; 0x1c84 <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c60:	8f 89       	ldd	r24, Y+23	; 0x17
    1c62:	98 8d       	ldd	r25, Y+24	; 0x18
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9c 8b       	std	Y+20, r25	; 0x14
    1c6e:	8b 8b       	std	Y+19, r24	; 0x13
    1c70:	8b 89       	ldd	r24, Y+19	; 0x13
    1c72:	9c 89       	ldd	r25, Y+20	; 0x14
    1c74:	98 8b       	std	Y+16, r25	; 0x10
    1c76:	8f 87       	std	Y+15, r24	; 0x0f
    1c78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c7a:	98 89       	ldd	r25, Y+16	; 0x10
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_vdSendChar+0x118>
    1c80:	98 8b       	std	Y+16, r25	; 0x10
    1c82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <DIO_vdSetPinValue>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e8       	ldi	r26, 0x80	; 128
    1c94:	bf e3       	ldi	r27, 0x3F	; 63
    1c96:	8b 87       	std	Y+11, r24	; 0x0b
    1c98:	9c 87       	std	Y+12, r25	; 0x0c
    1c9a:	ad 87       	std	Y+13, r26	; 0x0d
    1c9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	8f 83       	std	Y+7, r24	; 0x07
    1cb8:	98 87       	std	Y+8, r25	; 0x08
    1cba:	a9 87       	std	Y+9, r26	; 0x09
    1cbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cd2:	88 23       	and	r24, r24
    1cd4:	2c f4       	brge	.+10     	; 0x1ce0 <LCD_vdSendChar+0x17c>
		__ticks = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	3f c0       	rjmp	.+126    	; 0x1d5e <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	3f ef       	ldi	r19, 0xFF	; 255
    1cec:	4f e7       	ldi	r20, 0x7F	; 127
    1cee:	57 e4       	ldi	r21, 0x47	; 71
    1cf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	4c f5       	brge	.+82     	; 0x1d4a <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e2       	ldi	r20, 0x20	; 32
    1d06:	51 e4       	ldi	r21, 0x41	; 65
    1d08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	bc 01       	movw	r22, r24
    1d12:	cd 01       	movw	r24, r26
    1d14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	0f c0       	rjmp	.+30     	; 0x1d40 <LCD_vdSendChar+0x1dc>
    1d22:	88 ec       	ldi	r24, 0xC8	; 200
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_vdSendChar+0x1ca>
    1d32:	9c 83       	std	Y+4, r25	; 0x04
    1d34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	69 f7       	brne	.-38     	; 0x1d22 <LCD_vdSendChar+0x1be>
    1d48:	14 c0       	rjmp	.+40     	; 0x1d72 <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4c:	78 85       	ldd	r23, Y+8	; 0x08
    1d4e:	89 85       	ldd	r24, Y+9	; 0x09
    1d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_vdSendChar+0x206>
    1d6e:	9a 83       	std	Y+2, r25	; 0x02
    1d70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d72:	6d 96       	adiw	r28, 0x1d	; 29
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <LCD_vdInitialization>:

void LCD_vdInitialization(void)
{
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	c6 54       	subi	r28, 0x46	; 70
    1d92:	d0 40       	sbci	r29, 0x00	; 0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ed 5b       	subi	r30, 0xBD	; 189
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a8 e4       	ldi	r26, 0x48	; 72
    1daa:	b2 e4       	ldi	r27, 0x42	; 66
    1dac:	80 83       	st	Z, r24
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	a2 83       	std	Z+2, r26	; 0x02
    1db2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	8e 01       	movw	r16, r28
    1db6:	01 5c       	subi	r16, 0xC1	; 193
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ed 5b       	subi	r30, 0xBD	; 189
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a ef       	ldi	r20, 0xFA	; 250
    1dce:	54 e4       	ldi	r21, 0x44	; 68
    1dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	f8 01       	movw	r30, r16
    1dda:	80 83       	st	Z, r24
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	a2 83       	std	Z+2, r26	; 0x02
    1de0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de2:	fe 01       	movw	r30, r28
    1de4:	ff 96       	adiw	r30, 0x3f	; 63
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	5f e3       	ldi	r21, 0x3F	; 63
    1df6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dfa:	88 23       	and	r24, r24
    1dfc:	2c f4       	brge	.+10     	; 0x1e08 <LCD_vdInitialization+0x84>
		__ticks = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9e af       	std	Y+62, r25	; 0x3e
    1e04:	8d af       	std	Y+61, r24	; 0x3d
    1e06:	46 c0       	rjmp	.+140    	; 0x1e94 <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ff 96       	adiw	r30, 0x3f	; 63
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	4f e7       	ldi	r20, 0x7F	; 127
    1e1a:	57 e4       	ldi	r21, 0x47	; 71
    1e1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e20:	18 16       	cp	r1, r24
    1e22:	64 f5       	brge	.+88     	; 0x1e7c <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e24:	fe 01       	movw	r30, r28
    1e26:	ed 5b       	subi	r30, 0xBD	; 189
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e2       	ldi	r20, 0x20	; 32
    1e38:	51 e4       	ldi	r21, 0x41	; 65
    1e3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	9e af       	std	Y+62, r25	; 0x3e
    1e50:	8d af       	std	Y+61, r24	; 0x3d
    1e52:	0f c0       	rjmp	.+30     	; 0x1e72 <LCD_vdInitialization+0xee>
    1e54:	88 ec       	ldi	r24, 0xC8	; 200
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9c af       	std	Y+60, r25	; 0x3c
    1e5a:	8b af       	std	Y+59, r24	; 0x3b
    1e5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_vdInitialization+0xdc>
    1e64:	9c af       	std	Y+60, r25	; 0x3c
    1e66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e68:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	9e af       	std	Y+62, r25	; 0x3e
    1e70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e72:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e74:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	69 f7       	brne	.-38     	; 0x1e54 <LCD_vdInitialization+0xd0>
    1e7a:	16 c0       	rjmp	.+44     	; 0x1ea8 <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ff 96       	adiw	r30, 0x3f	; 63
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e af       	std	Y+62, r25	; 0x3e
    1e92:	8d af       	std	Y+61, r24	; 0x3d
    1e94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e98:	9a af       	std	Y+58, r25	; 0x3a
    1e9a:	89 af       	std	Y+57, r24	; 0x39
    1e9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_vdInitialization+0x11c>
    1ea4:	9a af       	std	Y+58, r25	; 0x3a
    1ea6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    1ea8:	88 e3       	ldi	r24, 0x38	; 56
    1eaa:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e2       	ldi	r26, 0x20	; 32
    1eb4:	b1 e4       	ldi	r27, 0x41	; 65
    1eb6:	8d ab       	std	Y+53, r24	; 0x35
    1eb8:	9e ab       	std	Y+54, r25	; 0x36
    1eba:	af ab       	std	Y+55, r26	; 0x37
    1ebc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a ef       	ldi	r20, 0xFA	; 250
    1ecc:	54 e4       	ldi	r21, 0x44	; 68
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	89 ab       	std	Y+49, r24	; 0x31
    1ed8:	9a ab       	std	Y+50, r25	; 0x32
    1eda:	ab ab       	std	Y+51, r26	; 0x33
    1edc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ede:	69 a9       	ldd	r22, Y+49	; 0x31
    1ee0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LCD_vdInitialization+0x17c>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	98 ab       	std	Y+48, r25	; 0x30
    1efc:	8f a7       	std	Y+47, r24	; 0x2f
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    1f00:	69 a9       	ldd	r22, Y+49	; 0x31
    1f02:	7a a9       	ldd	r23, Y+50	; 0x32
    1f04:	8b a9       	ldd	r24, Y+51	; 0x33
    1f06:	9c a9       	ldd	r25, Y+52	; 0x34
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	6d a9       	ldd	r22, Y+53	; 0x35
    1f1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_vdInitialization+0x1dc>
    1f42:	88 ec       	ldi	r24, 0xC8	; 200
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9e a7       	std	Y+46, r25	; 0x2e
    1f48:	8d a7       	std	Y+45, r24	; 0x2d
    1f4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_vdInitialization+0x1ca>
    1f52:	9e a7       	std	Y+46, r25	; 0x2e
    1f54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f58:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	98 ab       	std	Y+48, r25	; 0x30
    1f5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f62:	98 a9       	ldd	r25, Y+48	; 0x30
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LCD_vdInitialization+0x1be>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f70:	9c a9       	ldd	r25, Y+52	; 0x34
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	98 ab       	std	Y+48, r25	; 0x30
    1f7c:	8f a7       	std	Y+47, r24	; 0x2f
    1f7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f80:	98 a9       	ldd	r25, Y+48	; 0x30
    1f82:	9c a7       	std	Y+44, r25	; 0x2c
    1f84:	8b a7       	std	Y+43, r24	; 0x2b
    1f86:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f88:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_vdInitialization+0x206>
    1f8e:	9c a7       	std	Y+44, r25	; 0x2c
    1f90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    1f92:	8f e0       	ldi	r24, 0x0F	; 15
    1f94:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	a0 e2       	ldi	r26, 0x20	; 32
    1f9e:	b1 e4       	ldi	r27, 0x41	; 65
    1fa0:	8f a3       	std	Y+39, r24	; 0x27
    1fa2:	98 a7       	std	Y+40, r25	; 0x28
    1fa4:	a9 a7       	std	Y+41, r26	; 0x29
    1fa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa8:	6f a1       	ldd	r22, Y+39	; 0x27
    1faa:	78 a5       	ldd	r23, Y+40	; 0x28
    1fac:	89 a5       	ldd	r24, Y+41	; 0x29
    1fae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	8b a3       	std	Y+35, r24	; 0x23
    1fc2:	9c a3       	std	Y+36, r25	; 0x24
    1fc4:	ad a3       	std	Y+37, r26	; 0x25
    1fc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fca:	7c a1       	ldd	r23, Y+36	; 0x24
    1fcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1fce:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e8       	ldi	r20, 0x80	; 128
    1fd6:	5f e3       	ldi	r21, 0x3F	; 63
    1fd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fdc:	88 23       	and	r24, r24
    1fde:	2c f4       	brge	.+10     	; 0x1fea <LCD_vdInitialization+0x266>
		__ticks = 1;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9a a3       	std	Y+34, r25	; 0x22
    1fe6:	89 a3       	std	Y+33, r24	; 0x21
    1fe8:	3f c0       	rjmp	.+126    	; 0x2068 <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    1fea:	6b a1       	ldd	r22, Y+35	; 0x23
    1fec:	7c a1       	ldd	r23, Y+36	; 0x24
    1fee:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	3f ef       	ldi	r19, 0xFF	; 255
    1ff6:	4f e7       	ldi	r20, 0x7F	; 127
    1ff8:	57 e4       	ldi	r21, 0x47	; 71
    1ffa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ffe:	18 16       	cp	r1, r24
    2000:	4c f5       	brge	.+82     	; 0x2054 <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2002:	6f a1       	ldd	r22, Y+39	; 0x27
    2004:	78 a5       	ldd	r23, Y+40	; 0x28
    2006:	89 a5       	ldd	r24, Y+41	; 0x29
    2008:	9a a5       	ldd	r25, Y+42	; 0x2a
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	bc 01       	movw	r22, r24
    201c:	cd 01       	movw	r24, r26
    201e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9a a3       	std	Y+34, r25	; 0x22
    2028:	89 a3       	std	Y+33, r24	; 0x21
    202a:	0f c0       	rjmp	.+30     	; 0x204a <LCD_vdInitialization+0x2c6>
    202c:	88 ec       	ldi	r24, 0xC8	; 200
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	98 a3       	std	Y+32, r25	; 0x20
    2032:	8f 8f       	std	Y+31, r24	; 0x1f
    2034:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2036:	98 a1       	ldd	r25, Y+32	; 0x20
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_vdInitialization+0x2b4>
    203c:	98 a3       	std	Y+32, r25	; 0x20
    203e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2040:	89 a1       	ldd	r24, Y+33	; 0x21
    2042:	9a a1       	ldd	r25, Y+34	; 0x22
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	9a a3       	std	Y+34, r25	; 0x22
    2048:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204a:	89 a1       	ldd	r24, Y+33	; 0x21
    204c:	9a a1       	ldd	r25, Y+34	; 0x22
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	69 f7       	brne	.-38     	; 0x202c <LCD_vdInitialization+0x2a8>
    2052:	14 c0       	rjmp	.+40     	; 0x207c <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2054:	6b a1       	ldd	r22, Y+35	; 0x23
    2056:	7c a1       	ldd	r23, Y+36	; 0x24
    2058:	8d a1       	ldd	r24, Y+37	; 0x25
    205a:	9e a1       	ldd	r25, Y+38	; 0x26
    205c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9a a3       	std	Y+34, r25	; 0x22
    2066:	89 a3       	std	Y+33, r24	; 0x21
    2068:	89 a1       	ldd	r24, Y+33	; 0x21
    206a:	9a a1       	ldd	r25, Y+34	; 0x22
    206c:	9e 8f       	std	Y+30, r25	; 0x1e
    206e:	8d 8f       	std	Y+29, r24	; 0x1d
    2070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_vdInitialization+0x2f0>
    2078:	9e 8f       	std	Y+30, r25	; 0x1e
    207a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	a0 e2       	ldi	r26, 0x20	; 32
    2088:	b1 e4       	ldi	r27, 0x41	; 65
    208a:	89 8f       	std	Y+25, r24	; 0x19
    208c:	9a 8f       	std	Y+26, r25	; 0x1a
    208e:	ab 8f       	std	Y+27, r26	; 0x1b
    2090:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2092:	69 8d       	ldd	r22, Y+25	; 0x19
    2094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a ef       	ldi	r20, 0xFA	; 250
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8d 8b       	std	Y+21, r24	; 0x15
    20ac:	9e 8b       	std	Y+22, r25	; 0x16
    20ae:	af 8b       	std	Y+23, r26	; 0x17
    20b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b2:	6d 89       	ldd	r22, Y+21	; 0x15
    20b4:	7e 89       	ldd	r23, Y+22	; 0x16
    20b6:	8f 89       	ldd	r24, Y+23	; 0x17
    20b8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	40 e8       	ldi	r20, 0x80	; 128
    20c0:	5f e3       	ldi	r21, 0x3F	; 63
    20c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20c6:	88 23       	and	r24, r24
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <LCD_vdInitialization+0x350>
		__ticks = 1;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 8b       	std	Y+20, r25	; 0x14
    20d0:	8b 8b       	std	Y+19, r24	; 0x13
    20d2:	3f c0       	rjmp	.+126    	; 0x2152 <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    20d4:	6d 89       	ldd	r22, Y+21	; 0x15
    20d6:	7e 89       	ldd	r23, Y+22	; 0x16
    20d8:	8f 89       	ldd	r24, Y+23	; 0x17
    20da:	98 8d       	ldd	r25, Y+24	; 0x18
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	4c f5       	brge	.+82     	; 0x213e <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ec:	69 8d       	ldd	r22, Y+25	; 0x19
    20ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e2       	ldi	r20, 0x20	; 32
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	0f c0       	rjmp	.+30     	; 0x2134 <LCD_vdInitialization+0x3b0>
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9a 8b       	std	Y+18, r25	; 0x12
    211c:	89 8b       	std	Y+17, r24	; 0x11
    211e:	89 89       	ldd	r24, Y+17	; 0x11
    2120:	9a 89       	ldd	r25, Y+18	; 0x12
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_vdInitialization+0x39e>
    2126:	9a 8b       	std	Y+18, r25	; 0x12
    2128:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212a:	8b 89       	ldd	r24, Y+19	; 0x13
    212c:	9c 89       	ldd	r25, Y+20	; 0x14
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	69 f7       	brne	.-38     	; 0x2116 <LCD_vdInitialization+0x392>
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213e:	6d 89       	ldd	r22, Y+21	; 0x15
    2140:	7e 89       	ldd	r23, Y+22	; 0x16
    2142:	8f 89       	ldd	r24, Y+23	; 0x17
    2144:	98 8d       	ldd	r25, Y+24	; 0x18
    2146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	98 8b       	std	Y+16, r25	; 0x10
    2158:	8f 87       	std	Y+15, r24	; 0x0f
    215a:	8f 85       	ldd	r24, Y+15	; 0x0f
    215c:	98 89       	ldd	r25, Y+16	; 0x10
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <LCD_vdInitialization+0x3da>
    2162:	98 8b       	std	Y+16, r25	; 0x10
    2164:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    2166:	86 e0       	ldi	r24, 0x06	; 6
    2168:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e2       	ldi	r26, 0x20	; 32
    2172:	b1 e4       	ldi	r27, 0x41	; 65
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <LCD_vdInitialization+0x43a>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <LCD_vdInitialization+0x49a>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_vdInitialization+0x488>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <LCD_vdInitialization+0x47c>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <LCD_vdInitialization+0x4c4>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2250:	ca 5b       	subi	r28, 0xBA	; 186
    2252:	df 4f       	sbci	r29, 0xFF	; 255
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	08 95       	ret

00002268 <LCD_vdWriteString>:

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	00 d0       	rcall	.+0      	; 0x226e <LCD_vdWriteString+0x6>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	9a 83       	std	Y+2, r25	; 0x02
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	0a c0       	rjmp	.+20     	; 0x228c <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	80 81       	ld	r24, Z
    227e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_vdSendChar>
		LOC_u8Ptr++;
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	9a 81       	ldd	r25, Y+2	; 0x02
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    228c:	e9 81       	ldd	r30, Y+1	; 0x01
    228e:	fa 81       	ldd	r31, Y+2	; 0x02
    2290:	80 81       	ld	r24, Z
    2292:	88 23       	and	r24, r24
    2294:	89 f7       	brne	.-30     	; 0x2278 <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <LCD_vdStringPostion+0x6>
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <LCD_vdStringPostion+0x8>
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	6a 83       	std	Y+2, r22	; 0x02
    22b0:	5c 83       	std	Y+4, r21	; 0x04
    22b2:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	88 23       	and	r24, r24
    22b8:	49 f4       	brne	.+18     	; 0x22cc <LCD_vdStringPostion+0x2c>
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	80 31       	cpi	r24, 0x10	; 16
    22be:	30 f4       	brcc	.+12     	; 0x22cc <LCD_vdStringPostion+0x2c>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	8f 70       	andi	r24, 0x0F	; 15
    22c4:	80 68       	ori	r24, 0x80	; 128
    22c6:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <LCD_vdStringPostion+0x42>
	else if (row == 1 && pos<16)
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	41 f4       	brne	.+16     	; 0x22e2 <LCD_vdStringPostion+0x42>
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	80 31       	cpi	r24, 0x10	; 16
    22d6:	28 f4       	brcc	.+10     	; 0x22e2 <LCD_vdStringPostion+0x42>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	8f 70       	andi	r24, 0x0F	; 15
    22dc:	80 6c       	ori	r24, 0xC0	; 192
    22de:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	0e 94 34 11 	call	0x2268	; 0x2268 <LCD_vdWriteString>
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <LCD_vdClear>:

void LCD_vdClear()
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <LCD_vdSendDataoCGRAM+0x6>
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    231c:	80 e4       	ldi	r24, 0x40	; 64
    231e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    2322:	19 82       	std	Y+1, r1	; 0x01
    2324:	0d c0       	rjmp	.+26     	; 0x2340 <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    2326:	ea 81       	ldd	r30, Y+2	; 0x02
    2328:	fb 81       	ldd	r31, Y+3	; 0x03
    232a:	80 81       	ld	r24, Z
    232c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_vdSendChar>
		ptr++;
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	9b 83       	std	Y+3, r25	; 0x03
    2338:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	86 30       	cpi	r24, 0x06	; 6
    2344:	80 f3       	brcs	.-32     	; 0x2326 <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <LCD_vdGotoDDRAM+0x6>
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	88 23       	and	r24, r24
    2364:	49 f4       	brne	.+18     	; 0x2378 <LCD_vdGotoDDRAM+0x26>
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	80 31       	cpi	r24, 0x10	; 16
    236a:	30 f4       	brcc	.+12     	; 0x2378 <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	8f 70       	andi	r24, 0x0F	; 15
    2370:	80 68       	ori	r24, 0x80	; 128
    2372:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
    2376:	0b c0       	rjmp	.+22     	; 0x238e <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	41 f4       	brne	.+16     	; 0x238e <LCD_vdGotoDDRAM+0x3c>
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	80 31       	cpi	r24, 0x10	; 16
    2382:	28 f4       	brcc	.+10     	; 0x238e <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	8f 70       	andi	r24, 0x0F	; 15
    2388:	80 6c       	ori	r24, 0xC0	; 192
    238a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_vdSendCmd>
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <LCD_vdWriteNum>:

void LCD_vdWriteNum(u32 num)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	29 97       	sbiw	r28, 0x09	; 9
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	6e 83       	std	Y+6, r22	; 0x06
    23ae:	7f 83       	std	Y+7, r23	; 0x07
    23b0:	88 87       	std	Y+8, r24	; 0x08
    23b2:	99 87       	std	Y+9, r25	; 0x09
	u32 reverse=0;
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1b 82       	std	Y+3, r1	; 0x03
    23b8:	1c 82       	std	Y+4, r1	; 0x04
    23ba:	1d 82       	std	Y+5, r1	; 0x05
	u8 reminder=0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
	if(num>=10)
    23be:	8e 81       	ldd	r24, Y+6	; 0x06
    23c0:	9f 81       	ldd	r25, Y+7	; 0x07
    23c2:	a8 85       	ldd	r26, Y+8	; 0x08
    23c4:	b9 85       	ldd	r27, Y+9	; 0x09
    23c6:	8a 30       	cpi	r24, 0x0A	; 10
    23c8:	91 05       	cpc	r25, r1
    23ca:	a1 05       	cpc	r26, r1
    23cc:	b1 05       	cpc	r27, r1
    23ce:	08 f4       	brcc	.+2      	; 0x23d2 <LCD_vdWriteNum+0x3a>
    23d0:	75 c0       	rjmp	.+234    	; 0x24bc <LCD_vdWriteNum+0x124>
    23d2:	3c c0       	rjmp	.+120    	; 0x244c <LCD_vdWriteNum+0xb4>
	{
		while(num !=0)
		{
			reminder = num%10;
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	9f 81       	ldd	r25, Y+7	; 0x07
    23d8:	a8 85       	ldd	r26, Y+8	; 0x08
    23da:	b9 85       	ldd	r27, Y+9	; 0x09
    23dc:	2a e0       	ldi	r18, 0x0A	; 10
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodsi4>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	89 83       	std	Y+1, r24	; 0x01
			reverse = reverse*10+reminder;
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	ac 81       	ldd	r26, Y+4	; 0x04
    23f8:	bd 81       	ldd	r27, Y+5	; 0x05
    23fa:	2a e0       	ldi	r18, 0x0A	; 10
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	bc 01       	movw	r22, r24
    2404:	cd 01       	movw	r24, r26
    2406:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__mulsi3>
    240a:	9b 01       	movw	r18, r22
    240c:	ac 01       	movw	r20, r24
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e0       	ldi	r26, 0x00	; 0
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	a4 1f       	adc	r26, r20
    241e:	b5 1f       	adc	r27, r21
    2420:	8a 83       	std	Y+2, r24	; 0x02
    2422:	9b 83       	std	Y+3, r25	; 0x03
    2424:	ac 83       	std	Y+4, r26	; 0x04
    2426:	bd 83       	std	Y+5, r27	; 0x05
			num/=10;
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	a8 85       	ldd	r26, Y+8	; 0x08
    242e:	b9 85       	ldd	r27, Y+9	; 0x09
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodsi4>
    2440:	da 01       	movw	r26, r20
    2442:	c9 01       	movw	r24, r18
    2444:	8e 83       	std	Y+6, r24	; 0x06
    2446:	9f 83       	std	Y+7, r25	; 0x07
    2448:	a8 87       	std	Y+8, r26	; 0x08
    244a:	b9 87       	std	Y+9, r27	; 0x09
{
	u32 reverse=0;
	u8 reminder=0;
	if(num>=10)
	{
		while(num !=0)
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	a8 85       	ldd	r26, Y+8	; 0x08
    2452:	b9 85       	ldd	r27, Y+9	; 0x09
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	a1 05       	cpc	r26, r1
    2458:	b1 05       	cpc	r27, r1
    245a:	09 f0       	breq	.+2      	; 0x245e <LCD_vdWriteNum+0xc6>
    245c:	bb cf       	rjmp	.-138    	; 0x23d4 <LCD_vdWriteNum+0x3c>
    245e:	25 c0       	rjmp	.+74     	; 0x24aa <LCD_vdWriteNum+0x112>
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
		{
			reminder = reverse%10;
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	ac 81       	ldd	r26, Y+4	; 0x04
    2466:	bd 81       	ldd	r27, Y+5	; 0x05
    2468:	2a e0       	ldi	r18, 0x0A	; 10
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodsi4>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	89 83       	std	Y+1, r24	; 0x01
			LCD_vdSendChar(reminder+'0');
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	80 5d       	subi	r24, 0xD0	; 208
    2482:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_vdSendChar>
			reverse/=10;
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	9b 81       	ldd	r25, Y+3	; 0x03
    248a:	ac 81       	ldd	r26, Y+4	; 0x04
    248c:	bd 81       	ldd	r27, Y+5	; 0x05
    248e:	2a e0       	ldi	r18, 0x0A	; 10
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 8a 12 	call	0x2514	; 0x2514 <__udivmodsi4>
    249e:	da 01       	movw	r26, r20
    24a0:	c9 01       	movw	r24, r18
    24a2:	8a 83       	std	Y+2, r24	; 0x02
    24a4:	9b 83       	std	Y+3, r25	; 0x03
    24a6:	ac 83       	std	Y+4, r26	; 0x04
    24a8:	bd 83       	std	Y+5, r27	; 0x05
		{
			reminder = num%10;
			reverse = reverse*10+reminder;
			num/=10;
		}
		while(reverse !=0)
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	9b 81       	ldd	r25, Y+3	; 0x03
    24ae:	ac 81       	ldd	r26, Y+4	; 0x04
    24b0:	bd 81       	ldd	r27, Y+5	; 0x05
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	a1 05       	cpc	r26, r1
    24b6:	b1 05       	cpc	r27, r1
    24b8:	99 f6       	brne	.-90     	; 0x2460 <LCD_vdWriteNum+0xc8>
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <LCD_vdWriteNum+0x12c>
			reverse/=10;
		}
	}
	else
	{
		LCD_vdSendChar(num+'0');
    24bc:	8e 81       	ldd	r24, Y+6	; 0x06
    24be:	80 5d       	subi	r24, 0xD0	; 208
    24c0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LCD_vdSendChar>
	}
}
    24c4:	29 96       	adiw	r28, 0x09	; 9
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <__mulsi3>:
    24d6:	62 9f       	mul	r22, r18
    24d8:	d0 01       	movw	r26, r0
    24da:	73 9f       	mul	r23, r19
    24dc:	f0 01       	movw	r30, r0
    24de:	82 9f       	mul	r24, r18
    24e0:	e0 0d       	add	r30, r0
    24e2:	f1 1d       	adc	r31, r1
    24e4:	64 9f       	mul	r22, r20
    24e6:	e0 0d       	add	r30, r0
    24e8:	f1 1d       	adc	r31, r1
    24ea:	92 9f       	mul	r25, r18
    24ec:	f0 0d       	add	r31, r0
    24ee:	83 9f       	mul	r24, r19
    24f0:	f0 0d       	add	r31, r0
    24f2:	74 9f       	mul	r23, r20
    24f4:	f0 0d       	add	r31, r0
    24f6:	65 9f       	mul	r22, r21
    24f8:	f0 0d       	add	r31, r0
    24fa:	99 27       	eor	r25, r25
    24fc:	72 9f       	mul	r23, r18
    24fe:	b0 0d       	add	r27, r0
    2500:	e1 1d       	adc	r30, r1
    2502:	f9 1f       	adc	r31, r25
    2504:	63 9f       	mul	r22, r19
    2506:	b0 0d       	add	r27, r0
    2508:	e1 1d       	adc	r30, r1
    250a:	f9 1f       	adc	r31, r25
    250c:	bd 01       	movw	r22, r26
    250e:	cf 01       	movw	r24, r30
    2510:	11 24       	eor	r1, r1
    2512:	08 95       	ret

00002514 <__udivmodsi4>:
    2514:	a1 e2       	ldi	r26, 0x21	; 33
    2516:	1a 2e       	mov	r1, r26
    2518:	aa 1b       	sub	r26, r26
    251a:	bb 1b       	sub	r27, r27
    251c:	fd 01       	movw	r30, r26
    251e:	0d c0       	rjmp	.+26     	; 0x253a <__udivmodsi4_ep>

00002520 <__udivmodsi4_loop>:
    2520:	aa 1f       	adc	r26, r26
    2522:	bb 1f       	adc	r27, r27
    2524:	ee 1f       	adc	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	a2 17       	cp	r26, r18
    252a:	b3 07       	cpc	r27, r19
    252c:	e4 07       	cpc	r30, r20
    252e:	f5 07       	cpc	r31, r21
    2530:	20 f0       	brcs	.+8      	; 0x253a <__udivmodsi4_ep>
    2532:	a2 1b       	sub	r26, r18
    2534:	b3 0b       	sbc	r27, r19
    2536:	e4 0b       	sbc	r30, r20
    2538:	f5 0b       	sbc	r31, r21

0000253a <__udivmodsi4_ep>:
    253a:	66 1f       	adc	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	1a 94       	dec	r1
    2544:	69 f7       	brne	.-38     	; 0x2520 <__udivmodsi4_loop>
    2546:	60 95       	com	r22
    2548:	70 95       	com	r23
    254a:	80 95       	com	r24
    254c:	90 95       	com	r25
    254e:	9b 01       	movw	r18, r22
    2550:	ac 01       	movw	r20, r24
    2552:	bd 01       	movw	r22, r26
    2554:	cf 01       	movw	r24, r30
    2556:	08 95       	ret

00002558 <__prologue_saves__>:
    2558:	2f 92       	push	r2
    255a:	3f 92       	push	r3
    255c:	4f 92       	push	r4
    255e:	5f 92       	push	r5
    2560:	6f 92       	push	r6
    2562:	7f 92       	push	r7
    2564:	8f 92       	push	r8
    2566:	9f 92       	push	r9
    2568:	af 92       	push	r10
    256a:	bf 92       	push	r11
    256c:	cf 92       	push	r12
    256e:	df 92       	push	r13
    2570:	ef 92       	push	r14
    2572:	ff 92       	push	r15
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	ca 1b       	sub	r28, r26
    2582:	db 0b       	sbc	r29, r27
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	09 94       	ijmp

00002590 <__epilogue_restores__>:
    2590:	2a 88       	ldd	r2, Y+18	; 0x12
    2592:	39 88       	ldd	r3, Y+17	; 0x11
    2594:	48 88       	ldd	r4, Y+16	; 0x10
    2596:	5f 84       	ldd	r5, Y+15	; 0x0f
    2598:	6e 84       	ldd	r6, Y+14	; 0x0e
    259a:	7d 84       	ldd	r7, Y+13	; 0x0d
    259c:	8c 84       	ldd	r8, Y+12	; 0x0c
    259e:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a2:	b9 84       	ldd	r11, Y+9	; 0x09
    25a4:	c8 84       	ldd	r12, Y+8	; 0x08
    25a6:	df 80       	ldd	r13, Y+7	; 0x07
    25a8:	ee 80       	ldd	r14, Y+6	; 0x06
    25aa:	fd 80       	ldd	r15, Y+5	; 0x05
    25ac:	0c 81       	ldd	r16, Y+4	; 0x04
    25ae:	1b 81       	ldd	r17, Y+3	; 0x03
    25b0:	aa 81       	ldd	r26, Y+2	; 0x02
    25b2:	b9 81       	ldd	r27, Y+1	; 0x01
    25b4:	ce 0f       	add	r28, r30
    25b6:	d1 1d       	adc	r29, r1
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	de bf       	out	0x3e, r29	; 62
    25be:	0f be       	out	0x3f, r0	; 63
    25c0:	cd bf       	out	0x3d, r28	; 61
    25c2:	ed 01       	movw	r28, r26
    25c4:	08 95       	ret

000025c6 <_exit>:
    25c6:	f8 94       	cli

000025c8 <__stop_program>:
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <__stop_program>
